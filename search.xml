<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python</title>
      <link href="/2023/01/05/python/"/>
      <url>/2023/01/05/python/</url>
      
        <content type="html"><![CDATA[<hr><p>—— B站 Python 课程自学笔记         -&gt;<a href="https://www.bilibili.com/video/BV1wD4y1o7AS?p=1&vd_source=eca8bef44f4d5efc79f226fa688a5064&t=1.5">B站网课</a></p><h3 id="一、python简介"><a href="#一、python简介" class="headerlink" title="一、python简介"></a>一、python简介</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><blockquote><p><strong>python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</strong></p><ul><li><p>Python是<strong>解释型</strong>语言︰这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p></li><li><p>Python是<strong>交互式</strong>语言︰这意味着，您可以在一个Python提示符 <code>&gt;&gt;&gt;</code> 后直接执行代码。</p></li><li><p>Python是<strong>面向对象</strong>语言:这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p></li><li><p>Python是<strong>初学者</strong>的语言:Python对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到wwW浏览器再到游戏。</p></li></ul></blockquote><h4 id="2、Python发展历史"><a href="#2、Python发展历史" class="headerlink" title="2、Python发展历史"></a>2、Python发展历史</h4><blockquote><p>Python是由<strong>Guido van Rossum</strong>在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。<br>Python本身也是由诸多其他语言发展而来的,这包括ABC、Modula-3、C、C++、Algol-68、SmalTalk、Unix shell和其他的脚本语言等等。<br>像Perl语言一样，Python源代码同样遵循GPL(GNU General Public License)协议。<br>现在Python是由一个核心开发团队在维护，Guido van Rossum仍然占据着至关重要的作用，指导其进展。Python 2.7被确定为最后一个Python 2.x版本，它除了支持 Python 2.x语法外，还支持部分Python 3.1语法。</p></blockquote><h4 id="3、Pycharm设置"><a href="#3、Pycharm设置" class="headerlink" title="3、Pycharm设置"></a>3、Pycharm设置</h4><h5 id="（1）模板"><a href="#（1）模板" class="headerlink" title="（1）模板"></a>（1）模板</h5><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/1.png"> </p><h4 id="4、pip工具"><a href="#4、pip工具" class="headerlink" title="4、pip工具"></a>4、pip工具</h4><p>Python自带，支持Python扩展库的安装，升级和卸载等操作</p><table><thead><tr><th>pip命令示例</th><th>说明</th></tr></thead><tbody><tr><td>pip list</td><td>列出已安装的模块及其版本号</td></tr><tr><td>pip install SomePackage[&#x3D;&#x3D;version]</td><td>在线安装SomePackage模块的指定版本</td></tr><tr><td>pip install SomePackage. whl</td><td>通过whl文件离线安装扩展库</td></tr><tr><td>pip install Package1, package2 ···</td><td>依此(在线)安装Package1，Package2…</td></tr><tr><td>pip install -U SomePackage</td><td>升级SomePackage模块</td></tr><tr><td>pip uninstall SomePackage</td><td>卸载SomePackage模块</td></tr></tbody></table><p>常见pip镜像源（国内源）</p><ul><li><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></li><li><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p></li><li><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p></li><li><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p></li><li><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p></li><li><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p></li></ul><p>使用：pip install <strong>-i</strong> <strong><a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></strong> pyspider </p><hr><h3 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h3><h4 id="1、转义字符"><a href="#1、转义字符" class="headerlink" title="1、转义字符"></a>1、转义字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nworld&#x27;</span>)<span class="comment"># 1、\n : 换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\tworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;helloooo\nworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\rworld&#x27;</span>)<span class="comment"># world 将 hello 进行了覆盖</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\bworld&#x27;</span>)<span class="comment"># \b 是一个退格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;https:\\\\www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;老师说：\&quot;大家好\&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;原字符&quot;：不希望字符串中的 转义字符 起作用；使用：就是在字符串前加 r 或 R</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld\&#x27;) # 注意：最后一个字符不能是‘\’,但最后可以是‘\\’</span></span><br><span class="line"><span class="string">print(r&#x27;</span>hello\nworld\\<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="2、保留字"><a href="#2、保留字" class="headerlink" title="2、保留字"></a>2、保留字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist) <span class="comment"># 35个 </span></span><br></pre></td></tr></table></figure><h4 id="3、标识符"><a href="#3、标识符" class="headerlink" title="3、标识符"></a>3、标识符</h4><p>变量、函数、类、模块和其它对象的起的名字就叫标识符</p><p>规则:</p><ul><li>字母、数字、下划线_</li><li>不能以数字开头</li><li>不能是保留字</li><li>·严格区分大小写</li></ul><h4 id="4、变量"><a href="#4、变量" class="headerlink" title="4、变量"></a>4、变量</h4><p>变量是内存中一个带标签的盒子</p><p><strong>变量由三部分组成：</strong></p><ul><li><strong>标识</strong>:表示对象所存储的内存地址,使用内置函数**id(obj)**来获取</li><li><strong>类型</strong>:表示的是对象的数据类型,使用内置函数**type(obj)**来获取</li><li><strong>值</strong>:表示对象所存储的具体数据，使用print(obj)可以将值进行打印输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ggw&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/3.png" style="zoom: 67%;" /> <p><strong>在多次赋值后，变量名会指向新的空间</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;马丽亚&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;楚溜冰&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/4.png" style="zoom:67%;" /> <h4 id="5、数据类型"><a href="#5、数据类型" class="headerlink" title="5、数据类型"></a>5、数据类型</h4><h5 id="（1）整数类型"><a href="#（1）整数类型" class="headerlink" title="（1）整数类型"></a>（1）整数类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数可以表示为二级制、十进制、八进制、十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十进制&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二进制&#x27;</span>, <span class="number">0b10101111</span>)<span class="comment"># 0b...</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;八进制&#x27;</span>, <span class="number">0o176</span>)<span class="comment"># 0o...</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十六进制&#x27;</span>, <span class="number">0x1EAF</span>)<span class="comment"># 0x...</span></span><br></pre></td></tr></table></figure><h5 id="（2）浮点类型"><a href="#（2）浮点类型" class="headerlink" title="（2）浮点类型"></a>（2）浮点类型</h5><ul><li>使用浮点数进行计算时，可能会出现小数点位数不精确的情况</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1.1</span> + <span class="number">2.2</span>)<span class="comment"># = 3.3000000000000003</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.1</span> + <span class="number">2.1</span>)<span class="comment"># = 3.2</span></span><br></pre></td></tr></table></figure><ul><li>解决方案：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1.1&#x27;</span>) + Decimal(<span class="string">&#x27;2.2&#x27;</span>))<span class="comment"># = 3.3</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（3）布尔类型"><a href="#（3）布尔类型" class="headerlink" title="（3）布尔类型"></a>（3）布尔类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="literal">True</span></span><br><span class="line">f2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(f1 + <span class="number">1</span>)<span class="comment"># 1 + 1 = 2</span></span><br><span class="line"><span class="built_in">print</span>(f2 + <span class="number">1</span>)<span class="comment"># 0 + 1 = 1</span></span><br></pre></td></tr></table></figure><h5 id="（4）字符串类型"><a href="#（4）字符串类型" class="headerlink" title="（4）字符串类型"></a>（4）字符串类型</h5><ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号’ ‘、双引号” “、三引号’’’ ‘’’或””” “””来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布在连续的多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;人生苦短，我用Python&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;人生苦短，我用Python&quot;</span></span><br><span class="line">str3 = <span class="string">&quot;&quot;&quot;人生苦短，我用Python&quot;&quot;&quot;</span></span><br><span class="line">str4 = <span class="string">&#x27;&#x27;&#x27;人生苦短，</span></span><br><span class="line"><span class="string">我用Python&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="6、数据类型转换"><a href="#6、数据类型转换" class="headerlink" title="6、数据类型转换"></a>6、数据类型转换</h4><p>（1）<strong>str()</strong></p><p>将其他类型转化成字符串类型；</p><p>（2）<strong>int()</strong></p><p>将其他类型转化成int类型；（抹零取整）</p><p>文字类<code>&#39;123&#39;</code>和小数<code>&#39;12.3&#39;</code>串无法转；</p><p>（3）<strong>float()</strong></p><p>将其他类型转化成float类型；</p><p>文字类无法转；</p><h4 id="7、注释"><a href="#7、注释" class="headerlink" title="7、注释"></a>7、注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;多</span></span><br><span class="line"><span class="string">行</span></span><br><span class="line"><span class="string">注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件开头加上中文声明注释，用以指定源码文件的编码格式</span></span><br><span class="line"><span class="comment"># coding:gbk</span></span><br></pre></td></tr></table></figure><h4 id="8、运算符"><a href="#8、运算符" class="headerlink" title="8、运算符"></a>8、运算符</h4><h5 id="（1）算术运算符"><a href="#（1）算术运算符" class="headerlink" title="（1）算术运算符"></a>（1）算术运算符</h5><table><thead><tr><th>运算符</th><th>表示</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>&#x2F;&#x2F;</td><td>整数（一正一负，向下取整）</td></tr></tbody></table><h5 id="（2）赋值运算符"><a href="#（2）赋值运算符" class="headerlink" title="（2）赋值运算符"></a>（2）赋值运算符</h5><ul><li><p>支持链式赋值： a &#x3D; b &#x3D; c &#x3D; 20</p></li><li><p>支持参数赋值：+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、%&#x3D;</p></li><li><p>支持系列解包赋值：a, b, c &#x3D; 20, 30, 40</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换两个变量的值</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span> </span><br><span class="line">a, b = b, a <span class="comment"># a = 20, b = 10 </span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（3）比较运算符"><a href="#（3）比较运算符" class="headerlink" title="（3）比较运算符"></a>（3）比较运算符</h5><p>结果为bool类型</p><p>比较对象的标识用 is、 is not</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a == b<span class="comment"># True: a 与 b 的value相同</span></span><br><span class="line">a <span class="keyword">is</span> b<span class="comment"># True: a 与 b 的id标识相同</span></span><br></pre></td></tr></table></figure><h5 id="（4）布尔运算符"><a href="#（4）布尔运算符" class="headerlink" title="（4）布尔运算符"></a>（4）布尔运算符</h5><p>and、or、not、in、not in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in、not in</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h5 id="（5）位运算符"><a href="#（5）位运算符" class="headerlink" title="（5）位运算符"></a>（5）位运算符</h5><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/5.png" style="zoom: 67%;" /> <h5 id="（6）运算符优先级"><a href="#（6）运算符优先级" class="headerlink" title="（6）运算符优先级"></a>（6）运算符优先级</h5><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/6.png" style="zoom: 67%;" /> <h4 id="9、对象的布尔值"><a href="#9、对象的布尔值" class="headerlink" title="9、对象的布尔值"></a>9、对象的布尔值</h4><ul><li><p>Python<strong>—切皆对象</strong>，所有对象都有一个布尔值。</p></li><li><p>获取对象的布尔值，使用内置函数<strong>bool()</strong></p></li><li><p>以下对象的布尔值为False（其他均为True）</p><ul><li>False</li></ul></li><li><p>数值0</p><ul><li>None</li></ul></li><li><p>空字符串</p><ul><li>空列表 [] 、list()</li></ul></li><li><p>空元组 () 、tuple()</p><ul><li>空字典 {} 、dict()</li></ul></li><li><p>空集合 set()</p></li></ul><h4 id="10、pass语句"><a href="#10、pass语句" class="headerlink" title="10、pass语句"></a>10、pass语句</h4><p>语句什么都不做，只是一个占位符，用在语法上需要语句的地方<br><strong>什么时候使用</strong>：先搭建语法结构,还没想好代码怎么写的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="built_in">input</span>(<span class="string">&#x27;是否是会员？&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> ans == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="11、内置函数"><a href="#11、内置函数" class="headerlink" title="11、内置函数"></a>11、内置函数</h4><p>可以使用下列语句查看所有内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span>(__builtins__)</span><br></pre></td></tr></table></figure><p>可以使用<code>help(函数名)</code>查看某个函数的用法</p><h5 id="（1）print"><a href="#（1）print" class="headerlink" title="（1）print()"></a>（1）print()</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*objects, sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>objects</td><td>对象，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔</td></tr><tr><td>sep</td><td>用来间隔多个对象，默认值是一个空格</td></tr><tr><td>end</td><td>用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串</td></tr><tr><td>file</td><td>要写入的文件对象</td></tr><tr><td>flush</td><td>输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、输出数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10086</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、含有运算符的表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、将数据输出到文件中，ps: 盘符要存在, &#x27;a+&#x27;文件不存在则创建，存在则追加</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/GGW_2021/Desktop/笔记/python/text.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;helloworld&#x27;</span>, file=fp)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、不换行输出（输出内容在同一行上）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/2.png" style="zoom:50%;" /> <p>问题：在运行Python文件时出现<strong>警告：PEP 8: W292 no newline at end of file</strong><br>解决办法：在文件末尾加换行符（按回车即可）</p><h5 id="（2）input"><a href="#（2）input" class="headerlink" title="（2）input()"></a>（2）input()</h5><p>变量 &#x3D; input([提示语])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">present = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)<span class="comment"># 返回值为 字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(present)</span><br></pre></td></tr></table></figure><h5 id="（3）range"><a href="#（3）range" class="headerlink" title="（3）range()"></a>（3）range()</h5><ul><li>用于生成一个整数序列</li></ul><ul><li><p>返回值是一个迭代器对象</p></li><li><p>range类型的优点：不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的,因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素</p></li><li><p>in与not in判断整数序列中是否存在(不存在)指定的整数</p></li><li><p><strong>三种创建方式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot; 1、只有一个参数 &quot;&quot;&quot;</span><br><span class="line">r = range(10)   # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 默认从 0 开始，默认相差1（步长）</span><br><span class="line">print(r)        # range(0, 10)</span><br><span class="line">print(list(r))  # 用于查看 range 对象中的整数序列</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 2、两个参数 &quot;&quot;&quot;</span><br><span class="line">r = range(1, 10)   # range(start, stop, 默认相差1（步长）)</span><br><span class="line">print(list(r))     # [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 3、三个参数 &quot;&quot;&quot;</span><br><span class="line">r = range(1, 10, 2)   # range(start, stop, step)</span><br><span class="line">print(list(r))        # [1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure></li></ul><h4 id="12、不可变序列与可变序列"><a href="#12、不可变序列与可变序列" class="headerlink" title="12、不可变序列与可变序列"></a>12、不可变序列与可变序列</h4><ul><li>不变可变序:字符串、元组</li><li>不变可变序列：没有增、删，改的操作</li><li>可变序列:列表、字典</li><li>可变序列：可以对序列执行增、删、改操作，对象地址不发生更改</li></ul><h4 id="13、变量的作用域"><a href="#13、变量的作用域" class="headerlink" title="13、变量的作用域"></a>13、变量的作用域</h4><ul><li>程序代码能访问该变量的区域</li><li>根据变量的有效范围可分为<ul><li>局部变量：<br>    在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就会就成全局变量</li><li>全局变量：<br>     函数体外定义的变量，可作用于函数内外</li></ul></li></ul><h4 id="14、编码格式"><a href="#14、编码格式" class="headerlink" title="14、编码格式"></a>14、编码格式</h4><p>常见的字符编码格式</p><ul><li>Python的解释器使用的是Unicode (内存)</li><li>py文件在磁盘上使用UTF-8存储（外存)</li><li><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/25.png" style="zoom: 67%;" /></li></ul><h4 id="15、编程规范"><a href="#15、编程规范" class="headerlink" title="15、编程规范"></a>15、编程规范</h4><ul><li><code>\</code> 续行符</li></ul><hr><h3 id="三、程序的组织结构"><a href="#三、程序的组织结构" class="headerlink" title="三、程序的组织结构"></a>三、程序的组织结构</h3><h4 id="1、顺序结构"><a href="#1、顺序结构" class="headerlink" title="1、顺序结构"></a>1、顺序结构</h4><p>由上往下顺序执行</p><h4 id="2、分支结构"><a href="#2、分支结构" class="headerlink" title="2、分支结构"></a>2、分支结构</h4><h5 id="（1）单分支结构"><a href="#（1）单分支结构" class="headerlink" title="（1）单分支结构"></a>（1）单分支结构</h5><p>一个缩进表示层次结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">条件执行体</span><br></pre></td></tr></table></figure><h5 id="（2）双分支结构"><a href="#（2）双分支结构" class="headerlink" title="（2）双分支结构"></a>（2）双分支结构</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    条件执行体<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件执行体<span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="（3）多分支结构"><a href="#（3）多分支结构" class="headerlink" title="（3）多分支结构"></a>（3）多分支结构</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    条件执行体<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    条件执行体<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    条件执行体N</span><br><span class="line">[<span class="keyword">else</span>]:</span><br><span class="line">    条件执行体N + <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="（4）嵌套使用if"><a href="#（4）嵌套使用if" class="headerlink" title="（4）嵌套使用if"></a>（4）嵌套使用if</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    <span class="keyword">if</span> 内层条件表达式:</span><br><span class="line">        内层条件执行体<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        内层条件执行体<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件执行体</span><br></pre></td></tr></table></figure><h5 id="（5）条件表达式"><a href="#（5）条件表达式" class="headerlink" title="（5）条件表达式"></a>（5）条件表达式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断条件True: x, False: y </span></span><br><span class="line">x <span class="keyword">if</span> 判断条件 <span class="keyword">else</span> y</span><br></pre></td></tr></table></figure><h4 id="3、循环结构"><a href="#3、循环结构" class="headerlink" title="3、循环结构"></a>3、循环结构</h4><h5 id="（1）while"><a href="#（1）while" class="headerlink" title="（1）while"></a>（1）while</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">    条件执行体（循环体）</span><br></pre></td></tr></table></figure><h5 id="（2）for-in"><a href="#（2）for-in" class="headerlink" title="（2）for_in"></a>（2）for_in</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for 自定义的变量 in 可迭代对象:</span><br><span class="line">循环体</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 举例 &quot;&quot;&quot;</span><br><span class="line">for item in &#x27;python&#x27;:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">for item in range(10):  # range()产生一个整数序列 -&gt; 也是一个可迭代对象</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">for _ in range(5):  # 如果不需要用到自定义变量，可写为&#x27;_&#x27;</span><br><span class="line">    print(&#x27;人生苦短，我用python&#x27;)</span><br></pre></td></tr></table></figure><h5 id="（3）break语句、continue"><a href="#（3）break语句、continue" class="headerlink" title="（3）break语句、continue"></a>（3）break语句、continue</h5><ul><li><p>break 用于结束循环；</p></li><li><p>continue 用于结束当前循环，进入下一循环。</p></li></ul><h5 id="（4）else语句和while、for-in搭配使用"><a href="#（4）else语句和while、for-in搭配使用" class="headerlink" title="（4）else语句和while、for_in搭配使用"></a>（4）else语句和while、for_in搭配使用</h5><ul><li>控制本层循环</li></ul><ul><li><p>循环结束执行else</p></li><li><p>break跳出循环后不执行else</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> ... <span class="keyword">in</span> ...:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><h3 id="四、列表、字典、元组、集合"><a href="#四、列表、字典、元组、集合" class="headerlink" title="四、列表、字典、元组、集合"></a>四、列表、字典、元组、集合</h3><h4 id="1、列表"><a href="#1、列表" class="headerlink" title="1、列表"></a>1、列表</h4><h5 id="（1）列表创建的方式"><a href="#（1）列表创建的方式" class="headerlink" title="（1）列表创建的方式"></a>（1）列表创建的方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、使用[] &quot;&quot;&quot;</span></span><br><span class="line">lst1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、使用内置函数list() &quot;&quot;&quot;</span></span><br><span class="line">lst2 = <span class="built_in">list</span>([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>])</span><br></pre></td></tr></table></figure><h5 id="（2）列表的特点"><a href="#（2）列表的特点" class="headerlink" title="（2）列表的特点"></a>（2）列表的特点</h5><ul><li><p>列表元素按顺序有序排序</p></li><li><p>索引映射唯一个数据</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/7.png"> </p></li><li><p>列表可以存储重复数据</p></li><li><p>任意数据类型混存</p></li><li><p>根据需要<strong>动态分配和回收内存</strong></p></li></ul><h5 id="（3）获取、切片"><a href="#（3）获取、切片" class="headerlink" title="（3）获取、切片"></a>（3）获取、切片</h5><ul><li><p>获取列表指定元素的索引 <strong>index()</strong></p><ul><li><p>如查列表中存在N个相同元素，只返回相同元素中的第一个元素的索引</p></li><li><p>如果查询的元素在列表中不存在，则会抛出ValueError</p></li><li><p>还可以在指定的start和stop之间进行查找</p></li><li><p>index(‘目标’, start, end)  # start~end-1 <strong>指定范围</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;hello&#x27;</span>))   <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;python&#x27;</span>))  <span class="comment"># ValueError: &#x27;python&#x27; is not in list</span></span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;hello&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>))<span class="comment"># ValueError: &#x27;hello&#x27; is not in list</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>根据索引获取元素</p><ul><li><p>正向索引从 0 到 N - 1</p></li><li><p>逆向索引从 -N 到 -1</p></li><li><p>指定索引不存，抛出 indexError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>])   <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(lst[-<span class="number">1</span>])  <span class="comment"># 98</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">3</span>])   <span class="comment"># IndexError: list index out of range</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>切片操作</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/8.png" style="zoom: 50%;" />  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表&#x27;</span>, <span class="built_in">id</span>(lst))<span class="comment"># 2016570503552</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;新列表&#x27;</span>, <span class="built_in">id</span>(lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">1</span>]))<span class="comment"># 2016570470144</span></span><br><span class="line"><span class="comment"># 默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>])     <span class="comment"># [2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment"># 默认start</span></span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">6</span>:<span class="number">2</span>])    <span class="comment"># [1, 3, 5]</span></span><br><span class="line"><span class="comment"># 默认stop</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>::<span class="number">2</span>])    <span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; step为负数 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(lst[::-<span class="number">1</span>])    <span class="comment"># [8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">7</span>::-<span class="number">2</span>])   <span class="comment"># [8, 6, 4, 2]</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">6</span>:<span class="number">0</span>:-<span class="number">2</span>])  <span class="comment"># [7, 5, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（4）查询列表、遍历"><a href="#（4）查询列表、遍历" class="headerlink" title="（4）查询列表、遍历"></a>（4）查询列表、遍历</h5><ul><li><p>判断指定元素是否在列表中</p><p><code>元素 in 列表名</code></p><p><code>元素 not in 列表名</code></p></li><li><p>列表元素的遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代对象 <span class="keyword">in</span> 列表名:</span><br><span class="line">    操作</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> lst)         <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> lst)        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li></ul><h5 id="（5）添加"><a href="#（5）添加" class="headerlink" title="（5）添加"></a>（5）添加</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append()</td><td>在列表末尾添加一个元素</td></tr><tr><td>extend()</td><td>在列表末尾添加至少一个元素</td></tr><tr><td>insert()</td><td>在列表任意位置添加一个元素</td></tr><tr><td>切片</td><td>在列表任意位置添加至少一个元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原列表：&quot;</span>, <span class="built_in">id</span>(lst1))     <span class="comment"># 1814123508096</span></span><br><span class="line">lst1.append(<span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新列表：&quot;</span>, <span class="built_in">id</span>(lst1))     <span class="comment"># 1814123508096</span></span><br><span class="line"></span><br><span class="line">lst2 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="comment"># lst1.append(lst2)   </span></span><br><span class="line"><span class="comment"># 将lst2作为一个元素添加到列表的末尾 [10, 20, 30, 40, [&#x27;hello&#x27;, &#x27;world&#x27;]]</span></span><br><span class="line"><span class="comment"># 向列表末尾一次性添加多个元素</span></span><br><span class="line">lst1.extend(lst2)   <span class="comment"># [10, 20, 30, 40, &#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(lst1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定位置添加元素</span></span><br><span class="line">lst1.insert(<span class="number">1</span>, <span class="number">90</span>)  <span class="comment"># [10, 90, 20, 30, 40, &#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(lst1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在任意位置添加多个元素</span></span><br><span class="line">lst3 = [<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;xpl&#x27;</span>]</span><br><span class="line">lst1[<span class="number">1</span>:] = lst3 = [<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;xpl&#x27;</span>]    <span class="comment"># [10, &#x27;ggw&#x27;, &#x27;xpl&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(lst1)</span><br></pre></td></tr></table></figure><h5 id="（6）删除"><a href="#（6）删除" class="headerlink" title="（6）删除"></a>（6）删除</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>remove()</td><td>一次删除一个元素；<br/>重复元素只删除第一个；<br/>元素不存在抛出ValueError；</td></tr><tr><td>pop()</td><td>删除一个指定索引位置上的元素；<br/>指定索引不存在抛出IndexError；<br/>不指定索引，删除列表最后一个元素；</td></tr><tr><td>切片</td><td>一次至少删除一个元素</td></tr><tr><td>clear()</td><td>清空列表</td></tr><tr><td>del</td><td>删除列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>]</span><br><span class="line">lst.remove(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># [10, 20, 40, 50, 60, 70, 80]</span></span><br><span class="line"></span><br><span class="line">lst.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># [10, 40, 50, 60, 70, 80]</span></span><br><span class="line"><span class="comment"># lst.pop(6)</span></span><br><span class="line"><span class="comment"># print(lst)      # IndexError: pop index out of range</span></span><br><span class="line">lst.pop()</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># [10, 40, 50, 60, 70] 默认删除最后一个</span></span><br><span class="line"></span><br><span class="line">new_lst = lst[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(new_lst, lst)     <span class="comment"># [40, 50] [10, 40, 50, 60, 70]</span></span><br><span class="line"><span class="comment"># 切片删除</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = []</span><br><span class="line"><span class="built_in">print</span>(lst)              <span class="comment"># [10, 60, 70]</span></span><br><span class="line"></span><br><span class="line">lst.clear()</span><br><span class="line"><span class="built_in">print</span>(lst)              <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del lst</span></span><br><span class="line"><span class="comment"># print(lst)              </span></span><br><span class="line"><span class="comment"># NameError: name &#x27;lst&#x27; is not defined. Did you mean: &#x27;list&#x27;?</span></span><br></pre></td></tr></table></figure><h5 id="（7）修改"><a href="#（7）修改" class="headerlink" title="（7）修改"></a>（7）修改</h5><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="comment"># 一次修改一个值</span></span><br><span class="line">lst[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [10, 20, 100, 40]</span></span><br><span class="line"><span class="comment"># 一次修改多个值</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [10, 200, 300, 40]</span></span><br></pre></td></tr></table></figure><h5 id="（8）排序"><a href="#（8）排序" class="headerlink" title="（8）排序"></a>（8）排序</h5><ul><li><p>调用**sort()**方法，列有中的所有元素默认按照从小到大的顺序进行排序，可以指定reverse&#x3D;True，进行降序排序</p></li><li><p>调用内置函数**sorted()**，可以指定reverse&#x3D;True，进行降序排序，原列表不发生改变，产生新的列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">98</span>, <span class="number">54</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序前&#x27;</span>, lst1, <span class="built_in">id</span>(lst1))</span><br><span class="line"><span class="comment"># 开始排序，调用列表对象的 sort 方法</span></span><br><span class="line">lst1.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序后&#x27;</span>, lst1, <span class="built_in">id</span>(lst1))  <span class="comment"># [10, 20, 40, 54, 98] 1776600150400</span></span><br><span class="line"><span class="comment"># 使用参数 reverse = True 降序, 默认为False</span></span><br><span class="line">lst1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(lst1)  <span class="comment"># [98, 54, 40, 20, 10]</span></span><br><span class="line"></span><br><span class="line">lst2 = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">98</span>, <span class="number">54</span>]</span><br><span class="line">new_lst2 = <span class="built_in">sorted</span>(lst2)</span><br><span class="line"><span class="built_in">print</span>(lst2, <span class="built_in">id</span>(lst2))           <span class="comment"># [20, 40, 10, 98, 54] 2450901070336</span></span><br><span class="line"><span class="built_in">print</span>(new_lst2, <span class="built_in">id</span>(new_lst2))   <span class="comment"># [10, 20, 40, 54, 98] 2450901022144</span></span><br><span class="line"><span class="comment"># 指定关键字参数，降序</span></span><br><span class="line">desc_lst2 = <span class="built_in">sorted</span>(lst2, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(desc_lst2)                <span class="comment"># [98, 54, 40, 20, 10]</span></span><br></pre></td></tr></table></figure></li></ul><p>#####（9）列表生成式</p><p>  生成列表的公式</p><p>  语法格式：</p>  <img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/9.png" alt=" " style="zoom: 80%;" /> <p>  ps：“表示列表元素的表达式”中通常包含自定义变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">lst = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line">lst = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure><h4 id="2、字典"><a href="#2、字典" class="headerlink" title="2、字典"></a>2、字典</h4><h5 id="（1）什么是字典"><a href="#（1）什么是字典" class="headerlink" title="（1）什么是字典"></a>（1）什么是字典</h5><ul><li>Python内置的数据结构之一，与列表一样是一个可变序列</li><li>以键值对的方式存储数据,字典是一个无序的序列</li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/10.png" style="zoom:50%;" /> <h5 id="（2）实现原理"><a href="#（2）实现原理" class="headerlink" title="（2）实现原理"></a>（2）实现原理</h5><p>字典的实现原理与查字典类似，查字典是先根据部首或拼音查找应的页码,Python中的字典是根据<strong>key</strong>查找<strong>value</strong>所在的位置</p><p>字典示意图：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/11.png">  </p><h5 id="（3）创建"><a href="#（3）创建" class="headerlink" title="（3）创建"></a>（3）创建</h5><ul><li><p><strong>最常用</strong>：使用{}</p><p><code>scores = &#123;&#39;张三&#39;: 100, &#39;李四&#39;: 98, &#39;王五&#39;: 45&#125;</code></p></li><li><p>使用内置函数<strong>dict()</strong></p><p><code>scores = dict(张三=&#39;100&#39;, 李四=&#39;98&#39;, 王五=&#39;45&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、使用&#123;&#125;创建字典 &quot;&quot;&quot;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)       <span class="comment"># &#123;&#x27;张三&#x27;: 100, &#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scores)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、dict() &quot;&quot;&quot;</span></span><br><span class="line">scores = <span class="built_in">dict</span>(张三=<span class="string">&#x27;100&#x27;</span>, 李四=<span class="string">&#x27;98&#x27;</span>, 王五=<span class="string">&#x27;45&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># &#123;&#x27;张三&#x27;: &#x27;100&#x27;, &#x27;李四&#x27;: &#x27;98&#x27;, &#x27;王五&#x27;: &#x27;45&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 空字典 &quot;&quot;&quot;</span></span><br><span class="line">scores = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（4）获取"><a href="#（4）获取" class="headerlink" title="（4）获取"></a>（4）获取</h5><ul><li><p>[]</p><p><code>scores[&#39;张三&#39;]</code></p></li><li><p>get()</p><p><code>scores.get(&#39;张三&#39;)</code></p></li><li><p>区别</p><ul><li><p>如果字典中不存在指定的key，抛出keyError异常</p></li><li><p>get()方法取值，如果字典中不存在指定的key，并不会抛出KeyErre<br>None，可以通过参数设置默认的value,以便指定的key不存在时返回</p><p><code>get(key[, 默认值])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;不存在呢&#x27;</span>))    <span class="comment"># 不存在呢</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;ggw&#x27;</span>, <span class="number">404</span>))   <span class="comment"># 404</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="（5）增删改查"><a href="#（5）增删改查" class="headerlink" title="（5）增删改查"></a>（5）增删改查</h5><ul><li>判断：in \ not in(key)</li><li>删除：del scores[‘张三’]</li><li>新增：scores[‘ggw’] &#x3D; 99</li><li>修改：scores[‘ggw’] &#x3D; 100</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">in</span> scores)       <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> scores)   <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">del</span> scores[<span class="string">&#x27;张三&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(scores)       <span class="comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">scores[<span class="string">&#x27;ggw&#x27;</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;ggw&#x27;: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">scores[<span class="string">&#x27;ggw&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;ggw&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure><h5 id="（6）常用方法"><a href="#（6）常用方法" class="headerlink" title="（6）常用方法"></a>（6）常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>keys()</td><td>获取字典中所有的key</td></tr><tr><td>values()</td><td>获取字典中所有的value</td></tr><tr><td>items()</td><td>获取字典中所有的key, value对</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的key</span></span><br><span class="line">keys = scores.keys()</span><br><span class="line"><span class="built_in">print</span>(keys)         <span class="comment"># dict_keys([&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(keys))   <span class="comment"># &lt;class &#x27;dict_keys&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(keys))   <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]  转成列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的value</span></span><br><span class="line">values = scores.values()</span><br><span class="line"><span class="built_in">print</span>(values)         <span class="comment"># dict_values([100, 98, 45])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(values))   <span class="comment"># &lt;class &#x27;dict_values&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(values))   <span class="comment"># [100, 98, 45]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的key, value对</span></span><br><span class="line">items = scores.items()</span><br><span class="line"><span class="built_in">print</span>(items)         <span class="comment"># dict_items([(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(items))   <span class="comment"># &lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(items))   <span class="comment"># [(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)]    转成元组</span></span><br></pre></td></tr></table></figure><h5 id="（7）遍历"><a href="#（7）遍历" class="headerlink" title="（7）遍历"></a>（7）遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(item, scores[item], scores.get(item))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">张三 100 100</span></span><br><span class="line"><span class="string">李四 98 98</span></span><br><span class="line"><span class="string">王五 45 45</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（8）特点"><a href="#（8）特点" class="headerlink" title="（8）特点"></a>（8）特点</h5><ul><li>字典中的所有元素都是一个key-value对, <strong>key不允许重复</strong>, value可以重复</li><li>字典中的元素是无序的</li><li>字典中的key必须是不可变对象·字典也可以根据需要动态地伸缩</li><li>字典会浪费较大的内存，是一种使用空间换时间的数据结构</li></ul><h5 id="（9）字典生成式"><a href="#（9）字典生成式" class="headerlink" title="（9）字典生成式"></a>（9）字典生成式</h5><p><strong>内置函数zip()</strong><br>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Fruits&#x27;</span>, <span class="string">&#x27;Books&#x27;</span>, <span class="string">&#x27;Others&#x27;</span>]</span><br><span class="line">prices = [<span class="number">96</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">76</span>]</span><br><span class="line">d = &#123;item.upper(): price <span class="keyword">for</span> item, price <span class="keyword">in</span> <span class="built_in">zip</span>(items, prices)&#125;</span><br><span class="line"><span class="built_in">print</span>(d)    <span class="comment"># &#123;&#x27;FRUITS&#x27;: 96, &#x27;BOOKS&#x27;: 33, &#x27;OTHERS&#x27;: 22&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3、元组"><a href="#3、元组" class="headerlink" title="3、元组"></a>3、元组</h4><p>Python内置的数据结构之一，是一个不可变序列</p><h5 id="（1）创建"><a href="#（1）创建" class="headerlink" title="（1）创建"></a>（1）创建</h5><ul><li>小括号()</li><li>使用内置函数 tuple()</li><li>只包含一个元组的元素需要使用逗号和小括号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、小括号()</span></span><br><span class="line">t1 = (<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)       <span class="comment"># (&#x27;python&#x27;, &#x27;hello&#x27;, 90)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用内置函数 tuple()</span></span><br><span class="line">t2 = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">90</span>))</span><br><span class="line"><span class="built_in">print</span>(t2)       <span class="comment"># (&#x27;python&#x27;, &#x27;hello&#x27;, 90)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))     <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、只包含一个元组的元素需要使用逗号和小括号</span></span><br><span class="line">t3 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3)       <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))     <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(t4)       <span class="comment"># (&#x27;hello&#x27;,)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))     <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、创建空元组</span></span><br><span class="line">t5 = ()</span><br><span class="line">t6 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="built_in">print</span>(t5, t6)</span><br></pre></td></tr></table></figure><h5 id="（2）为什么元组要设计成不可变的序列"><a href="#（2）为什么元组要设计成不可变的序列" class="headerlink" title="（2）为什么元组要设计成不可变的序列"></a>（2）为什么元组要设计成不可变的序列</h5><ul><li><p>在多任务环境下，同时操作对象时不需要加锁</p></li><li><p>因此,在程序中尽量使用不可变序列</p></li><li><p><strong>注意事项</strong>: 元组中存储的是对象的引用</p><ul><li><p>如果元组中对象本身不可对象，则不能再引用其它对象</p></li><li><p>如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], <span class="number">40</span>)</span><br><span class="line"><span class="comment"># 元组不允许修改元素</span></span><br><span class="line"><span class="comment"># t[1] = 100  # TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line">t[<span class="number">1</span>].append(<span class="number">35</span>)</span><br><span class="line"><span class="built_in">print</span>(t)    <span class="comment"># (10, [20, 30, 35], 40)</span></span><br></pre></td></tr></table></figure><h5 id="（3）获取、遍历"><a href="#（3）获取、遍历" class="headerlink" title="（3）获取、遍历"></a>（3）获取、遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引获取元组元素</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])     <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>])     <span class="comment"># [20, 30]</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>])     <span class="comment"># 40</span></span><br><span class="line"><span class="comment"># print(t[3])     # IndexError: tuple index out of range</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h4 id="4、集合"><a href="#4、集合" class="headerlink" title="4、集合"></a>4、集合</h4><ul><li>Python语言提供的内置数据结构</li><li>与列表、字典―样都属于可变类型的序列</li><li>集合是没有value的字典</li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/12.png" style="zoom: 67%;" /> <h5 id="（1）创建-1"><a href="#（1）创建-1" class="headerlink" title="（1）创建"></a>（1）创建</h5><ul><li><p>花括号{}</p><p><code>s = &#123;1, 2, 4, 5, 5, 7, 7&#125;</code></p></li><li><p>使用内置函数set()</p><p><code>s = set(range(6))</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、花括号&#123;&#125; &quot;&quot;&quot;</span></span><br><span class="line">   <span class="comment"># 集合元素不允许重复</span></span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;1, 2, 4, 5, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、使用内置函数set() &quot;&quot;&quot;</span></span><br><span class="line">s = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;0, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>]))      <span class="comment"># &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>((<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>)))      <span class="comment"># &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&#x27;python&#x27;</span>))    <span class="comment"># &#123;&#x27;y&#x27;, &#x27;p&#x27;, &#x27;n&#x27;, &#x27;t&#x27;, &#x27;o&#x27;, &#x27;h&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">4</span>, <span class="number">4</span>&#125;))    <span class="comment"># &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3、空集合 &quot;&quot;&quot;</span></span><br><span class="line">s1 = &#123;&#125;</span><br><span class="line">s2 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(s1, <span class="built_in">type</span>(s1))     <span class="comment"># &#123;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(s2, <span class="built_in">type</span>(s2))     <span class="comment"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（2）增删改查"><a href="#（2）增删改查" class="headerlink" title="（2）增删改查"></a>（2）增删改查</h5><ul><li><p>集合元素的<strong>判断</strong>操作</p><p><code>in或not in</code></p></li><li><p>集合元素的<strong>新增</strong>操作</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>一次添中一个元素</td></tr><tr><td>update()</td><td>至少添中一个元素</td></tr></tbody></table></li><li><p>集合元素的<strong>删除</strong>操作</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>remove()</td><td>一次删除一个指定元素，如果指定的元素不存在抛出KeyError</td></tr><tr><td>discard()</td><td>一次删除一个指定元素，如果指定的元素不存在不抛出异常</td></tr><tr><td>pop()</td><td>一次只删除一个任意元素</td></tr><tr><td>clear()</td><td>清空集合</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">405</span>, <span class="number">60</span>&#125;</span><br><span class="line"><span class="string">&quot;&quot;&quot; 判断操作 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s)      <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">not</span> <span class="keyword">in</span> s)     <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 新增操作 &quot;&quot;&quot;</span></span><br><span class="line">s.add(<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;80, 20, 405, 10, 60, 30&#125;</span></span><br><span class="line">s.update(&#123;<span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;200, 10, 300, 80, 400, 20, 405, 60, 30&#125;</span></span><br><span class="line">s.update(([<span class="number">100</span>, <span class="number">99</span>, <span class="number">8</span>]))</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;99, 100, 200, 8, 10, 300, 80, 400, 20, 405, 60, 30&#125;</span></span><br><span class="line">s.update((<span class="number">78</span>, <span class="number">64</span>, <span class="number">56</span>))</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;64, 99, 100, 200, 8, 10, 300, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 删除操作 &quot;&quot;&quot;</span></span><br><span class="line">s.remove(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;64, 99, 200, 8, 10, 300, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line"><span class="comment"># s.remove(500)   # KeyError: 500</span></span><br><span class="line">s.discard(<span class="number">500</span>)</span><br><span class="line">s.discard(<span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;64, 99, 200, 8, 10, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line">s.pop()     <span class="comment"># 无参</span></span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;99, 200, 8, 10, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line">s.clear()</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># set()</span></span><br></pre></td></tr></table></figure><h5 id="（3）集合间的关系"><a href="#（3）集合间的关系" class="headerlink" title="（3）集合间的关系"></a>（3）集合间的关系</h5><ul><li><p>两个集合是否相等</p><ul><li>可以使用运算符&#x3D;&#x3D;或!&#x3D;进行判断</li></ul></li><li><p>一个集合是否是另一个集合的子集</p><ul><li><p>可以调用方法<strong>issubset</strong>进行判断</p></li><li><p>B是A的子集</p></li></ul></li><li><p>一个集合是否是另一个集合的超集</p><ul><li><p>可以调用方法<strong>issuperset</strong>进行判断·</p></li><li><p>A是B的超集</p></li></ul></li><li><p>两个集合是否没有交集</p><ul><li>可以调用方法<strong>isdisjoint</strong>进行判断，有交集为False</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="string">&quot;&quot;&quot; 两个集合是否相等 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2)     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s1 != s2)     <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 一个集合是否是另一个集合的子集 &quot;&quot;&quot;</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">s3 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">90</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s3.issubset(s1))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 一个集合是否是另一个集合的超集 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s2))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s3))    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 两个集合是否有交集 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s3))    <span class="comment"># False 有交集为False</span></span><br><span class="line">s4 = &#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s4))    <span class="comment"># True 无交集为True</span></span><br></pre></td></tr></table></figure><h5 id="（4）集合间的数学操作"><a href="#（4）集合间的数学操作" class="headerlink" title="（4）集合间的数学操作"></a>（4）集合间的数学操作</h5><ol><li><p>交集：<code>s1.intersection(s2)</code> 或者 <code>s1 &amp; s2</code></p></li><li><p>并集：<code>s1.union(s2)</code> 或者 <code>s1 | s2</code></p></li><li><p>差集：<code>s1.difference(s2)</code> 或者 <code>s1 - s2</code></p></li><li><p>对称差集：<code>s1.symmetric_difference(s2)</code>或者 <code>s1 ^ s2</code></p><p>ps：原集合都没有变化</p></li></ol><h5 id="（5）集合生成式"><a href="#（5）集合生成式" class="headerlink" title="（5）集合生成式"></a>（5）集合生成式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;0, 1, 64, 4, 36, 9, 16, 49, 81, 25&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/13.png" style="zoom: 50%;" /> <h3 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h3><p>在Python中字符串是基本数据类型，是一个<strong>不可变</strong>的字符序列</p><h4 id="1、字符串的驻留机制"><a href="#1、字符串的驻留机制" class="headerlink" title="1、字符串的驻留机制"></a>1、字符串的驻留机制</h4><p><strong>仅保存一份相同且不可变字符串</strong>的方法，不同的值被存放在字符串的驻留池中,Python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/14.png" style="zoom: 67%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;Python&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))     <span class="comment"># Python 1937251321008</span></span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">id</span>(b))     <span class="comment"># Python 1937251321008</span></span><br><span class="line"><span class="built_in">print</span>(c, <span class="built_in">id</span>(c))     <span class="comment"># Python 1937251321008</span></span><br></pre></td></tr></table></figure><ul><li>驻留机制的几种情况(交互模式)<ul><li>字符串的长度为0或1时</li><li>符合标识符的字符串</li><li>字符串只在编译时进行驻留，而非运行时</li><li>[-5,256]之间的整数数字</li></ul></li><li>sys中的intern方法强制2个字符串指向同一个对象 </li><li>PyCharm对字符串进行了优化处理(只要内容相同即驻留)</li><li>·字符串驻留机制的<strong>优缺点</strong><ul><li>当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的。</li><li>在需要进行字符串拼接时<strong>建议使用str类型的join方法</strong>，而非+ ,因为join()方法是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率要比”+”效率高</li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/15.png" style="zoom: 67%;" /> <h4 id="2、字符串的常用操作"><a href="#2、字符串的常用操作" class="headerlink" title="2、字符串的常用操作"></a>2、字符串的常用操作</h4><h5 id="（1）查询"><a href="#（1）查询" class="headerlink" title="（1）查询"></a>（1）查询</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>index()</td><td>查找子串substr第一次出现的位置，如果查找的子串不存在时，则抛出ValueError</td></tr><tr><td>rindex()</td><td>查找子串substr最后一次出现的位置，如果查找的子串不存在时，则抛出ValueError</td></tr><tr><td>find()</td><td>查找子串substr第一次出现的位置，如果查找的子串不存在时，则返回 -1</td></tr><tr><td>rfind()</td><td>查找子串substr最后一次出现的位置，如果查找的子串不存在时，则返回 -1</td></tr></tbody></table><h5 id="（2）大小写转换"><a href="#（2）大小写转换" class="headerlink" title="（2）大小写转换"></a>（2）大小写转换</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>upper()</td><td>把字符串中所有字符都转成大写字母；<br/>产生了新的字符串</td></tr><tr><td>lower()</td><td>把字符串中所有字符都转成小写字母；<br>产生了新的字符串</td></tr><tr><td>swapcase()</td><td>把字符串中所有大写字母转成小写字母，把所有小写字母都转成大写字母</td></tr><tr><td>capitalize()</td><td>把第一个字符转换为大写，把其余字符转换为小写</td></tr><tr><td>title()</td><td>把每个单词的第一个字符转换为大写，把每个单词的剩余字符转换为小写</td></tr></tbody></table><h5 id="（3）字符串对齐"><a href="#（3）字符串对齐" class="headerlink" title="（3）字符串对齐"></a>（3）字符串对齐</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>center()</td><td>居中对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td>ljust()</td><td>左对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td>rjust()</td><td>右对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td>zfill()</td><td>右对齐，左边用0填充,该方法只接收一个参数，用于指定字符串的宽度，如果指定的宽度小于等于字符串的长度，返回字符串本身</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">20</span>, <span class="string">&#x27;*&#x27;</span>))    <span class="comment"># ***hello, python****</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))    <span class="comment"># hello, python</span></span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">20</span>))      <span class="comment"># 0000000hello, python</span></span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">10</span>))      <span class="comment"># hello, python</span></span><br></pre></td></tr></table></figure><h5 id="（4）字符串的分割"><a href="#（4）字符串的分割" class="headerlink" title="（4）字符串的分割"></a>（4）字符串的分割</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>split()</td><td>从字符串的<strong>左</strong>边开始劈分，默认的劈分字符是空格字符串，返回的值都是一个列表；<br/>以通过参数sep指定劈分字符串是的劈分符；<br/>通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大次劈分之后，剩余的子串会单独做为一部分</td></tr><tr><td>rsplit()</td><td>从字符串的<strong>右</strong>边开始劈分，其他同split()</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello world python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.split())   <span class="comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span></span><br><span class="line">s2 = <span class="string">&#x27;hello|world|python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2.split())    <span class="comment"># [&#x27;hello|world|python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.split(sep=<span class="string">&#x27;|&#x27;</span>))     <span class="comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.split(sep=<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))     <span class="comment"># [&#x27;hello&#x27;, &#x27;world|python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.rsplit(sep=<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))    <span class="comment"># [&#x27;hello&#x27;, &#x27;world|python&#x27;]</span></span><br></pre></td></tr></table></figure><p>ps: 可以这么写<code>&#39;hello|world|python&#39;.split(&#39;|&#39;)&#39;</code></p><h5 id="（5）判断字符串"><a href="#（5）判断字符串" class="headerlink" title="（5）判断字符串"></a>（5）判断字符串</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>isidentifier()</td><td>判断指定的家符串是不是合法的标识符</td></tr><tr><td>isspace()</td><td>判断指定的字符串是否全部由空白字符组成(回车、换行，水平制表符)</td></tr><tr><td>isalpha()</td><td>判断指定的字符串是否全部由字母组成（汉字也是）</td></tr><tr><td>isdecimal()</td><td>判断指定字符串是否全部由十进制的数字组成</td></tr><tr><td>isnumeric()</td><td>判断指定的字符串是否全部由数字组成</td></tr><tr><td>isalnum()</td><td>判断指定字符串是否全部由字母和数字组成</td></tr></tbody></table><h5 id="（6）字符串的替换与合并"><a href="#（6）字符串的替换与合并" class="headerlink" title="（6）字符串的替换与合并"></a>（6）字符串的替换与合并</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>replace()</td><td>第1个参数指定被替换的子串，第2个参数指定替换子串的字符串，该方法返回替换后得到的字符串，替换前的字符串不发生变化,调用该方法时可以通过第3个参数指定最大替换次数</td></tr><tr><td>join()</td><td>将列表或元组中的字符串合并成一个字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 替换 &quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&#x27;hello world python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>))  <span class="comment"># hello world java</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="number">2</span>))     <span class="comment"># 将列表或元组中的字符串合并成一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 合并 &quot;&quot;&quot;</span></span><br><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(lst))     <span class="comment"># helloworldpython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; | &#x27;</span>.join(lst))  <span class="comment"># hello | world | python</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>.join(<span class="string">&#x27;python&#x27;</span>))   <span class="comment"># p*y*t*h*o*n</span></span><br></pre></td></tr></table></figure><h4 id="3、字符串的比较操作"><a href="#3、字符串的比较操作" class="headerlink" title="3、字符串的比较操作"></a>3、字符串的比较操作</h4><ul><li>运算符: &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, &#x3D;&#x3D;, !&#x3D;</li><li>比较规则:首先比较两个字符串中的第一个字符，如果相等则继续比较下一个字符，依次比较下去，直到两个字符串中的字符不相等时，其比较结果就是两个字符串的比较结果，两个字符串中的所有后续字符将不再被比较。</li><li>比较原理:两上字符进行比较时，比较的是其ordinal value(原始值)，<strong>调用内置函</strong><br><strong>数*ord()*可以得到指定字符的ordinal value**。与内置函数ord对应的是内置函数chr，调</strong>用内置函数*chr()*时指定ordinal value可以得到其对应的字符**。</li></ul><h4 id="4、字符串的切片操作"><a href="#4、字符串的切片操作" class="headerlink" title="4、字符串的切片操作"></a>4、字符串的切片操作</h4><ul><li>字符串是不可变类型<ul><li>不具备增、删、改等操作</li><li><strong>切片操作将产生新的对象</strong></li></ul></li></ul><p>切片操作同列表<code>str[start: end: step]</code></p><h4 id="5、格式化字符串"><a href="#5、格式化字符串" class="headerlink" title="5、格式化字符串"></a>5、格式化字符串</h4><p>两种方式：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/16.png" style="zoom: 67%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 1、%占位符 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫%s, 今年%d岁&#x27;</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、&#123;&#125;占位符 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0&#125;, 今年&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3、f-string &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>, 今年<span class="subst">&#123;age&#125;</span>岁&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 精度 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10d&#x27;</span> % <span class="number">99</span>)  <span class="comment"># 10表示的是宽度 |        99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.3f&#x27;</span> % <span class="number">3.1415926</span>)   <span class="comment"># 3表示的是小数点后3位 |3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10.3f&#x27;</span> % <span class="number">3.1415926</span>)     <span class="comment"># |     3.142</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))   <span class="comment"># 3表示的是一个三位 |3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))   <span class="comment"># 3表示的是一个三位小数 |3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))   <span class="comment"># |     3.142</span></span><br></pre></td></tr></table></figure><h4 id="6、编码、解码"><a href="#6、编码、解码" class="headerlink" title="6、编码、解码"></a>6、编码、解码</h4><ul><li><p>为什么需要编码转换</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/17.png" style="zoom:67%;" /> </li><li><p>编码解码的方式</p><ul><li>编码：将字符串转换为二进制数据(bytes)</li><li>解码：将bytes类型的数据转换成字符串类型</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;不想学了&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 编码 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding=<span class="string">&#x27;GBK&#x27;</span>))     <span class="comment"># GBK：一个中文占两个字节</span></span><br><span class="line"><span class="comment"># 输出：b&#x27;\xb2\xbb\xcf\xeb\xd1\xa7\xc1\xcb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>))     <span class="comment"># UTF-8：一个中文占三个字节</span></span><br><span class="line"><span class="comment"># 输出：b&#x27;\xe4\xb8\x8d\xe6\x83\xb3\xe5\xad\xa6\xe4\xba\x86&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 解码 格式要一致&quot;&quot;&quot;</span></span><br><span class="line">byte = s.encode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding=<span class="string">&#x27;GBK&#x27;</span>))  <span class="comment"># 不想学了</span></span><br><span class="line">byte = s.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>))  <span class="comment"># 不想学了</span></span><br></pre></td></tr></table></figure><h3 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h3><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">[输入参数]</span>):</span><br><span class="line">    函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 函数创建 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">a, b</span>):<span class="comment"># a, b是形参</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 函数调用 &quot;&quot;&quot;</span></span><br><span class="line">res = calc(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h4 id="2、函数调用的参数传递"><a href="#2、函数调用的参数传递" class="headerlink" title="2、函数调用的参数传递"></a>2、函数调用的参数传递</h4><ul><li>位置实参<br>根据形参对应的位置进行实参传递</li><li>关键字实参<br>根据形参名称进行实参传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">a, b</span>):     <span class="comment"># a, b是形参</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a=&#x27;</span>, a, <span class="string">&#x27;b=&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_put(<span class="number">10</span>, <span class="number">20</span>)        <span class="comment"># a= 10 b= 20</span></span><br><span class="line">_put(b=<span class="number">10</span>, a=<span class="number">20</span>)    <span class="comment"># a= 20 b= 10</span></span><br></pre></td></tr></table></figure><h4 id="3、参数传递的内存分析"><a href="#3、参数传递的内存分析" class="headerlink" title="3、参数传递的内存分析"></a>3、参数传递的内存分析</h4><p>内存分析图：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/18.png" style="zoom: 50%;" /> <h4 id="4、函数的返回值"><a href="#4、函数的返回值" class="headerlink" title="4、函数的返回值"></a>4、函数的返回值</h4><ul><li><p>如果函数没有返回值【函数执行完毕之后，不需要给调用处提供数据】return可以省略不写</p><p>如果没有return，则默认返回none</p></li><li><p>函数的返回值如果是1个，直接返回类型</p></li><li><p>函数的返回值如果是多个(<code>return a, b</code>)，返回的结果为元组</p></li></ul><h4 id="5、函数参数的定义"><a href="#5、函数参数的定义" class="headerlink" title="5、函数参数的定义"></a>5、函数参数的定义</h4><h5 id="（1）默认值参数"><a href="#（1）默认值参数" class="headerlink" title="（1）默认值参数"></a>（1）默认值参数</h5><p>函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参<br>举例： <code>fun(a, b=100)</code></p><h5 id="（2）个数可变的位置参数"><a href="#（2）个数可变的位置参数" class="headerlink" title="（2）个数可变的位置参数"></a>（2）个数可变的位置参数</h5><ul><li>定义函数时，可能无法事先确定传递的位置实参的个数时，使用可变的位置参数</li><li>使用 ***** 定义个数可变的位置形参</li><li>结果为一个<strong>元组</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">*args</span>):     </span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_put(<span class="number">10</span>)        <span class="comment"># (10,)</span></span><br><span class="line">_put(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)    <span class="comment"># (10, 20, 30)</span></span><br></pre></td></tr></table></figure><h5 id="（3）个数可变的关键字形参"><a href="#（3）个数可变的关键字形参" class="headerlink" title="（3）个数可变的关键字形参"></a>（3）个数可变的关键字形参</h5><ul><li>定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参</li><li>使用 ****** 定义个数可变的关键字形参</li><li>结果为一个<strong>字典</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_put(a=<span class="number">10</span>)        <span class="comment"># &#123;&#x27;a&#x27;: 10&#125;</span></span><br><span class="line">_put(a=<span class="number">10</span>, b=<span class="number">20</span>, c=<span class="number">30</span>)    <span class="comment"># &#123;&#x27;a&#x27;: 10, &#x27;b&#x27;: 20, &#x27;c&#x27;: 30&#125;</span></span><br></pre></td></tr></table></figure><p><strong>ps：</strong></p><ul><li>个数可变的位置参数和关键字形参都只能是一个</li><li>可以同时都有，但是个数可变的位置参数必须在写在前面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">*args, *a</span>):<span class="comment"># 报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args, **a</span>):<span class="comment"># 报错 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args, *a</span>):<span class="comment"># 报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">*args, **a</span>):<span class="comment"># 正确</span></span><br></pre></td></tr></table></figure><h5 id="（4）参数使用总结"><a href="#（4）参数使用总结" class="headerlink" title="（4）参数使用总结"></a>（4）参数使用总结</h5><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/19.png" style="zoom:50%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;, b =&#x27;</span>, b, <span class="string">&#x27;, c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 将 列表 每个元素转化为 位置实参 传入&quot;&quot;&quot;</span></span><br><span class="line">lst = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="comment"># _put(lst)   # TypeError</span></span><br><span class="line">_put(*lst)  <span class="comment"># a = 100 , b = 200 , c = 300</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 将 字典 每个元素转化为 关键字实参 传入&quot;&quot;&quot;</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">333</span>&#125;</span><br><span class="line"><span class="comment"># _put(dic)   # TypeError</span></span><br><span class="line">_put(*dic)  <span class="comment"># a = a , b = b , c = c</span></span><br><span class="line">_put(**dic)  <span class="comment"># a = 111 , b = 222 , c = 333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 函数定义时的形参顺序问题 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b, *, c, d</span>):    <span class="comment"># &#x27;*&#x27;后必须使用 关键字实参</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, *, c, d, **args</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">a, b=<span class="number">10</span> ,*args1 ,**args2</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="6、递归函数"><a href="#6、递归函数" class="headerlink" title="6、递归函数"></a>6、递归函数</h4><ul><li><p>递归的调用过程：</p><ul><li><p>每递归调用一次函数，都会在栈内存分配一个栈帧，</p></li><li><p>每执行完一次函数，都会释放相应的空间</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">n</span>):                       </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:                    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>                  </span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="keyword">return</span> n * fac(n - <span class="number">1</span>)     </span><br><span class="line">                                  </span><br><span class="line">                                  </span><br><span class="line"><span class="built_in">print</span>(fac(<span class="number">6</span>))   <span class="comment"># 720 6的阶乘        </span></span><br></pre></td></tr></table></figure><h4 id="7、匿名函数"><a href="#7、匿名函数" class="headerlink" title="7、匿名函数"></a>7、匿名函数</h4><p>使用lambda来创建匿名函数，它是一个可以接收多个任意参数，并返回单个表达式的值的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y, z: x * y * z</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))   <span class="comment"># 60</span></span><br><span class="line">L = <span class="keyword">lambda</span> x: [x**<span class="number">2</span>, x**<span class="number">3</span>, x**<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(L(<span class="number">2</span>))     <span class="comment"># [4, 8, 16]</span></span><br></pre></td></tr></table></figure><hr><h3 id="七、bug、异常处理"><a href="#七、bug、异常处理" class="headerlink" title="七、bug、异常处理"></a>七、bug、异常处理</h3><h4 id="1、bug的类型"><a href="#1、bug的类型" class="headerlink" title="1、bug的类型"></a>1、bug的类型</h4><ul><li><p>粗心导致的语法错误</p><ol><li>漏了<strong>末尾的冒号</strong>，如if语句,循环语句,else子句等</li><li><strong>缩进错误</strong>，该缩进的没缩进,不该缩进的瞎缩进</li><li>把<strong>英文符号</strong>写成中文符号，比如说:引号，冒号，括号</li><li>字符串拼接的时候，把<strong>字符串和数字拼在一起</strong></li><li>没有<strong>定义变量</strong>,比如说while的循环条件的变量</li><li>“<strong>&#x3D;&#x3D;</strong>“比较运算符和”**&#x3D;**”赋值运算符的混用</li></ol></li><li><p>知识点掌握不熟练</p><ul><li>索引越界</li><li>内置函数还是对象方法</li></ul></li><li><p>逻辑错误</p></li><li><p><strong>被动掉坑</strong></p><p>程序代码逻辑没有错，只是因为用户错误操作或者一些“例外情况”而导致的<strong>程序崩溃</strong></p><p><strong>解决</strong>：Python异常处理机制</p></li></ul><h4 id="2、Python异常处理机制"><a href="#2、Python异常处理机制" class="headerlink" title="2、Python异常处理机制"></a>2、Python异常处理机制</h4><p>Python提供了异常处理机制，可以在异常出现时即时捕获，然后内部“消化”,让程序继续运行。</p><h5 id="（1）try-except"><a href="#（1）try-except" class="headerlink" title="（1）try-except"></a>（1）try-except</h5><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/20.png" style="zoom:50%;" /> <h5 id="（2）多个except结构"><a href="#（2）多个except结构" class="headerlink" title="（2）多个except结构"></a>（2）多个except结构</h5><ul><li><p>捕获异常的顺序按照<strong>先子类后父亲类</strong>的顺序,为了避免遗漏可能出现的异常，可以在最后增加</p><p><strong>BaseException</strong></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="（3）try-except-else"><a href="#（3）try-except-else" class="headerlink" title="（3）try-except-else"></a>（3）try-except-else</h5><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了：&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br></pre></td></tr></table></figure><h5 id="（4）try-except-else-finally"><a href="#（4）try-except-else-finally" class="headerlink" title="（4）try-except-else-finally"></a>（4）try-except-else-finally</h5><p>finally块无论是否发生异常都会被执行，能常用来释放try块中申请的资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了：&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;运行结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3、Python中常见的异常"><a href="#3、Python中常见的异常" class="headerlink" title="3、Python中常见的异常"></a>3、Python中常见的异常</h4><table><thead><tr><th>异常类型</th><th>描述</th></tr></thead><tbody><tr><td>ZeroDivisionError</td><td>除(或取模)零(所有数据类型)</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>NameError</td><td>未声明&#x2F;初始化对象(没有属性)</td></tr><tr><td>SyntaxError</td><td>Python语法错误</td></tr><tr><td>ValueError</td><td>传入无效参数</td></tr></tbody></table><h4 id="4、traceback模块"><a href="#4、traceback模块" class="headerlink" title="4、traceback模块"></a>4、traceback模块</h4><p>使用traceback模块打印异常信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    num = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure><h4 id="5、Pycharm程序调试"><a href="#5、Pycharm程序调试" class="headerlink" title="5、Pycharm程序调试"></a>5、Pycharm程序调试</h4><p>断点调试</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/21.png" style="zoom: 67%;" /> <hr><h3 id="八、类和对象"><a href="#八、类和对象" class="headerlink" title="八、类和对象"></a>八、类和对象</h3><h3 id="九、模块、包"><a href="#九、模块、包" class="headerlink" title="九、模块、包"></a>九、模块、包</h3><h4 id="1、什么是模块、模块化编程的好处"><a href="#1、什么是模块、模块化编程的好处" class="headerlink" title="1、什么是模块、模块化编程的好处"></a>1、什么是模块、模块化编程的好处</h4><ul><li>模块英文为<strong>Modules</strong></li><li>函数与模块的关系<ul><li>一个模块中可以包含N多个函数</li></ul></li><li>在Python中一个扩展名为 .py 的文件就是一个模块</li><li>使用模块的好处<ul><li>方便其它程序和脚本的导入并使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性</li><li>提高代码的可重用性</li></ul></li></ul><h4 id="2、导入模块"><a href="#2、导入模块" class="headerlink" title="2、导入模块"></a>2、导入模块</h4><ul><li><p>创建模块</p><ul><li>新建一个 .py 文件,名称尽量不要与Python自带的标准模块名称相同</li></ul></li><li><p>导入模块</p><ul><li><p><code>import 模块名称 [as别名]</code>，只能导入包名和模块名</p></li><li><p><code>from 模块名称 import 函数/变量/类</code>，可以导入包、模块、函数、变量、类</p><p>可以减少查询时间，提高访问速度</p></li><li><p><code>from 模块名称 import *</code> ，可以不用加模块名做前缀，简单但是一般不推荐</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(math))     <span class="comment"># 2584154507360</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(math))   <span class="comment"># &lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(math)     <span class="comment"># &lt;module &#x27;math&#x27; (built-in)&gt;</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)  <span class="comment"># 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="built_in">print</span>(pi)</span><br></pre></td></tr></table></figure><h4 id="3、以主程序方式运行"><a href="#3、以主程序方式运行" class="headerlink" title="3、以主程序方式运行"></a>3、以主程序方式运行</h4><p>在每个模块的定义中都包括一个记录模块名称的变量<code>__name__</code>，程序可以检查该变量,以确定他们在哪个模块中执行。如果一个模块不是被导入到其它程序中执行，那么它可能在解释器的顶级模块中执行。顶级模块的<code>__name__</code>变量的值为<code>__main___</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 只有当点击本程序运行时，才执行运算 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h4 id="4、包"><a href="#4、包" class="headerlink" title="4、包"></a>4、包</h4><ul><li><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</p></li><li><p>作用:</p><ul><li>代码规范</li><li>避免模块名称冲突</li></ul></li><li><p>包与目录的区别</p><ul><li><p>包含<code>_init__.py</code>文件的目录称为包_，告诉python将该目录作为一个包来处理</p></li><li><p>目录里通常不包含<code>_init__.py</code>文件</p></li></ul></li><li><p>包的导入</p><p><code>import 包名.模块名</code></p></li></ul><h4 id="5、Python中常用的内置模块"><a href="#5、Python中常用的内置模块" class="headerlink" title="5、Python中常用的内置模块"></a>5、Python中常用的内置模块</h4><table><thead><tr><th>模块名</th><th>描述</th></tr></thead><tbody><tr><td>sys</td><td>与Python解释器及其环境操作相关的标准库</td></tr><tr><td>time</td><td>提供与时间相关的各种函数的标准库</td></tr><tr><td>os</td><td>提供了访问操作系统服务功能的标准库</td></tr><tr><td>calendar</td><td>提供与日期相关的各种函数的标准库</td></tr><tr><td>urllib</td><td>用于读取来自网上（服务器）的数据标准库</td></tr><tr><td>json</td><td>用于使用JSON序列化和反序列化对象</td></tr><tr><td>re</td><td>用于在字符串中执行正则表达式匹配和替换</td></tr><tr><td>math</td><td>提供标准算术运算函数的标准库</td></tr><tr><td>decimal</td><td>用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算</td></tr><tr><td>logging</td><td>提供了灵活的记录事件、错误、警告和调试信息等目志信息的功能</td></tr></tbody></table><h4 id="6、第三方模块的安装及使用"><a href="#6、第三方模块的安装及使用" class="headerlink" title="6、第三方模块的安装及使用"></a>6、第三方模块的安装及使用</h4><ul><li><p>安装</p><p><code>pip install 模块名</code></p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/22.png" style="zoom: 50%;" /> <p>未报错，安装成功</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/23.png" style="zoom:50%;" /> </li><li><p>使用</p><p><code>import 模块名</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="Pycharm无法解析"><a href="#Pycharm无法解析" class="headerlink" title="Pycharm无法解析"></a><strong>Pycharm无法解析</strong></h5><p>解决：配置Python Interpreter（Python解释器）</p><p>文件 -&gt; 设置 -&gt; 项目xxx -&gt; Python解释器:</p><p>​<img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/24.png" style="zoom:50%;" /> </p><h4 id="7、搜索路径"><a href="#7、搜索路径" class="headerlink" title="7、搜索路径"></a>7、搜索路径</h4><p>Python模块的导入需要路径搜索的过程</p><p>搜索路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>不在同一目录下，需要将包、模块所在的路径添加进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;C:\\Users\\GGW_2021\\Desktop\\笔记\\python&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="十、文件读写"><a href="#十、文件读写" class="headerlink" title="十、文件读写"></a>十、文件读写</h3><h3 id="十一、数据分析numpy、pandas、matplotlib"><a href="#十一、数据分析numpy、pandas、matplotlib" class="headerlink" title="十一、数据分析numpy、pandas、matplotlib"></a>十一、数据分析numpy、pandas、matplotlib</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><ul><li><p>安装<strong>numpy</strong></p><blockquote><p> NumPy 是一个 Python 包。 它代表 “Numeric Python”。 它是一个由<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">多维数组</a>对象和用于处理数组的例程集合组成的库。</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><ul><li><p>安装<strong>pandas</strong></p><blockquote><p> <code>pandas</code> 是对表格数据模型在python上的模拟，它有简单的像<code>SQL</code> 对数据的处理，能够方便的在python上实现。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><ul><li><p>安装<strong>matplotlib</strong></p><blockquote><p>Matplotlib 是一个用于在 Python 中绘制数组的 2D 图形库。虽然它起源于模仿 MATLAB 图形命令，但它独立于 MATLAB，可以以 Pythonic 和面向对象的方式使用。虽然 Matplotlib 主要是在纯 Python 中编写的，但它大量使用 NumPy 和其他扩展代码，即使对于大型数组也能提供良好的性能。</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h4 id="2、numpy"><a href="#2、numpy" class="headerlink" title="2、numpy"></a>2、numpy</h4><h5 id="（1）Ndarray-对象"><a href="#（1）Ndarray-对象" class="headerlink" title="（1）Ndarray 对象"></a>（1）Ndarray 对象</h5><ul><li><p>NumPy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素集合。 可以使用基于零的索引访问集合中的项目。</p></li><li><p><code>ndarray</code>中的每个元素在内存中使用相同大小的块。 <code>ndarray</code>中的每个元素是数据类型对象的对象（称为 <code>dtype</code>）。</p></li><li><p>从<code>ndarray</code>对象提取的任何元素（通过切片）由一个数组标量类型的 Python 对象表示。 下图显示了<code>ndarray</code>，数据类型对象（<code>dtype</code>）和数组标量类型之间的关系。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/ndarray.png"></p></li></ul><p><strong>创建：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>构造器参数：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>object</code></td><td align="left">任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</td></tr><tr><td align="left"><code>dtype</code></td><td align="left">数组的所需数据类型，可选。</td></tr><tr><td align="left"><code>copy</code></td><td align="left">可选，默认为<code>true</code>，对象是否被复制。</td></tr><tr><td align="left"><code>order</code></td><td align="left"><code>C</code>（按行）、<code>F</code>（按列）或<code>A</code>（任意，默认）。</td></tr><tr><td align="left"><code>subok</code></td><td align="left">默认情况下，返回的数组被强制为基类数组。 如果为<code>true</code>，则返回子类。</td></tr><tr><td align="left"><code>ndmin</code></td><td align="left">指定返回数组的最小维数。</td></tr></tbody></table><p>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;几维：&#x27;</span>, array.ndim)<span class="comment"># 维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;行列：&#x27;</span>, array.shape)<span class="comment"># 形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;元素数量：&#x27;</span>, array.size)<span class="comment"># 元素数量</span></span><br></pre></td></tr></table></figure><h5 id="（2）NumPy-数据类型"><a href="#（2）NumPy-数据类型" class="headerlink" title="（2）NumPy - 数据类型"></a>（2）NumPy - 数据类型</h5><table><thead><tr><th align="left">序号</th><th align="left">数据类型</th><th>描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>bool_</code></td><td>存储为一个字节的布尔值（真或假）</td></tr><tr><td align="left">2.</td><td align="left"><code>int_</code></td><td>默认整数，相当于 C 的<code>long</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">3.</td><td align="left"><code>intc</code></td><td>相当于 C 的<code>int</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">4.</td><td align="left"><code>intp</code></td><td>用于索引的整数，相当于 C 的<code>size_t</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td align="left">5.</td><td align="left"><code>int8</code></td><td>字节（-128 ~ 127）</td></tr><tr><td align="left">6.</td><td align="left"><code>int16</code></td><td>16 位整数（-32768 ~ 32767）</td></tr><tr><td align="left">7.</td><td align="left"><code>int32</code></td><td>32 位整数（-2147483648 ~ 2147483647）</td></tr><tr><td align="left">8.</td><td align="left"><code>int64</code></td><td>64 位整数（-9223372036854775808 ~ 9223372036854775807）</td></tr><tr><td align="left">9.</td><td align="left"><code>uint8</code></td><td>8 位无符号整数（0 ~ 255）</td></tr><tr><td align="left">10.</td><td align="left"><code>uint16</code></td><td>16 位无符号整数（0 ~ 65535）</td></tr><tr><td align="left">11.</td><td align="left"><code>uint32</code></td><td>32 位无符号整数（0 ~ 4294967295）</td></tr><tr><td align="left">12.</td><td align="left"><code>uint64</code></td><td>64 位无符号整数（0 ~ 18446744073709551615）</td></tr><tr><td align="left">13.</td><td align="left"><code>float_</code></td><td><code>float64</code>的简写</td></tr><tr><td align="left">14.</td><td align="left"><code>float16</code></td><td>半精度浮点：符号位，5 位指数，10 位尾数</td></tr><tr><td align="left">15.</td><td align="left"><code>float32</code></td><td>单精度浮点：符号位，8 位指数，23 位尾数</td></tr><tr><td align="left">16.</td><td align="left"><code>float64</code></td><td>双精度浮点：符号位，11 位指数，52 位尾数</td></tr><tr><td align="left">17.</td><td align="left"><code>complex_</code></td><td><code>complex128</code>的简写</td></tr><tr><td align="left">18.</td><td align="left"><code>complex64</code></td><td>复数，由两个 32 位浮点表示（实部和虚部）</td></tr><tr><td align="left">19.</td><td align="left"><code>complex128</code></td><td>复数，由两个 64 位浮点表示（实部和虚部）</td></tr></tbody></table><p>NumPy 数字类型是<code>dtype</code>（数据类型）对象的实例，每个对象具有唯一的特征。 这些类型可以是<code>np.bool_</code>，<code>np.float32</code>等。</p><h5 id="（3）数据类型对象-dtype"><a href="#（3）数据类型对象-dtype" class="headerlink" title="（3）数据类型对象 (dtype)"></a>（3）数据类型对象 (<code>dtype</code>)</h5><p>数据类型对象描述了对应于数组的固定内存块的解释，取决于以下方面：</p><ul><li>数据类型（整数、浮点或者 Python 对象）</li><li>数据大小</li><li>字节序（小端或大端）</li><li>在结构化类型的情况下，字段的名称，每个字段的数据类型，和每个字段占用的内存块部分。</li><li>如果数据类型是子序列，它的形状和数据类型。</li></ul><p>字节顺序取决于数据类型的前缀<code>&lt;</code>或<code>&gt;</code>。 <code>&lt;</code>意味着编码是小端（最小有效字节存储在最小地址中）。 <code>&gt;</code>意味着编码是大端（最大有效字节存储在最小地址中）。</p><p><code>dtype</code>可由一下语法构造：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.dtype(object, align, <span class="keyword">copy</span>)</span><br></pre></td></tr></table></figure><p>参数为：</p><ul><li><code>Object</code>：被转换为数据类型的对象。</li><li><code>Align</code>：如果为<code>true</code>，则向字段添加间隔，使其类似 C 的结构体。</li><li><code>Copy</code> ： 生成<code>dtype</code>对象的新副本，如果为<code>flase</code>，结果是内建数据类型对象的引用。</li></ul><p>示例 1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 现在将其应用于 ndarray 对象  </span></span><br><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">    </span><br><span class="line">dt = np.<span class="title function_ invoke__">dtype</span>([(<span class="string">&#x27;age&#x27;</span>,np.int8)]) </span><br><span class="line">a = np.<span class="keyword">array</span>([(<span class="number">10</span>,),(<span class="number">20</span>,),(<span class="number">30</span>,)], dtype = dt)  </span><br><span class="line"><span class="keyword">print</span>(a)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>(<span class="number">10</span><span class="punctuation">,</span>) (<span class="number">20</span><span class="punctuation">,</span>) (<span class="number">30</span><span class="punctuation">,</span>)<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>示例 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名称可用于访问 age 列的内容  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">dt = np.dtype([(<span class="string">&#x27;age&#x27;</span>,np.int8)]) </span><br><span class="line">a = np.array([(<span class="number">10</span>,),(<span class="number">20</span>,),(<span class="number">30</span>,)], dtype = dt)  </span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br></pre></td></tr></table></figure><p>示例 3</p><p>以下示例定义名为 <strong>student</strong> 的结构化数据类型，其中包含字符串字段<code>name</code>，<strong>整数字段</strong><code>age</code>和<strong>浮点字段</strong><code>marks</code>。 此<code>dtype</code>应用于<code>ndarray</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">student = np.dtype([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S20&#x27;</span>),  (<span class="string">&#x27;age&#x27;</span>,  <span class="string">&#x27;i1&#x27;</span>),  (<span class="string">&#x27;marks&#x27;</span>,  <span class="string">&#x27;f4&#x27;</span>)])</span><br><span class="line"><span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S20&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;i1&#x27;</span>), (<span class="string">&#x27;marks&#x27;</span>, <span class="string">&#x27;&lt;f4&#x27;</span>)])</span><br></pre></td></tr></table></figure><p>示例 4</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line">    </span><br><span class="line">student = np.<span class="title function_ invoke__">dtype</span>([(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;S20&#x27;</span>),  (<span class="string">&#x27;age&#x27;</span>,  <span class="string">&#x27;i1&#x27;</span>),  (<span class="string">&#x27;marks&#x27;</span>,  <span class="string">&#x27;f4&#x27;</span>)]) </span><br><span class="line">a = np.<span class="keyword">array</span>([(<span class="string">&#x27;abc&#x27;</span>,  <span class="number">21</span>,  <span class="number">50</span>),(<span class="string">&#x27;xyz&#x27;</span>,  <span class="number">18</span>,  <span class="number">75</span>)], dtype = student) </span><br><span class="line"><span class="keyword">print</span>(a)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>(&#x27;abc&#x27;<span class="punctuation">,</span> <span class="number">21</span><span class="punctuation">,</span> <span class="number">50.0</span>)<span class="punctuation">,</span> (&#x27;xyz&#x27;<span class="punctuation">,</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">75.0</span>)<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h5 id="（4）NumPy-数组属性"><a href="#（4）NumPy-数组属性" class="headerlink" title="（4）NumPy - 数组属性"></a>（4）NumPy - 数组属性</h5><ul><li><code>ndarray.shape</code></li></ul><p>这一数组属性返回一个包含数组维度的元组，它也可以用于调整数组大小。</p><p>示例 1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="keyword">print</span>(a.shape)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>示例 2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这会调整数组大小  </span></span><br><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) a.shape =  (<span class="number">3</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="keyword">print</span>(a) </span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span> </span><br><span class="line"> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span> </span><br><span class="line"> <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li><code>reshape</code></li></ul><p>示例1</p><p>NumPy 也提供了<code>reshape</code>函数来调整数组大小。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">    </span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) </span><br><span class="line">b = a.<span class="title function_ invoke__">reshape</span>(<span class="number">3</span>,<span class="number">2</span>)<span class="comment"># 未改变a</span></span><br><span class="line"><span class="keyword">print</span>(b)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span> </span><br><span class="line"> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span> </span><br><span class="line"> <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>示例 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维数组  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">24</span>) </span><br><span class="line"><span class="comment"># 现在调整其大小</span></span><br><span class="line">b = a.reshape(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span> b </span><br><span class="line"><span class="comment"># b 现在拥有三个维度</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="punctuation">[</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="number">1</span><span class="punctuation">,</span>  <span class="number">2</span><span class="punctuation">]</span> </span><br><span class="line">  <span class="punctuation">[</span> <span class="number">3</span><span class="punctuation">,</span>  <span class="number">4</span><span class="punctuation">,</span>  <span class="number">5</span><span class="punctuation">]</span> </span><br><span class="line">  <span class="punctuation">[</span> <span class="number">6</span><span class="punctuation">,</span>  <span class="number">7</span><span class="punctuation">,</span>  <span class="number">8</span><span class="punctuation">]</span> </span><br><span class="line">  <span class="punctuation">[</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">]</span><span class="punctuation">]</span>  </span><br><span class="line">  <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">12</span><span class="punctuation">,</span> <span class="number">13</span><span class="punctuation">,</span> <span class="number">14</span><span class="punctuation">]</span> </span><br><span class="line">   <span class="punctuation">[</span><span class="number">15</span><span class="punctuation">,</span> <span class="number">16</span><span class="punctuation">,</span> <span class="number">17</span><span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">[</span><span class="number">18</span><span class="punctuation">,</span> <span class="number">19</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">]</span> </span><br><span class="line">   <span class="punctuation">[</span><span class="number">21</span><span class="punctuation">,</span> <span class="number">22</span><span class="punctuation">,</span> <span class="number">23</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span> </span><br></pre></td></tr></table></figure><ul><li><p><code>ndarray.ndim</code></p><p>这一数组属性返回数组的维数。</p></li><li><p><code>numpy.itemsize</code></p><p>这一数组属性返回数组中每个元素的字节单位长度。</p></li></ul><h5 id="（5）创建数组"><a href="#（5）创建数组" class="headerlink" title="（5）创建数组"></a>（5）创建数组</h5><p>新的<code>ndarray</code>对象可以通过任何下列数组创建例程或使用低级<code>ndarray</code>构造函数构造。</p><ul><li><code>numpy.empty</code></li></ul><p>它创建指定形状和<code>dtype</code>的未初始化数组。 它使用以下构造函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>Shape</code> 空数组的形状，整数或整数元组</td></tr><tr><td align="left">2.</td><td align="left"><code>Dtype</code> 所需的输出数组类型，可选</td></tr><tr><td align="left">3.</td><td align="left"><code>Order</code> <code>&#39;C&#39;</code>为按行的 C 风格数组，<code>&#39;F&#39;</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p><strong>示例</strong></p><p>下面的代码展示空数组的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.empty([<span class="number">3</span>,<span class="number">2</span>], dtype=<span class="built_in">int</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[22649312    1701344351] </span></span><br><span class="line"><span class="string"> [1818321759  1885959276] </span></span><br><span class="line"><span class="string"> [16779776    156368896]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：数组元素为随机值，因为它们未初始化。</p><ul><li><code>numpy.zeros </code> &#x2F;  <code>numpy.ones</code></li></ul><p>返回特定大小，以 0 &#x2F; 1 填充的新数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>Shape</code> 空数组的形状，整数或整数元组</td></tr><tr><td align="left">2.</td><td align="left"><code>Dtype</code> 所需的输出数组类型，可选</td></tr><tr><td align="left">3.</td><td align="left"><code>Order</code> <code>&#39;C&#39;</code>为按行的 C 风格数组，<code>&#39;F&#39;</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 含有 5 个 0 的数组，默认类型为 float  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.zeros(<span class="number">5</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [ 0.  0.  0.  0.  0.]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.zeros((<span class="number">5</span>,), dtype = np.<span class="built_in">int</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [0  0  0  0  0]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义类型</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.ones((<span class="number">2</span>,<span class="number">2</span>), dtype =  [(<span class="string">&#x27;x&#x27;</span>,  <span class="string">&#x27;i4&#x27;</span>),  (<span class="string">&#x27;y&#x27;</span>,  <span class="string">&#x27;i4&#x27;</span>)])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[(1, 1) (1, 1)]</span></span><br><span class="line"><span class="string"> [(1, 1) (1, 1)]]  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（6）来自现有数据的数组"><a href="#（6）来自现有数据的数组" class="headerlink" title="（6）来自现有数据的数组"></a>（6）来自现有数据的数组</h5><p>这一章中，我们会讨论如何从现有数据创建数组。</p><ul><li><code>numpy.asarray</code></li></ul><p>此函数类似于<code>numpy.array</code>，除了它有较少的参数。 这个例程对于将 Python 序列转换为<code>ndarray</code>非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>a</code> 任意形式的输入参数，比如列表、列表的元组、元组、元组的元组、元组的列表</td></tr><tr><td align="left">2.</td><td align="left"><code>dtype</code> 通常，输入数据的类型会应用到返回的<code>ndarray</code></td></tr><tr><td align="left">3.</td><td align="left"><code>order</code> <code>&#39;C&#39;</code>为按行的 C 风格数组，<code>&#39;F&#39;</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p>下面的例子展示了如何使用<code>asarray</code>函数：</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将列表转换为 ndarray</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = np.asarray(x)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [1  2  3] </span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置了 dtype  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = np.asarray(x, dtype =  <span class="built_in">float</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [ 1.  2.  3.] </span></span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自元组的 ndarray  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x =  (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line">a = np.asarray(x)  </span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [1  2  3]</span></span><br></pre></td></tr></table></figure><p><strong>示例 4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自元组列表的 ndarray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x =  [(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>)] </span><br><span class="line">a = np.asarray(x)  </span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [(1, 2, 3) (4, 5)]</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.frombuffer</code></li></ul><p>此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回<code>ndarray</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.frombuffer(buffer, dtype = <span class="built_in">float</span>, count = -1, offset = 0)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>buffer</code> 任何暴露缓冲区借口的对象</td></tr><tr><td align="left">2.</td><td align="left"><code>dtype</code> 返回数组的数据类型，默认为<code>float</code></td></tr><tr><td align="left">3.</td><td align="left"><code>count</code> 需要读取的数据数量，默认为<code>-1</code>，读取所有数据</td></tr><tr><td align="left">4.</td><td align="left"><code>offset</code> 需要读取的起始位置，默认为<code>0</code></td></tr></tbody></table><p><strong>示例</strong></p><p>下面的例子展示了<code>frombuffer</code>函数的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">s =  <span class="string">&#x27;Hello World&#x27;</span> </span><br><span class="line">a = np.frombuffer(s, dtype =  <span class="string">&#x27;S1&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;H&#x27;</span>  <span class="string">&#x27;e&#x27;</span>  <span class="string">&#x27;l&#x27;</span>  <span class="string">&#x27;l&#x27;</span>  <span class="string">&#x27;o&#x27;</span>  <span class="string">&#x27; &#x27;</span>  <span class="string">&#x27;W&#x27;</span>  <span class="string">&#x27;o&#x27;</span>  <span class="string">&#x27;r&#x27;</span>  <span class="string">&#x27;l&#x27;</span>  <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li><code>numpy.fromiter</code></li></ul><p>此函数从任何可迭代对象构建一个<code>ndarray</code>对象，返回一个新的一维数组。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.fromiter</span>(iterable, dtype, count = -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>iterable</code> 任何可迭代对象</td></tr><tr><td align="left">2.</td><td align="left"><code>dtype</code> 返回数组的数据类型</td></tr><tr><td align="left">3.</td><td align="left"><code>count</code> 需要读取的数据数量，默认为<code>-1</code>，读取所有数据</td></tr></tbody></table><p>以下示例展示了如何使用内置的<code>range()</code>函数返回列表对象。 此列表的迭代器用于形成<code>ndarray</code>对象。</p><p><strong>示例</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表中获得迭代器  </span></span><br><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span> = <span class="title function_ invoke__">range</span>(<span class="number">5</span>) </span><br><span class="line">it = <span class="title function_ invoke__">iter</span>(<span class="keyword">list</span>)  </span><br><span class="line"><span class="comment"># 使用迭代器创建 ndarray </span></span><br><span class="line">x = np.<span class="title function_ invoke__">fromiter</span>(it, dtype =  <span class="keyword">float</span>)  </span><br><span class="line"><span class="keyword">print</span>(x)<span class="comment"># [0.   1.   2.   3.   4.]</span></span><br></pre></td></tr></table></figure><h5 id="（7）来自数值范围的数组"><a href="#（7）来自数值范围的数组" class="headerlink" title="（7）来自数值范围的数组"></a>（7）来自数值范围的数组</h5><p>这一章中，我们会学到如何从数值范围创建数组。</p><ul><li><code>numpy.arange</code></li></ul><p>这个函数返回<code>ndarray</code>对象，包含给定范围内的等间隔值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.arange</span>(start, stop, step, dtype)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>start</code> 范围的起始值，默认为<code>0</code></td></tr><tr><td align="left">2.</td><td align="left"><code>stop</code> 范围的终止值（不包含）</td></tr><tr><td align="left">3.</td><td align="left"><code>step</code> 两个值的间隔，默认为<code>1</code></td></tr><tr><td align="left">4.</td><td align="left"><code>dtype</code> 返回<code>ndarray</code>的数据类型，如果没有提供，则会使用输入数据的类型。</td></tr></tbody></table><p>下面的例子展示了如何使用该函数：</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [0  1  2  3  4]</span></span><br><span class="line"><span class="comment"># 设置了 dtype</span></span><br><span class="line">x = np.arange(<span class="number">5</span>, dtype =  <span class="built_in">float</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [0.  1.  2.  3.  4.]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置了起始值和终止值参数  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [10  12  14  16  18]</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.linspace</code></li></ul><p>此函数类似于<code>arange()</code>函数。 在此函数中，指定了范围之间的均匀间隔数量，而不是步长。 此函数的用法如下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.linspace</span>(start, stop, num, endpoint, retstep, dtype)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>start</code> 序列的起始值</td></tr><tr><td align="left">2.</td><td align="left"><code>stop</code> 序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于序列中</td></tr><tr><td align="left">3.</td><td align="left"><code>num</code> 要生成的等间隔样例数量，默认为<code>50</code></td></tr><tr><td align="left">4.</td><td align="left"><code>endpoint</code> 序列中是否包含<code>stop</code>值，默认为<code>ture</code></td></tr><tr><td align="left">5.</td><td align="left"><code>retstep</code> 如果为<code>true</code>，返回样例，以及连续数字之间的步长</td></tr><tr><td align="left">6.</td><td align="left"><code>dtype</code> 输出<code>ndarray</code>的数据类型</td></tr></tbody></table><p>下面的例子展示了<code>linspace</code>函数的用法。</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [10.   12.5   15.   17.5  20.]，5个</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 endpoint 设为 false</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">10</span>, <span class="number">20</span>,  <span class="number">5</span>, endpoint =  <span class="literal">False</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [10.   12.   14.   16.   18.]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出 retstep 值  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, retstep=<span class="literal">True</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># (array([ 1.  ,  1.25,  1.5 ,  1.75,  2.  ]), 0.25)</span></span><br><span class="line"><span class="comment"># 这里的 retstep 为 0.25</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.logspace</code></li></ul><p>此函数返回一个<code>ndarray</code>对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.logscale</span>(start, stop, num, endpoint, base, dtype)</span><br></pre></td></tr></table></figure><p><code>logspace</code>函数的输出由以下参数决定：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>start</code> 起始值是<code>base ** start</code>（base：底数）</td></tr><tr><td align="left">2.</td><td align="left"><code>stop</code> 终止值是<code>base ** stop</code></td></tr><tr><td align="left">3.</td><td align="left"><code>num</code> 范围内的数值数量，默认为<code>50</code></td></tr><tr><td align="left">4.</td><td align="left"><code>endpoint</code> 如果为<code>true</code>，终止值包含在输出数组当中</td></tr><tr><td align="left">5.</td><td align="left"><code>base</code> 对数空间的底数，默认为<code>10</code></td></tr><tr><td align="left">6.</td><td align="left"><code>dtype</code> 输出数组的数据类型，如果没有提供，则取决于其它参数</td></tr></tbody></table><p>下面的例子展示了<code>logspace</code>函数的用法。</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 默认底数是 10</span></span><br><span class="line"></span><br><span class="line">a = np.logspace(<span class="number">1.0</span>,  <span class="number">2.0</span>, num=<span class="number">10</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 10.           12.91549665     16.68100537      21.5443469  27.82559402      </span><br><span class="line">  35.93813664   46.41588834     59.94842503      77.42636827    100.    ]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将对数空间的底数设置为 2  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.logspace(<span class="number">1</span>,<span class="number">10</span>,num=<span class="number">10</span>,  base=<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[ 2.     4.     8.    16.    32.    64.   128.   256.    512.   1024.]</span></span><br></pre></td></tr></table></figure><h5 id="（8）NumPy-切片和索引"><a href="#（8）NumPy-切片和索引" class="headerlink" title="（8）NumPy - 切片和索引"></a>（8）NumPy - 切片和索引</h5><p><code>ndarray</code>对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。</p><p>如前所述，<code>ndarray</code>对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： <strong>字段访问，基本切片</strong>和<strong>高级索引</strong>。</p><p>基本切片是 Python 中基本切片概念到 n 维的扩展。 通过将<code>start</code>，<code>stop</code>和<code>step</code>参数提供给内置的<code>slice</code>函数来构造一个 Python <code>slice</code>对象。 此<code>slice</code>对象被传递给数组来提取数组的一部分。</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(a[s])<span class="comment"># [2  4  6]</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>ndarray</code>对象由<code>arange()</code>函数创建。 然后，分别用起始，终止和步长值<code>2</code>，<code>7</code>和<code>2</code>定义切片对象。 当这个切片对象传递给<code>ndarray</code>时，会对它的一部分进行切片，从索引<code>2</code>到<code>7</code>，步长为<code>2</code>。</p><p>通过将由冒号分隔的切片参数（<code>start:stop:step</code>）直接提供给<code>ndarray</code>对象，也可以获得相同的结果。</p><p><strong>示例 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]  </span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># [2  4  6]</span></span><br></pre></td></tr></table></figure><p>如果只输入一个参数，则将返回与索引对应的单个项目。 如果使用<code>a:</code>，则从该索引向后的所有项目将被提取。 如果使用两个参数（以<code>:</code>分隔），则对两个索引（不包括停止索引）之间的元素以默认步骤进行切片。</p><p><strong>示例 3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对单个元素进行切片  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = a[<span class="number">5</span>]  </span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p><strong>示例 4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对始于索引的元素进行切片  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])<span class="comment"># [2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:<span class="number">5</span>])<span class="comment"># [2  3  4]</span></span><br></pre></td></tr></table></figure><p>上面的描述也可用于多维<code>ndarray</code>。</p><p><strong>示例 5</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="comment"># 对始于索引的元素进行切片  </span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;现在我们从索引 a[1:] 开始对数组切片&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[[1 2 3]</span></span><br><span class="line"> <span class="selector-attr">[3 4 5]</span></span><br><span class="line"> <span class="selector-attr">[4 5 6]</span>]</span><br><span class="line">现在我们从索引 <span class="selector-tag">a</span><span class="selector-attr">[1:]</span> 开始对数组切片</span><br><span class="line"><span class="selector-attr">[[3 4 5]</span></span><br><span class="line"> <span class="selector-attr">[4 5 6]</span>]</span><br></pre></td></tr></table></figure><p>切片还可以包括省略号（<code>...</code>），来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的<code>ndarray</code>。</p><p><strong>示例 6</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最开始的数组  </span></span><br><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(a, <span class="string">&#x27;\n&#x27;</span>)  </span><br><span class="line"><span class="comment"># 这会返回第二列元素的数组：  </span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二列的元素是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(a[...,<span class="number">1</span>], <span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="comment"># 现在我们从第二行切片所有元素：  </span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二行的元素是：&#x27;</span> ) </span><br><span class="line"><span class="keyword">print</span>(a[<span class="number">1</span>,...], <span class="string">&#x27;\n&#x27;</span>)  </span><br><span class="line"><span class="comment"># 现在我们从第二列向后切片所有元素：</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二列及其剩余元素是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(a[...,<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line"><span class="selector-attr">[[1 2 3]</span></span><br><span class="line"> <span class="selector-attr">[3 4 5]</span></span><br><span class="line"> <span class="selector-attr">[4 5 6]</span>] </span><br><span class="line"></span><br><span class="line">第二列的元素是：</span><br><span class="line"><span class="selector-attr">[2 4 5]</span> </span><br><span class="line"></span><br><span class="line">第二行的元素是：</span><br><span class="line"><span class="selector-attr">[3 4 5]</span> </span><br><span class="line"></span><br><span class="line">第二列及其剩余元素是：</span><br><span class="line"><span class="selector-attr">[[2 3]</span></span><br><span class="line"> <span class="selector-attr">[4 5]</span></span><br><span class="line"> <span class="selector-attr">[5 6]</span>]</span><br></pre></td></tr></table></figure><h5 id="（9）NumPy-高级索引"><a href="#（9）NumPy-高级索引" class="headerlink" title="（9）NumPy - 高级索引"></a>（9）NumPy - 高级索引</h5><p>如果一个<code>ndarray</code>是非元组序列，数据类型为整数或布尔值的<code>ndarray</code>，或者至少一个元素为序列对象的元组，我们就能够用它来索引<code>ndarray</code>。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。</p><p>有两种类型的高级索引：整数和布尔值。</p><p><strong>整数索引</strong></p><p>这种机制有助于基于 N 维索引来获取数组中任意元素。 每个整数数组表示该维度的下标值。 当索引的元素个数就是目标<code>ndarray</code>的维度时，会变得相当直接。</p><p>以下示例获取了<code>ndarray</code>对象中每一行指定列的一个元素。 因此，行索引包含所有行号，列索引指定要选择的元素。</p><p><strong>示例 1</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">    </span><br><span class="line">x = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]) </span><br><span class="line">y = x[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]<span class="comment"># (0, 0), (1, 1), (2, 0)，(第几行， 第几列)的值 </span></span><br><span class="line"><span class="keyword">print</span>(y)<span class="comment"># [1  4  5]</span></span><br></pre></td></tr></table></figure><p>下面的示例获取了 4X3 数组中的每个角处的元素。 行索引是<code>[0,0]</code>和<code>[3,3]</code>，而列索引是<code>[0,2]</code>和<code>[0,2]</code>。</p><p><strong>示例 2</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.<span class="keyword">array</span>([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(x, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">rows = np.<span class="keyword">array</span>([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">3</span>]]) </span><br><span class="line">cols = np.<span class="keyword">array</span>([[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>]]) </span><br><span class="line">y = x[rows,cols]<span class="comment"># 行索引，列索引</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;这个数组的每个角处的元素是：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(y)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line"><span class="selector-attr">[[ 0  1  2]</span></span><br><span class="line"> <span class="selector-attr">[ 3  4  5]</span></span><br><span class="line"> <span class="selector-attr">[ 6  7  8]</span></span><br><span class="line"> <span class="selector-attr">[ 9 10 11]</span>] </span><br><span class="line"></span><br><span class="line">这个数组的每个角处的元素是：</span><br><span class="line"><span class="selector-attr">[[ 0  2]</span></span><br><span class="line"> <span class="selector-attr">[ 9 11]</span>]</span><br></pre></td></tr></table></figure><p>返回的结果是包含每个角元素的<code>ndarray</code>对象。</p><p>高级和基本索引可以通过使用切片<code>:</code>或省略号<code>...</code>与索引数组组合。 以下示例使用<code>slice</code>作为列索引和高级索引。 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局。</p><p><strong>示例 3</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line">    </span><br><span class="line">x = np.<span class="keyword">array</span>([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(x, <span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">z = x[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">3</span>]<span class="comment"># 行切片，列切片</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;切片之后，我们的数组变为：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(z, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 对列使用高级索引 </span></span><br><span class="line">y = x[<span class="number">1</span>:<span class="number">4</span>,[<span class="number">1</span>,<span class="number">2</span>]]<span class="comment"># 行切片，列索引</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;对列使用高级索引来切片：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(y)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line"><span class="selector-attr">[[ 0  1  2]</span></span><br><span class="line"> <span class="selector-attr">[ 3  4  5]</span></span><br><span class="line"> <span class="selector-attr">[ 6  7  8]</span></span><br><span class="line"> <span class="selector-attr">[ 9 10 11]</span>] </span><br><span class="line"></span><br><span class="line">切片之后，我们的数组变为：</span><br><span class="line"><span class="selector-attr">[[ 4  5]</span></span><br><span class="line"> <span class="selector-attr">[ 7  8]</span></span><br><span class="line"> <span class="selector-attr">[10 11]</span>] </span><br><span class="line"></span><br><span class="line">对列使用高级索引来切片：</span><br><span class="line"><span class="selector-attr">[[ 4  5]</span></span><br><span class="line"> <span class="selector-attr">[ 7  8]</span></span><br><span class="line"> <span class="selector-attr">[10 11]</span>]</span><br></pre></td></tr></table></figure><h5 id="（10）布尔索引"><a href="#（10）布尔索引" class="headerlink" title="（10）布尔索引"></a>（10）布尔索引</h5><p>当结果对象是布尔运算（例如比较运算符）的结果时，将使用此类型的高级索引。</p><p><strong>示例 1</strong></p><p>这个例子中，大于 5 的元素会作为布尔索引的结果返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.<span class="keyword">array</span>([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(x, <span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="comment"># 现在我们会打印出大于 5 的元素  </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;大于 5 的元素是：&#x27;</span>)  </span><br><span class="line"><span class="keyword">print</span>(x[x &gt; <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line"><span class="selector-attr">[[ 0  1  2]</span></span><br><span class="line"> <span class="selector-attr">[ 3  4  5]</span></span><br><span class="line"> <span class="selector-attr">[ 6  7  8]</span></span><br><span class="line"> <span class="selector-attr">[ 9 10 11]</span>] </span><br><span class="line"></span><br><span class="line">大于 <span class="number">5</span> 的元素是：</span><br><span class="line"><span class="selector-attr">[ 6  7  8  9 10 11]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p>这个例子使用了 <code>~</code>（取补运算符）来过滤<code>NaN</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([np.nan, <span class="number">1</span>, <span class="number">2</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  </span><br><span class="line"><span class="keyword">print</span>(a[~np.<span class="title function_ invoke__">isnan</span>(a)])<span class="comment"># [ 1.   2.   3.   4.   5.]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><p>以下示例显示如何从数组中过滤掉非复数元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">1</span>, <span class="number">2</span>+<span class="number">6</span>j, <span class="number">5</span>, <span class="number">3.5</span>+<span class="number">5</span>j])  </span><br><span class="line"><span class="keyword">print</span>(a[np.<span class="title function_ invoke__">iscomplex</span>(a)])<span class="comment"># [2.0+6.j  3.5+5.j] </span></span><br></pre></td></tr></table></figure><h5 id="（11）广播"><a href="#（11）广播" class="headerlink" title="（11）广播"></a>（11）广播</h5><h5 id="（12）NumPy-数组上的迭代"><a href="#（12）NumPy-数组上的迭代" class="headerlink" title="（12）NumPy - 数组上的迭代"></a>（12）NumPy - 数组上的迭代</h5><p>NumPy 包包含一个迭代器对象<code>numpy.nditer</code>。 它是一个有效的多维迭代器对象，可以用于在数组上进行迭代。 数组的每个元素可使用 Python 的标准<code>Iterator</code>接口来访问。</p><p>让我们使用<code>arange()</code>函数创建一个 3X4 数组，并使用<code>nditer</code>对它进行迭代。</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]] </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组是：</span></span><br><span class="line"><span class="string">0 5 10 15 20 25 30 35 40 45 50 55 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p>迭代的顺序匹配数组的内容布局，而不考虑特定的排序。 这可以通过迭代上述数组的转置来看到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组的转置是：&#x27;</span>)</span><br><span class="line">b = a.T</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(b):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原始数组的转置是：</span></span><br><span class="line"><span class="string">[[ 0 20 40]</span></span><br><span class="line"><span class="string"> [ 5 25 45]</span></span><br><span class="line"><span class="string"> [10 30 50]</span></span><br><span class="line"><span class="string"> [15 35 55]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组是：</span></span><br><span class="line"><span class="string">0 5 10 15 20 25 30 35 40 45 50 55 </span></span><br><span class="line"><span class="string">进程已结束,退出代码0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h6 id="迭代顺序"><a href="#迭代顺序" class="headerlink" title="迭代顺序"></a>迭代顺序</h6><p>如果相同元素使用 F 风格顺序存储，则迭代器选择以更有效的方式对数组进行迭代。</p><p><strong>示例 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>) </span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组的转置是：&#x27;</span>) </span><br><span class="line">b = a.T </span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 C 风格顺序排序：&#x27;</span>) </span><br><span class="line">c = b.copy(order=<span class="string">&#x27;C&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(c):  </span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>),    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序排序：&#x27;</span>) </span><br><span class="line">c = b.copy(order=<span class="string">&#x27;F&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(c) </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(c):  </span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string">原始数组的转置是：</span></span><br><span class="line"><span class="string">[[ 0 20 40]</span></span><br><span class="line"><span class="string"> [ 5 25 45]</span></span><br><span class="line"><span class="string"> [10 30 50]</span></span><br><span class="line"><span class="string"> [15 35 55]]</span></span><br><span class="line"><span class="string">以 C 风格顺序排序：</span></span><br><span class="line"><span class="string">[[ 0 20 40]</span></span><br><span class="line"><span class="string"> [ 5 25 45]</span></span><br><span class="line"><span class="string"> [10 30 50]</span></span><br><span class="line"><span class="string"> [15 35 55]]</span></span><br><span class="line"><span class="string">0 20 40 5 25 45 10 30 50 15 35 55 </span></span><br><span class="line"><span class="string"> 以 F 风格顺序排序：</span></span><br><span class="line"><span class="string">[[ 0 20 40]</span></span><br><span class="line"><span class="string"> [ 5 25 45]</span></span><br><span class="line"><span class="string"> [10 30 50]</span></span><br><span class="line"><span class="string"> [15 35 55]]</span></span><br><span class="line"><span class="string">0 5 10 15 20 25 30 35 40 45 50 55 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p>可以通过显式提醒，来强制<code>nditer</code>对象使用某种顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 C 风格顺序排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序排序：&#x27;</span> )</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以 C 风格顺序排序：</span></span><br><span class="line"><span class="string">0 5 10 15 20 25 30 35 40 45 50 55 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以 F 风格顺序排序：</span></span><br><span class="line"><span class="string">0 20 40 5 25 45 10 30 50 15 35 55 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（13）修改数组的值"><a href="#（13）修改数组的值" class="headerlink" title="（13）修改数组的值"></a>（13）修改数组的值</h5><p><code>nditer</code>对象有另一个可选参数<code>op_flags</code>。 其默认值为只读，但可以设置为读写或只写模式。 这将允许使用此迭代器修改数组元素。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, op_flags=[<span class="string">&#x27;readwrite&#x27;</span>]):</span><br><span class="line">    x[...] = <span class="number">2</span>*x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组是：</span></span><br><span class="line"><span class="string">[[  0  10  20  30]</span></span><br><span class="line"><span class="string"> [ 40  50  60  70]</span></span><br><span class="line"><span class="string"> [ 80  90 100 110]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（14）外部循环"><a href="#（14）外部循环" class="headerlink" title="（14）外部循环"></a>（14）外部循环</h5><p><code>nditer</code>类的构造器拥有<code>flags</code>参数，它可以接受下列值：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>c_index</code> 可以跟踪 C 顺序的索引</td></tr><tr><td align="left">2.</td><td align="left"><code>f_index</code> 可以跟踪 Fortran 顺序的索引</td></tr><tr><td align="left">3.</td><td align="left"><code>multi-index</code> 每次迭代可以跟踪一种索引类型</td></tr><tr><td align="left">4.</td><td align="left"><code>external_loop</code> 给出的值是具有多个值的一维数组，而不是零维数组</td></tr></tbody></table><p><strong>示例</strong></p><p>在下面的示例中，迭代器遍历对应于每列的一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, flags=[<span class="string">&#x27;external_loop&#x27;</span>], order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string">修改后的数组是：</span></span><br><span class="line"><span class="string">[ 0 20 40] [ 5 25 45] [10 30 50] [15 35 55] </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（15）NumPy-数组操作"><a href="#（15）NumPy-数组操作" class="headerlink" title="（15）NumPy - 数组操作"></a>（15）NumPy - 数组操作</h5><p>NumPy包中有几个例程用于处理<code>ndarray</code>对象中的元素。 它们可以分为以下类型：</p><h6 id="（15-1）修改形状"><a href="#（15-1）修改形状" class="headerlink" title="（15.1）修改形状"></a>（15.1）修改形状</h6><table><thead><tr><th align="left">序号</th><th align="left">形状及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>reshape</code> 不改变数据的条件下修改形状</td></tr><tr><td align="left">2.</td><td align="left"><code>flat</code> 数组上的一维迭代器</td></tr><tr><td align="left">3.</td><td align="left"><code>flatten</code> 返回折叠为一维的数组副本</td></tr><tr><td align="left">4.</td><td align="left"><code>ravel</code> 返回连续的展开数组</td></tr></tbody></table><ul><li><code>numpy.reshape</code></li></ul><p>这个函数在不改变数据的条件下修改形状，它接受如下参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.reshape(arr, newshape, order)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：要修改形状的数组</li><li><code>newshape</code>：整数或者整数数组，新的形状应当兼容原有形状</li><li><code>order</code>：<code>&#39;C&#39;</code>为 C 风格顺序，<code>&#39;F&#39;</code>为 F 风格顺序，<code>&#39;A&#39;</code>为保留原顺序。</li></ul><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = a.reshape(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 3]</span></span><br><span class="line"><span class="string"> [4 5]</span></span><br><span class="line"><span class="string"> [6 7]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.flat</code></li></ul><p>该函数返回数组上的一维迭代器，行为类似 Python 内建的迭代器。</p><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 flat 函数之后：&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回展开数组中的下标的对应元素</span></span><br><span class="line"><span class="built_in">print</span>(a.flat[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原始数组：</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">调用 flat 函数之后：</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.flatten</code></li></ul><p>该函数返回折叠为一维的数组副本，函数接受下列参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndarray<span class="selector-class">.flatten</span>(<span class="attribute">order</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>order</code>：<code>&#39;C&#39;</code> – 按行，<code>&#39;F&#39;</code> – 按列，<code>&#39;A&#39;</code> – 原顺序，<code>&#39;k&#39;</code> – 元素在内存中的出现顺序。</li></ul><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># default is column-major</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;展开的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.flatten())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序展开的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.flatten(order=<span class="string">&#x27;F&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">展开的数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="string">以 F 风格顺序展开的数组：</span></span><br><span class="line"><span class="string">[0 4 1 5 2 6 3 7]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ravel</code></li></ul><p>这个函数返回展开的一维数组，并且按需生成副本。返回的数组和输入数组拥有相同数据类型。这个函数接受两个参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.ravel</span>(<span class="selector-tag">a</span>, <span class="attribute">order</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><ul><li><code>order</code>：<code>&#39;C&#39;</code> – 按行，<code>&#39;F&#39;</code> – 按列，<code>&#39;A&#39;</code> – 原顺序，<code>&#39;k&#39;</code> – 元素在内存中的出现顺序。</li></ul><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 ravel 函数之后：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.ravel())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序调用 ravel 函数之后：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.ravel(order=<span class="string">&#x27;F&#x27;</span>))</span><br></pre></td></tr></table></figure><h6 id="（15-2）翻转操作"><a href="#（15-2）翻转操作" class="headerlink" title="（15.2）翻转操作"></a>（15.2）翻转操作</h6><table><thead><tr><th align="left">序号</th><th align="left">操作及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>transpose</code> 翻转数组的维度</td></tr><tr><td align="left">2.</td><td align="left"><code>ndarray.T</code> 和<code>self.transpose()</code>相同</td></tr><tr><td align="left">3.</td><td align="left"><code>rollaxis</code> 向后滚动指定的轴</td></tr><tr><td align="left">4.</td><td align="left"><code>swapaxes</code> 互换数组的两个轴</td></tr></tbody></table><ul><li><code>numpy.transpose</code></li></ul><p>这个函数翻转给定数组的维度。如果可能的话它会返回一个视图。函数接受下列参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.transpose</span>(arr, axes)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：要转置的数组</p><p><code>axes</code>：整数的列表，对应维度，通常所有维度都会翻转。</p><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转置数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(a)) </span><br><span class="line"><span class="built_in">print</span>(a.T)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">转置数组：</span></span><br><span class="line"><span class="string">[[ 0  4  8]</span></span><br><span class="line"><span class="string"> [ 1  5  9]</span></span><br><span class="line"><span class="string"> [ 2  6 10]</span></span><br><span class="line"><span class="string"> [ 3  7 11]]</span></span><br><span class="line"><span class="string">[[ 0  4  8]</span></span><br><span class="line"><span class="string"> [ 1  5  9]</span></span><br><span class="line"><span class="string"> [ 2  6 10]</span></span><br><span class="line"><span class="string"> [ 3  7 11]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.T</code></li></ul><p>该函数属于<code>ndarray</code>类，行为类似于<code>numpy.transpose</code>。</p><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同上</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.rollaxis</code></li></ul><p>该函数向后滚动特定的轴，直到一个特定位置。这个函数接受三个参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.rollaxis</span>(arr, axis, start)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：要向后滚动的轴，其它轴的相对位置不会改变</li><li><code>start</code>：默认为零，表示完整的滚动。会滚动到特定位置。</li></ul><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建了三维的 ndarray</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 将轴 2 滚动到轴 0（宽度到深度）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 rollaxis 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.rollaxis(a, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 将轴 0 滚动到轴 1：（宽度到高度）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 rollaxis 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.rollaxis(a, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[[0 1]</span></span><br><span class="line"><span class="string">  [2 3]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[4 5]</span></span><br><span class="line"><span class="string">  [6 7]]]</span></span><br><span class="line"><span class="string">调用 rollaxis 函数：</span></span><br><span class="line"><span class="string">[[[0 2]</span></span><br><span class="line"><span class="string">  [4 6]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[1 3]</span></span><br><span class="line"><span class="string">  [5 7]]]</span></span><br><span class="line"><span class="string">调用 rollaxis 函数：</span></span><br><span class="line"><span class="string">[[[0 2]</span></span><br><span class="line"><span class="string">  [1 3]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[4 6]</span></span><br><span class="line"><span class="string">  [5 7]]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.swapaxes</code></li></ul><p>该函数交换数组的两个轴。对于 1.10 之前的 NumPy 版本，会返回交换后数组的试图。这个函数接受下列参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.swapaxes</span>(arr, axis1, axis2)</span><br></pre></td></tr></table></figure><ul><li><code>arr</code>：要交换其轴的输入数组</li><li><code>axis1</code>：对应第一个轴的整数</li><li><code>axis2</code>：对应第二个轴的整数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 现在交换轴 0（深度方向）到轴 2（宽度方向）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 swapaxes 函数后的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.swapaxes(a, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[[0 1]</span></span><br><span class="line"><span class="string">  [2 3]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[4 5]</span></span><br><span class="line"><span class="string">  [6 7]]]</span></span><br><span class="line"><span class="string">调用 swapaxes 函数后的数组：</span></span><br><span class="line"><span class="string">[[[0 4]</span></span><br><span class="line"><span class="string">  [2 6]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[1 5]</span></span><br><span class="line"><span class="string">  [3 7]]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（16）修改维度"><a href="#（16）修改维度" class="headerlink" title="（16）修改维度"></a>（16）修改维度</h5><table><thead><tr><th align="left">序号</th><th align="left">维度和描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>broadcast</code> 产生模仿广播的对象</td></tr><tr><td align="left">2.</td><td align="left"><code>broadcast_to</code> 将数组广播到新形状</td></tr><tr><td align="left">3.</td><td align="left"><code>expand_dims</code> 扩展数组的形状</td></tr><tr><td align="left">4.</td><td align="left"><code>squeeze</code> 从数组的形状中删除单维条目</td></tr></tbody></table><ul><li><code>broadcast</code></li></ul><p>如前所述，NumPy 已经内置了对广播的支持。 此功能模仿广播机制。 它返回一个对象，该对象封装了将一个数组广播到另一个数组的结果。</p><p>该函数使用两个数组作为输入参数。 下面的例子说明了它的用法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有 bug </span></span><br><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.<span class="keyword">array</span>([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">y = np.<span class="keyword">array</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># 对 y 广播 x</span></span><br><span class="line">b = np.<span class="title function_ invoke__">broadcast</span>(x, y)</span><br><span class="line"><span class="comment"># 它拥有 iterator 属性，基于自身组件的迭代器元组 </span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;对 y 广播 x：&#x27;</span>)</span><br><span class="line">r, c = b.iters</span><br><span class="line"><span class="keyword">print</span>(r.<span class="title function_ invoke__">next</span>(), c.<span class="title function_ invoke__">next</span>())</span><br><span class="line"><span class="keyword">print</span>(r.<span class="title function_ invoke__">next</span>(), c.<span class="title function_ invoke__">next</span>())</span><br><span class="line"><span class="comment"># shape 属性返回广播对象的形状</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;广播对象的形状：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b.shape)</span><br><span class="line"><span class="comment"># 手动使用 broadcast 将 x 与 y 相加</span></span><br><span class="line">b = np.<span class="title function_ invoke__">broadcast</span>(x, y)</span><br><span class="line">c = np.<span class="keyword">empty</span>(b.shape)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;手动使用 broadcast 将 x 与 y 相加：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(c.shape)</span><br><span class="line">c.flat = [u + v <span class="keyword">for</span> (u, v) in b]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 flat 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(c)</span><br><span class="line"><span class="comment"># 获得了和 NumPy 内建的广播支持相同的结果</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;x 与 y 的和：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(x + y)</span><br></pre></td></tr></table></figure><ul><li><code>numpy.broadcast_to</code></li></ul><p>此函数将数组广播到新形状。 它在原始数组上返回只读视图。 它通常不连续。 如果新形状不符合 NumPy 的广播规则，该函数可能会抛出<code>ValueError</code>。</p><p>注意 - 此功能可用于 1.10.0 及以后的版本。</p><p>该函数接受以下参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.<span class="built_in">broadcast_to</span>(array, shape, subok)</span><br></pre></td></tr></table></figure><ul><li><code>numpy.expand_dims</code></li></ul><p>函数通过在指定位置插入新的轴来扩展数组形状。该函数需要两个参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.expand_dims</span>(arr, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>axis</code>：新轴插入的位置</p><ul><li><code>numpy.squeeze</code></li></ul><p>函数从给定数组的形状中删除一维条目。 此函数需要两个参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.squeeze</span>(arr, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>axis</code>：整数或整数元组，用于选择形状中单一维度条目的子集</p><h5 id="（17）数组的连接"><a href="#（17）数组的连接" class="headerlink" title="（17）数组的连接"></a>（17）数组的连接</h5><table><thead><tr><th align="left">序号</th><th align="left">数组及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>concatenate</code> 沿着现存的轴连接数据序列</td></tr><tr><td align="left">2.</td><td align="left"><code>stack</code> 沿着新轴连接数组序列</td></tr><tr><td align="left">3.</td><td align="left"><code>hstack</code> 水平堆叠序列中的数组（列方向）</td></tr><tr><td align="left">4.</td><td align="left"><code>vstack</code> 竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><ul><li><code>numpy.concatenate</code></li></ul><p>数组的连接是指连接。 此函数用于沿指定轴连接相同形状的两个或多个数组。 该函数接受以下参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.concatenate</span>((a1, a2, ...), axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>a1, a2, ...</code>：<strong>相同类型</strong>的数组序列</p><p><code>axis</code>：沿着它连接数组的轴，默认为 0</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="comment"># 两个数组的维度相同</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 0 连接两个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">concatenate</span>((a, b)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 1 连接两个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">concatenate</span>((a, b), axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]]</span></span><br><span class="line"><span class="string">沿轴 0 连接两个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]</span></span><br><span class="line"><span class="string"> [7 8]]</span></span><br><span class="line"><span class="string">沿轴 1 连接两个数组：</span></span><br><span class="line"><span class="string">[[1 2 5 6]</span></span><br><span class="line"><span class="string"> [3 4 7 8]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.stack</code></li></ul><p>此函数沿新轴连接数组序列。 此功能添加自 NumPy 版本 1.10.0。 需要提供以下参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.<span class="built_in">stack</span>(arrays, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arrays</code>：<strong>相同形状</strong>的数组序列</p><p><code>axis</code>：返回数组中的轴，输入数组沿着它来堆叠</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 0 堆叠两个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">stack</span>((a, b), <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 1 堆叠两个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">stack</span>((a, b), <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">沿轴 0 堆叠两个数组：</span></span><br><span class="line"><span class="string">[[[1 2]</span></span><br><span class="line"><span class="string">  [3 4]</span></span><br><span class="line"><span class="string">  [5 6]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[5 6]</span></span><br><span class="line"><span class="string">  [7 8]</span></span><br><span class="line"><span class="string">  [0 0]]]</span></span><br><span class="line"><span class="string">沿轴 1 堆叠两个数组：</span></span><br><span class="line"><span class="string">[[[1 2]</span></span><br><span class="line"><span class="string">  [5 6]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[3 4]</span></span><br><span class="line"><span class="string">  [7 8]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[5 6]</span></span><br><span class="line"><span class="string">  [0 0]]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.hstack</code></li></ul><p><code>numpy.stack</code>函数的变体，通过堆叠来生成水平的单个数组。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;水平堆叠：&#x27;</span>)</span><br><span class="line">c = np.<span class="title function_ invoke__">hstack</span>((a, b))</span><br><span class="line"><span class="keyword">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">水平堆叠：</span></span><br><span class="line"><span class="string">[[1 2 5 6]</span></span><br><span class="line"><span class="string"> [3 4 7 8]</span></span><br><span class="line"><span class="string"> [5 6 0 0]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.vstack</code></li></ul><p><code>numpy.stack</code>函数的变体，通过堆叠来生成竖直的单个数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;竖直堆叠：&#x27;</span>)</span><br><span class="line">c = np.<span class="title function_ invoke__">vstack</span>((a, b))</span><br><span class="line"><span class="keyword">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">竖直堆叠：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]</span></span><br><span class="line"><span class="string"> [5 6]</span></span><br><span class="line"><span class="string"> [7 8]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（18）数组分割"><a href="#（18）数组分割" class="headerlink" title="（18）数组分割"></a>（18）数组分割</h5><table><thead><tr><th align="left">序号</th><th align="left">数组及操作</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>split</code> 将一个数组分割为多个子数组</td></tr><tr><td align="left">2.</td><td align="left"><code>hsplit</code> 将一个数组水平分割为多个子数组（按列）</td></tr><tr><td align="left">3.</td><td align="left"><code>vsplit</code> 将一个数组竖直分割为多个子数组（按行）</td></tr></tbody></table><ul><li><code>numpy.split</code></li></ul><p>该函数沿特定的轴将数组分割为子数组。函数接受三个参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.split</span>(ary, indices_or_sections, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>ary</code>：被分割的输入数组</p><p><code>indices_or_sections</code>：可以是整数，表明要从输入数组创建的，等大小的子数组的数量。 如果此参数是一维数组，则其元素表明要创建新子数组的点。</p><p><code>axis</code>：默认为 0</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;将数组分为三个大小相等的子数组：&#x27;</span>)</span><br><span class="line">b = np.split(a, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;将数组在一维数组中表明的位置分割：&#x27;</span>)</span><br><span class="line">b = np.split(a, [<span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7 8]</span></span><br><span class="line"><span class="string">将数组分为三个大小相等的子数组：</span></span><br><span class="line"><span class="string">[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</span></span><br><span class="line"><span class="string">将数组在一维数组中表明的位置分割：</span></span><br><span class="line"><span class="string">[array([0, 1, 2, 3, 4]), array([5, 6]), array([7, 8])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.hsplit</code></li></ul><p><code>numpy.hsplit</code>是<code>split()</code>函数的特例，其中轴为 1 表示水平分割，无论输入数组的维度是什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;水平分割：&#x27;</span>)</span><br><span class="line">b = np.hsplit(a, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]</span></span><br><span class="line"><span class="string"> [12 13 14 15]]</span></span><br><span class="line"><span class="string">水平分割：</span></span><br><span class="line"><span class="string">[array([[ 0,  1],</span></span><br><span class="line"><span class="string">       [ 4,  5],</span></span><br><span class="line"><span class="string">       [ 8,  9],</span></span><br><span class="line"><span class="string">       [12, 13]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">       [ 6,  7],</span></span><br><span class="line"><span class="string">       [10, 11],</span></span><br><span class="line"><span class="string">       [14, 15]])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.vsplit</code></li></ul><p><code>numpy.vsplit</code>是<code>split()</code>函数的特例，其中轴为 0 表示竖直分割，无论输入数组的维度是什么。下面的例子使之更清楚。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;竖直分割：&#x27;</span>)</span><br><span class="line">b = np.vsplit(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]</span></span><br><span class="line"><span class="string"> [12 13 14 15]]</span></span><br><span class="line"><span class="string">竖直分割：</span></span><br><span class="line"><span class="string">[array([[0, 1, 2, 3],</span></span><br><span class="line"><span class="string">       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span></span><br><span class="line"><span class="string">       [12, 13, 14, 15]])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（19）添加-x2F-删除元素"><a href="#（19）添加-x2F-删除元素" class="headerlink" title="（19）添加&#x2F;删除元素"></a>（19）添加&#x2F;删除元素</h5><table><thead><tr><th align="left">序号</th><th align="left">元素及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>resize</code> 返回指定形状的新数组</td></tr><tr><td align="left">2.</td><td align="left"><code>append</code> 将值添加到数组末尾</td></tr><tr><td align="left">3.</td><td align="left"><code>insert</code> 沿指定轴将值插入到指定下标之前</td></tr><tr><td align="left">4.</td><td align="left"><code>delete</code> 返回删掉某个轴的子数组的新数组</td></tr><tr><td align="left">5.</td><td align="left"><code>unique</code> 寻找数组内的唯一元素</td></tr></tbody></table><ul><li><code>numpy.resize</code></li></ul><p>此函数返回指定大小的新数组。 如果新大小大于原始大小，则包含原始数组中的元素的<strong>重复副本</strong>。 该函数接受以下参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.resize</span>(arr, shape)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：要修改大小的输入数组</p><p><code>shape</code>：返回数组的新形状</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组的形状：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a.shape)</span><br><span class="line">b = np.<span class="title function_ invoke__">resize</span>(a, (<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组的形状：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b.shape)</span><br><span class="line"><span class="comment"># 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;修改第二个数组的大小：&#x27;</span>)</span><br><span class="line">b = np.<span class="title function_ invoke__">resize</span>(a, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">第一个数组的形状：</span></span><br><span class="line"><span class="string">(2, 3)</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">第二个数组的形状：</span></span><br><span class="line"><span class="string">(3, 2)</span></span><br><span class="line"><span class="string">修改第二个数组的大小：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [1 2 3]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.append</code></li></ul><p>此函数在输入数组的末尾添加值。 附加操作不是原地的，而是分配新的数组。 此外，输入数组的维度必须匹配否则将生成<code>ValueError</code>。</p><p>函数接受下列函数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.append</span>(arr, values, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>values</code>：要向<code>arr</code>添加的值，比如和<code>arr</code>形状相同（除了要添加的轴）</p><p><code>axis</code>：沿着它完成操作的轴。如果没有提供，两个参数都会被展开。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;向数组添加元素：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">append</span>(a, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 0 添加元素：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">append</span>(a, [[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], axis=<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 1 添加元素：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">append</span>(a, [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">向数组添加元素：</span></span><br><span class="line"><span class="string">[1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="string">沿轴 0 添加元素：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">沿轴 1 添加元素：</span></span><br><span class="line"><span class="string">[[1 2 3 5 5 5]</span></span><br><span class="line"><span class="string"> [4 5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.insert</code></li></ul><p>此函数在给定索引之前，沿给定轴在输入数组中插入值。 如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 此外，如果未提供轴，则输入数组会被展开。</p><p><code>insert()</code>函数接受以下参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.insert</span>(arr, obj, values, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>obj</code>：在其之前插入值的索引</p><p><code>values</code>：要插入的值</p><p><code>axis</code>：沿着它插入的轴，如果未提供，则输入数组会被展开</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;未传递 Axis 参数。 在插入之前输入数组会被展开。&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">insert</span>(a, <span class="number">3</span>, [<span class="number">11</span>, <span class="number">12</span>]))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;传递了 Axis 参数。 会广播值数组来配输入数组。&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 0 广播：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">insert</span>(a, <span class="number">1</span>, [<span class="number">11</span>], axis=<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;沿轴 1 广播：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">insert</span>(a, <span class="number">1</span>, <span class="number">11</span>, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">未传递 Axis 参数。 在插入之前输入数组会被展开。</span></span><br><span class="line"><span class="string">[ 1  2  3 11 12  4  5  6]</span></span><br><span class="line"><span class="string">传递了 Axis 参数。 会广播值数组来配输入数组。</span></span><br><span class="line"><span class="string">沿轴 0 广播：</span></span><br><span class="line"><span class="string">[[ 1  2]</span></span><br><span class="line"><span class="string"> [11 11]</span></span><br><span class="line"><span class="string"> [ 3  4]</span></span><br><span class="line"><span class="string"> [ 5  6]]</span></span><br><span class="line"><span class="string">沿轴 1 广播：</span></span><br><span class="line"><span class="string">[[ 1 11  2]</span></span><br><span class="line"><span class="string"> [ 3 11  4]</span></span><br><span class="line"><span class="string"> [ 5 11  6]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.delete</code></li></ul><p>此函数返回从输入数组中删除指定子数组的新数组。 与<code>insert()</code>函数的情况一样，如果未提供轴参数，则输入数组将展开。 该函数接受以下参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Numpy.<span class="built_in">delete</span>(arr, obj, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>obj</code>：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</p><p><code>axis</code>：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="title function_ invoke__">arange</span>(<span class="number">12</span>).<span class="title function_ invoke__">reshape</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;未传递 Axis 参数。 在插入之前输入数组会被展开。&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">delete</span>(a, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;删除第二列：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">delete</span>(a, <span class="number">1</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;包含从数组中删除的替代值的切片：&#x27;</span>)</span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">delete</span>(a, np.s_[::<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">未传递 Axis 参数。 在插入之前输入数组会被展开。</span></span><br><span class="line"><span class="string">[ 0  1  2  3  4  6  7  8  9 10 11]</span></span><br><span class="line"><span class="string">删除第二列：</span></span><br><span class="line"><span class="string">[[ 0  2  3]</span></span><br><span class="line"><span class="string"> [ 4  6  7]</span></span><br><span class="line"><span class="string"> [ 8 10 11]]</span></span><br><span class="line"><span class="string">包含从数组中删除的替代值的切片：</span></span><br><span class="line"><span class="string">[ 2  4  6  8 10]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.unique</code></li></ul><p>此函数返回输入数组中的去重元素数组。 该函数能够返回一个<strong>元组</strong>，包含去重数组和相关索引的数组。 索引的性质取决于函数调用中返回参数的类型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.unique</span>(arr, return_index, return_inverse, return_counts)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：输入数组，如果不是一维数组则会展开</li><li><code>return_index</code>：如果为<code>true</code>，返回输入数组中的元素下标</li><li><code>return_inverse</code>：如果为<code>true</code>，返回去重数组的下标，它可以用于重构输入数组</li><li><code>return_counts</code>：如果为<code>true</code>，返回去重数组中的元素在原数组中的出现次数</li></ul><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组的去重值：&#x27;</span>)</span><br><span class="line">u = np.<span class="title function_ invoke__">unique</span>(a)</span><br><span class="line"><span class="keyword">print</span>(u)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;去重数组的索引数组：&#x27;</span>)</span><br><span class="line">u, indices = np.<span class="title function_ invoke__">unique</span>(a, return_index=True)</span><br><span class="line"><span class="keyword">print</span>(indices)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们可以看到每个和原数组下标对应的数值：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;去重数组的下标：&#x27;</span>)</span><br><span class="line">u, indices = np.<span class="title function_ invoke__">unique</span>(a, return_inverse=True)</span><br><span class="line"><span class="keyword">print</span>(u)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;下标为：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(indices)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;使用下标重构原数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(u[indices])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;返回去重元素的重复数量：&#x27;</span>)</span><br><span class="line">u, indices = np.<span class="title function_ invoke__">unique</span>(a, return_counts=True)</span><br><span class="line"><span class="keyword">print</span>(u)</span><br><span class="line"><span class="keyword">print</span>(indices)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[5 2 6 2 7 5 6 8 2 9]</span></span><br><span class="line"><span class="string">第一个数组的去重值：</span></span><br><span class="line"><span class="string">[2 5 6 7 8 9]</span></span><br><span class="line"><span class="string">去重数组的索引数组：</span></span><br><span class="line"><span class="string">[1 0 2 4 7 9]</span></span><br><span class="line"><span class="string">我们可以看到每个和原数组下标对应的数值：</span></span><br><span class="line"><span class="string">[5 2 6 2 7 5 6 8 2 9]</span></span><br><span class="line"><span class="string">去重数组的下标：</span></span><br><span class="line"><span class="string">[2 5 6 7 8 9]</span></span><br><span class="line"><span class="string">下标为：</span></span><br><span class="line"><span class="string">[1 0 2 0 3 1 2 4 0 5]</span></span><br><span class="line"><span class="string">使用下标重构原数组：</span></span><br><span class="line"><span class="string">[5 2 6 2 7 5 6 8 2 9]</span></span><br><span class="line"><span class="string">返回去重元素的重复数量：</span></span><br><span class="line"><span class="string">[2 5 6 7 8 9]</span></span><br><span class="line"><span class="string">[3 2 2 1 1 1]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（20）NumPy-算数函数"><a href="#（20）NumPy-算数函数" class="headerlink" title="（20）NumPy - 算数函数"></a>（20）NumPy - 算数函数</h5><p>很容易理解的是，NumPy 包含大量的各种数学运算功能。 NumPy 提供标准的三角函数，算术运算的函数，复数处理函数等。</p><h6 id="（20-1）三角函数"><a href="#（20-1）三角函数" class="headerlink" title="（20.1）三角函数"></a>（20.1）三角函数</h6><p>NumPy 拥有标准的三角函数，它为弧度制单位的给定角度返回三角函数比值。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">90</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;不同角度的正弦值：&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过乘 pi/180 转化为弧度</span></span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">sin</span>(a*np.pi/<span class="number">180</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;数组中角度的余弦值：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">cos</span>(a*np.pi/<span class="number">180</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;数组中角度的正切值：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">tan</span>(a*np.pi/<span class="number">180</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">不同角度的正弦值：</span></span><br><span class="line"><span class="string">[0.         0.5        0.70710678 0.8660254  1.        ]</span></span><br><span class="line"><span class="string">数组中角度的余弦值：</span></span><br><span class="line"><span class="string">[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01</span></span><br><span class="line"><span class="string"> 6.12323400e-17]</span></span><br><span class="line"><span class="string">数组中角度的正切值：</span></span><br><span class="line"><span class="string">[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00</span></span><br><span class="line"><span class="string"> 1.63312394e+16]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>arcsin</code>，<code>arccos</code>，和<code>arctan</code>函数返回给定角度的<code>sin</code>，<code>cos</code>和<code>tan</code>的反三角函数。 这些函数的结果可以通过<code>numpy.degrees()</code>函数通过将弧度制转换为角度制来验证。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">90</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;含有正弦值的数组：&#x27;</span>)</span><br><span class="line">sin = np.<span class="title function_ invoke__">sin</span>(a*np.pi/<span class="number">180</span>)</span><br><span class="line"><span class="keyword">print</span>(sin)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;计算角度的反正弦，返回值以弧度为单位：&#x27;</span>)</span><br><span class="line">inv = np.<span class="title function_ invoke__">arcsin</span>(sin)</span><br><span class="line"><span class="keyword">print</span>(inv)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;通过转化为角度制来检查结果：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">degrees</span>(inv))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;arccos 和 arctan 函数行为类似：&#x27;</span>)</span><br><span class="line">cos = np.<span class="title function_ invoke__">cos</span>(a*np.pi/<span class="number">180</span>)</span><br><span class="line"><span class="keyword">print</span>(cos)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;反余弦：&#x27;</span>)</span><br><span class="line">inv = np.<span class="title function_ invoke__">arccos</span>(cos)</span><br><span class="line"><span class="keyword">print</span>(inv)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;角度制单位：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">degrees</span>(inv))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;tan 函数：&#x27;</span>)</span><br><span class="line">tan = np.<span class="title function_ invoke__">tan</span>(a*np.pi/<span class="number">180</span>)</span><br><span class="line"><span class="keyword">print</span>(tan)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;反正切：&#x27;</span>)</span><br><span class="line">inv = np.<span class="title function_ invoke__">arctan</span>(tan)</span><br><span class="line"><span class="keyword">print</span>(inv)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;角度制单位：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">degrees</span>(inv))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">含有正弦值的数组：</span></span><br><span class="line"><span class="string">[0.         0.5        0.70710678 0.8660254  1.        ]</span></span><br><span class="line"><span class="string">计算角度的反正弦，返回值以弧度为单位：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string">通过转化为角度制来检查结果：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string">arccos 和 arctan 函数行为类似：</span></span><br><span class="line"><span class="string">[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01</span></span><br><span class="line"><span class="string"> 6.12323400e-17]</span></span><br><span class="line"><span class="string">反余弦：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string">角度制单位：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string">tan 函数：</span></span><br><span class="line"><span class="string">[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00</span></span><br><span class="line"><span class="string"> 1.63312394e+16]</span></span><br><span class="line"><span class="string">反正切：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string">角度制单位：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h6 id="（20-2）舍入函数"><a href="#（20-2）舍入函数" class="headerlink" title="（20.2）舍入函数"></a>（20.2）舍入函数</h6><ul><li><code>numpy.around()</code></li></ul><p>这个函数返回<strong>四舍五入</strong>到所需精度的值。 该函数接受以下参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.around</span>(<span class="selector-tag">a</span>,decimals)</span><br></pre></td></tr></table></figure><p>其中：</p><table><thead><tr><th align="left">序号</th><th align="left">参数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>a</code> 输入数组</td></tr><tr><td align="left">2.</td><td align="left"><code>decimals</code> 要舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">1.0</span>,<span class="number">5.55</span>,  <span class="number">123</span>,  <span class="number">0.567</span>,  <span class="number">25.532</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;舍入后：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">around</span>(a))     <span class="comment"># 整数</span></span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">around</span>(a, decimals=<span class="number">1</span>))     <span class="comment"># 小数点后一位</span></span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">around</span>(a, decimals=-<span class="number">1</span>))    <span class="comment"># 小数点前一位</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[  1.      5.55  123.      0.567  25.532]</span></span><br><span class="line"><span class="string">舍入后：</span></span><br><span class="line"><span class="string">[  1.   6. 123.   1.  26.]</span></span><br><span class="line"><span class="string">[  1.    5.6 123.    0.6  25.5]</span></span><br><span class="line"><span class="string">[  0.  10. 120.   0.  30.]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.floor()</code></li></ul><p>此函数返回不大于输入参数的最大整数。 即标量<code>x</code> 的下限是最大的整数<code>i</code> ，使得<code>i &lt;= x</code>。 注意在Python中，<strong>向下取整</strong>总是从 0 舍入。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([-<span class="number">1.7</span>,  <span class="number">1.5</span>,  -<span class="number">0.2</span>,  <span class="number">0.6</span>,  <span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;提供的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">floor</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">提供的数组：</span></span><br><span class="line"><span class="string">[-1.7  1.5 -0.2  0.6 10. ]</span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">[-2.  1. -1.  0. 10.]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ceil()</code></li></ul><p><code>ceil()</code>函数返回输入值的上限，即，标量<code>x</code>的上限是最小的整数<code>i</code> ，使得<code>i&gt; = x</code>。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([-<span class="number">1.7</span>,  <span class="number">1.5</span>,  -<span class="number">0.2</span>,  <span class="number">0.6</span>,  <span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;提供的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">ceil</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">[-1.7  1.5 -0.2  0.6 10. ]</span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">[-1.  2. -0.  1. 10.]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="（21）NumPy-算数运算"><a href="#（21）NumPy-算数运算" class="headerlink" title="（21）NumPy - 算数运算"></a>（21）NumPy - 算数运算</h5><p>用于执行算术运算（如<code>add()</code>，<code>subtract()</code>，<code>multiply()</code>和<code>divide()</code>）的输入数组必须具有相同的形状或符合数组广播规则。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="title function_ invoke__">arange</span>(<span class="number">9</span>, dtype = np.float_).<span class="title function_ invoke__">reshape</span>(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line">b = np.<span class="keyword">array</span>([<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;两个数组相加：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">add</span>(a,b))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;两个数组相减：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">subtract</span>(a,b))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;两个数组相乘：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">multiply</span>(a,b))<span class="comment"># a @ b</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;两个数组相除：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">divide</span>(a,b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[0. 1. 2.]</span></span><br><span class="line"><span class="string"> [3. 4. 5.]</span></span><br><span class="line"><span class="string"> [6. 7. 8.]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[10 10 10]</span></span><br><span class="line"><span class="string">两个数组相加：</span></span><br><span class="line"><span class="string">[[10. 11. 12.]</span></span><br><span class="line"><span class="string"> [13. 14. 15.]</span></span><br><span class="line"><span class="string"> [16. 17. 18.]]</span></span><br><span class="line"><span class="string">两个数组相减：</span></span><br><span class="line"><span class="string">[[-10.  -9.  -8.]</span></span><br><span class="line"><span class="string"> [ -7.  -6.  -5.]</span></span><br><span class="line"><span class="string"> [ -4.  -3.  -2.]]</span></span><br><span class="line"><span class="string">两个数组相乘：</span></span><br><span class="line"><span class="string">[[ 0. 10. 20.]</span></span><br><span class="line"><span class="string"> [30. 40. 50.]</span></span><br><span class="line"><span class="string"> [60. 70. 80.]]</span></span><br><span class="line"><span class="string">两个数组相除：</span></span><br><span class="line"><span class="string">[[0.  0.1 0.2]</span></span><br><span class="line"><span class="string"> [0.3 0.4 0.5]</span></span><br><span class="line"><span class="string"> [0.6 0.7 0.8]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>让我们现在来讨论 NumPy 中提供的一些其他重要的算术函数。</p><ul><li><code>numpy.reciprocal()</code></li></ul><p>此函数返回参数逐元素的倒数。 由于 Python 处理整数除法的方式，对于绝对值大于 1 的整数元素，结果始终为 0， 对于整数 0，则发出溢出警告。</p><p><strong>示例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">0.25</span>,  <span class="number">1.33</span>,  <span class="number">1</span>,  <span class="number">0</span>,  <span class="number">100</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 reciprocal 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">reciprocal</span>(a))</span><br><span class="line">b = np.<span class="keyword">array</span>([<span class="number">100</span>], dtype =  <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 reciprocal 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">reciprocal</span>(b))<span class="comment"># ？？？</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[  0.25   1.33   1.     0.   100.  ]</span></span><br><span class="line"><span class="string">调用 reciprocal 函数：</span></span><br><span class="line"><span class="string">[4.        0.7518797 1.              inf 0.01     ]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[100]</span></span><br><span class="line"><span class="string">调用 reciprocal 函数：</span></span><br><span class="line"><span class="string">[0]</span></span><br><span class="line"><span class="string">D:\python\project\vippython\first.py:7: RuntimeWarning: divide by zero encountered in reciprocal</span></span><br><span class="line"><span class="string">  print(np.reciprocal(a))</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.power()</code></li></ul><p>此函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;我们的数组是；&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 power 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">power</span>(a,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line">b = np.<span class="keyword">array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;再次调用 power 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">power</span>(a,b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">我们的数组是；</span></span><br><span class="line"><span class="string">[  10  100 1000]</span></span><br><span class="line"><span class="string">调用 power 函数：</span></span><br><span class="line"><span class="string">[    100   10000 1000000]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[1 2 3]</span></span><br><span class="line"><span class="string">再次调用 power 函数：</span></span><br><span class="line"><span class="string">[        10      10000 1000000000</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.mod()</code></li></ul><p>此函数返回输入数组中相应元素的除法余数。 函数<code>numpy.remainder()</code>也产生相同的结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>])</span><br><span class="line">b = np.<span class="keyword">array</span>([<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 mod() 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">mod</span>(a,b))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;调用 remainder() 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">remainder</span>(a,b))  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[10 20 30]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[3 5 7]</span></span><br><span class="line"><span class="string">调用 mod() 函数：</span></span><br><span class="line"><span class="string">[1 0 2]</span></span><br><span class="line"><span class="string">调用 remainder() 函数：</span></span><br><span class="line"><span class="string">[1 0 2]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>以下函数用于对含有复数的数组执行操作。</p><ul><li><code>numpy.real()</code> 返回复数类型参数的实部。</li><li><code>numpy.imag()</code> 返回复数类型参数的虚部。</li><li><code>numpy.conj()</code> 返回通过改变虚部的符号而获得的共轭复数。</li><li><code>numpy.angle()</code> 返回复数参数的角度。 函数的参数是<code>degree</code>。 如果为<code>true</code>，返回的角度以角度制来表示，否则为以弧度制来表示。</li></ul><h5 id="（22）NumPy-线性代数"><a href="#（22）NumPy-线性代数" class="headerlink" title="（22）NumPy - 线性代数"></a>（22）NumPy - 线性代数</h5><p>NumPy 包包含<code>numpy.linalg</code>模块，提供线性代数所需的所有功能。 此模块中的一些重要功能如下表所述。</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><code>dot</code> 两个数组的点积</td></tr><tr><td align="left">2.</td><td align="left"><code>vdot</code> 两个向量的点积</td></tr><tr><td align="left">3.</td><td align="left"><code>inner</code> 两个数组的内积</td></tr><tr><td align="left">4.</td><td align="left"><code>matmul</code> 两个数组的矩阵积</td></tr><tr><td align="left">5.</td><td align="left"><code>determinant</code> 数组的行列式</td></tr><tr><td align="left">6.</td><td align="left"><code>solve</code> 求解线性矩阵方程</td></tr><tr><td align="left">7.</td><td align="left"><code>inv</code> 寻找矩阵的乘法逆矩阵</td></tr></tbody></table><ul><li><code>numpy.dot()</code></li></ul><p>此函数返回<strong>两个数组的点积</strong>。 对于二维向量，其等效于矩阵乘法。 对于一维数组，它是向量的内积。 对于 N 维数组，它是<code>a</code>的最后一个轴上的和与<code>b</code>的倒数第二个轴的乘积。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy.matlib</span><br><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line"></span><br><span class="line">a = np.<span class="built_in">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = np.<span class="built_in">array</span>([[<span class="number">11</span>, <span class="number">12</span>], [<span class="number">13</span>, <span class="number">14</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">dot</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">[[37 40]</span></span><br><span class="line"><span class="string"> [85 92]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>要注意点积计算为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[[1*11+2*13, 1*12+2*14],[3*11+4*13, 3*12+4*14]]</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.vdot()</code></li></ul><p>此函数返回<strong>两个向量的点积</strong>。 如果第一个参数是复数，那么它的共轭复数会用于计算。 如果参数<code>id</code>是多维数组，它会被展开。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">11</span>,<span class="number">12</span>],[<span class="number">13</span>,<span class="number">14</span>]])</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">vdot</span>(a,b))     <span class="comment"># 130</span></span><br></pre></td></tr></table></figure><p>注意：<code>1*11 + 2*12 + 3*13 + 4*14 = 130</code>。</p><ul><li><code>numpy.inner()</code></li></ul><p>此函数返回一维<strong>数组的向量内积</strong>。 对于更高的维度，它返回最后一个轴上的和的乘积。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">inner</span>(np.<span class="keyword">array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),np.<span class="keyword">array</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])))</span><br><span class="line"><span class="comment"># 等价于 1*0+2*1+3*0 = 2</span></span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多维数组示例</span></span><br><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;数组 a：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">11</span>, <span class="number">12</span>], [<span class="number">13</span>, <span class="number">14</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;数组 b：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;内积：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">inner</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">数组 a：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">数组 b：</span></span><br><span class="line"><span class="string">[[11 12]</span></span><br><span class="line"><span class="string"> [13 14]]</span></span><br><span class="line"><span class="string">内积：</span></span><br><span class="line"><span class="string">[[35 41]</span></span><br><span class="line"><span class="string"> [81 95]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>上面的例子中，内积计算如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1<span class="emphasis">*11+2*</span>12, 1<span class="emphasis">*13+2*</span>14 </span><br><span class="line">3<span class="emphasis">*11+4*</span>12, 3<span class="emphasis">*13+4*</span>14 </span><br></pre></td></tr></table></figure><ul><li><code>numpy.matmul</code></li></ul><p><code>numpy.matmul()</code>函数返回两个数组的<strong>矩阵乘积</strong>。 虽然它返回二维数组的正常乘积，但如果任一参数的维数大于2，则将其视为存在于最后两个索引的矩阵的栈，并进行相应广播。</p><p>另一方面，如果任一参数是一维数组，则通过在其维度上附加 1 来将其提升为矩阵，并在乘法之后被去除。</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于二维数组，它就是矩阵乘法</span></span><br><span class="line"><span class="keyword">import</span> numpy.matlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">b = [[<span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[4 1]</span></span><br><span class="line"><span class="string"> [2 2]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维和一维运算</span></span><br><span class="line"><span class="keyword">import</span> numpy.matlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, b))</span><br><span class="line"><span class="built_in">print</span>(np.matmul(b, a))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1 2]</span></span><br><span class="line"><span class="string">[1 2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 维度大于二的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy.matlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, b))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[[ 2  3]</span></span><br><span class="line"><span class="string">  [ 6 11]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[10 19]</span></span><br><span class="line"><span class="string">  [14 27]]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.linalg.det()</code></li></ul><p>行列式在线性代数中是非常有用的值。 它从方阵的对角元素计算。 对于 2×2 矩阵，它是左上和右下元素的乘积与其他两个的乘积的差。</p><p>换句话说，对于矩阵<code>[[a，b]，[c，d]]</code>，**行列式计算为<code>ad-bc</code>**。 较大的方阵被认为是 2×2 矩阵的组合。</p><p><code>numpy.linalg.det()</code>函数计算输入矩阵的行列式。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span>(np.linalg.<span class="title function_ invoke__">det</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">-2.0000000000000004</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>], [<span class="number">4</span>, -<span class="number">2</span>, <span class="number">5</span>], [<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>]])</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(np.linalg.<span class="title function_ invoke__">det</span>(b))</span><br><span class="line"><span class="keyword">print</span>(<span class="number">6</span>*(-<span class="number">2</span>*<span class="number">7</span> - <span class="number">5</span>*<span class="number">8</span>) - <span class="number">1</span>*(<span class="number">4</span>*<span class="number">7</span> - <span class="number">5</span>*<span class="number">2</span>) + <span class="number">1</span>*(<span class="number">4</span>*<span class="number">8</span> - -<span class="number">2</span>*<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">[[ 6  1  1]</span></span><br><span class="line"><span class="string"> [ 4 -2  5]</span></span><br><span class="line"><span class="string"> [ 2  8  7]]</span></span><br><span class="line"><span class="string">-306.0</span></span><br><span class="line"><span class="string">-306</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.linalg.solve()</code></li></ul><p><code>numpy.linalg.solve()</code>函数给出了矩阵形式的<strong>线性方程的解</strong>。</p><p>考虑以下线性方程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x + y + z = 6</span><br><span class="line">2y + 5z = -4</span><br><span class="line">2x + 5y - z = 27</span><br></pre></td></tr></table></figure><p>可以使用矩阵表示为：</p><p>如果矩阵成为<code>A</code>、<code>X</code>和<code>B</code>，方程变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AX = B  </span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = A^(-1)B </span><br></pre></td></tr></table></figure><ul><li><code>numpy.linalg.inv()</code></li></ul><p>我们使用<code>numpy.linalg.inv()</code>函数来计算矩阵的逆。 矩阵的逆是这样的，如果它乘以原始矩阵，则得到单位矩阵。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">y = np.linalg.<span class="title function_ invoke__">inv</span>(x)</span><br><span class="line"><span class="keyword">print</span>(x)</span><br><span class="line"><span class="keyword">print</span>(y)</span><br><span class="line"><span class="keyword">print</span>(np.<span class="title function_ invoke__">dot</span>(x, y))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">[[-2.   1. ]</span></span><br><span class="line"><span class="string"> [ 1.5 -0.5]]</span></span><br><span class="line"><span class="string">[[1.0000000e+00 0.0000000e+00]</span></span><br><span class="line"><span class="string"> [8.8817842e-16 1.0000000e+00]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>例子</p><p>现在让我们在示例中创建一个矩阵A的逆。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.<span class="keyword">array</span>([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">5</span>, -<span class="number">1</span>]])</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;数组 a：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(a)</span><br><span class="line">ainv = np.linalg.<span class="title function_ invoke__">inv</span>(a)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;a 的逆：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(ainv)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;矩阵 b：&#x27;</span>)</span><br><span class="line">b = np.<span class="keyword">array</span>([[<span class="number">6</span>], [-<span class="number">4</span>], [<span class="number">27</span>]])</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;计算：A^(-1)B：&#x27;</span>)</span><br><span class="line">x = np.linalg.<span class="title function_ invoke__">solve</span>(a, b)</span><br><span class="line"><span class="keyword">print</span>(x)</span><br><span class="line"><span class="comment"># 这就是线性方向 x = 5, y = 3, z = -2 的解</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">数组 a：</span></span><br><span class="line"><span class="string">[[ 1  1  1]</span></span><br><span class="line"><span class="string"> [ 0  2  5]</span></span><br><span class="line"><span class="string"> [ 2  5 -1]]</span></span><br><span class="line"><span class="string">a 的逆：</span></span><br><span class="line"><span class="string">[[ 1.28571429 -0.28571429 -0.14285714]</span></span><br><span class="line"><span class="string"> [-0.47619048  0.14285714  0.23809524]</span></span><br><span class="line"><span class="string"> [ 0.19047619  0.14285714 -0.0952381 ]]</span></span><br><span class="line"><span class="string">矩阵 b：</span></span><br><span class="line"><span class="string">[[ 6]</span></span><br><span class="line"><span class="string"> [-4]</span></span><br><span class="line"><span class="string"> [27]]</span></span><br><span class="line"><span class="string">计算：A^(-1)B：</span></span><br><span class="line"><span class="string">[[ 5.]</span></span><br><span class="line"><span class="string"> [ 3.]</span></span><br><span class="line"><span class="string"> [-2.]]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>结果也可以使用下列函数获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.dot(ainv,b)</span><br></pre></td></tr></table></figure><h4 id="4、matplotlib"><a href="#4、matplotlib" class="headerlink" title="4、matplotlib"></a>4、matplotlib</h4><p>Matplotlib 是Python中类似 <a href="https://so.csdn.net/so/search?q=MATLAB&spm=1001.2101.3001.7020">MATLAB</a> 的绘图工具，熟悉 MATLAB 也可以很快的上手 Matplotlib。</p><h5 id="（1）认识Matploblib"><a href="#（1）认识Matploblib" class="headerlink" title="（1）认识Matploblib"></a>（1）认识Matploblib</h5><h6 id="（1-1）-Figure"><a href="#（1-1）-Figure" class="headerlink" title="（1.1） Figure"></a>（1.1） Figure</h6><p>在任何绘图之前，我们需要一个Figure对象，可以理解成我们需要一张画板才能开始绘图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()<span class="comment"># num=4(设置参数)</span></span><br></pre></td></tr></table></figure><h6 id="（1-2）Axes"><a href="#（1-2）Axes" class="headerlink" title="（1.2）Axes"></a>（1.2）Axes</h6><p>在拥有Figure对象之后，在作画前我们还需要轴，没有轴的话就没有绘图基准，所以需要添加Axes。也可以理解成为真正可以作画的纸。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(xlim=[<span class="number">0.5</span>, <span class="number">4.5</span>], ylim=[-<span class="number">2</span>, <span class="number">8</span>], title=<span class="string">&#x27;An Example Axes&#x27;</span>,</span><br><span class="line">       ylabel=<span class="string">&#x27;Y-Axis&#x27;</span>, xlabel=<span class="string">&#x27;X-Axis&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>以上的代码，在一幅图上添加了一个Axes，然后设置了这个Axes的X轴以及Y轴的取值范围（这些设置并不是强制的，后面会再谈到关于这些设置），效果如下图：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/26.png" style="zoom: 50%;" /> <p>对于上面的fig.add_subplot(1, 1, 1)就是添加Axes的，参数的解释的在画板的第1行第1列的第一个位置生成一个Axes对象来准备作画。也可以通过fig.add_subplot(2, 2, 1)的方式生成Axes，前面两个参数确定了面板的划分，例如 2， 2会将整个面板划分成 2 * 2 的方格，第三个参数取值范围是 [1, 2*2] 表示第几个Axes。如下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)<span class="comment"># 2行2列，第一个位置</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">224</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/27.png" style="zoom: 50%;" />  <h6 id="（1-3）Multiple-Axes"><a href="#（1-3）Multiple-Axes" class="headerlink" title="（1.3）Multiple Axes"></a>（1.3）Multiple Axes</h6><p>可以发现我们上面添加 Axes 似乎有点弱鸡，所以提供了下面的方式一次性生成所有 Axes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>,<span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>,<span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Right&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>fig 还是我们熟悉的画板， axes 成了我们常用二维数组的形式访问，这在循环绘图时，额外好用。</p><h6 id="（1-4）Axes-Vs-pyplot"><a href="#（1-4）Axes-Vs-pyplot" class="headerlink" title="（1.4）Axes Vs .pyplot"></a>（1.4）Axes Vs .pyplot</h6><p>相信不少人看过下面的代码，很简单并易懂，但是下面的作画方式只适合简单的绘图，快速的将图绘出。在处理复杂的绘图工作时，我们还是需要使用 Axes 来完成作画的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], color=<span class="string">&#x27;lightblue&#x27;</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.xlim(<span class="number">0.5</span>, <span class="number">4.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="（3）-布局、图例说明、边界等"><a href="#（3）-布局、图例说明、边界等" class="headerlink" title="（3） 布局、图例说明、边界等"></a>（3） 布局、图例说明、边界等</h5><h6 id="（3-1）区间上下限"><a href="#（3-1）区间上下限" class="headerlink" title="（3.1）区间上下限"></a>（3.1）区间上下限</h6><p>当绘画完成后，会发现X、Y轴的区间是会自动调整的，并不是跟我们传入的X、Y轴数据中的最值相同。为了调整区间我们使用下面的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax.set_xlim([xmin, xmax])   <span class="comment">#设置X轴的区间</span></span><br><span class="line">ax.set_ylim([ymin, ymax])   <span class="comment">#Y轴区间</span></span><br><span class="line">ax.axis([xmin, xmax, ymin, ymax])   <span class="comment">#X、Y轴区间</span></span><br><span class="line">ax.set_ylim(bottom=-<span class="number">10</span>)     <span class="comment">#Y轴下限</span></span><br><span class="line">ax.set_xlim(right=<span class="number">25</span>)       <span class="comment">#X轴上限</span></span><br></pre></td></tr></table></figure><p>具体效果见下例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">2</span>)</span><br><span class="line">ax1.plot(x, y)</span><br><span class="line">ax2.plot(x, y)</span><br><span class="line">ax2.set_xlim([-<span class="number">1</span>, <span class="number">6</span>])</span><br><span class="line">ax2.set_ylim([-<span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java SE</title>
      <link href="/2023/01/05/Java%20SE/"/>
      <url>/2023/01/05/Java%20SE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><p><strong>1、环境搭建、JDK</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/2.png"></p><ul><li><p>查看版本</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac –version</span><br><span class="line">或者</span><br><span class="line">java –version </span><br></pre></td></tr></table></figure></li></ul><p><strong>2、Java程序</strong></p><blockquote><p>开发 Java 程序，需要三个步骤：编写代码，编译代码，运行代码</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/1.png"></p><ul><li>编译代码、运行代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p>jdk11开始，可以直接运行</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p><strong>3、IDEA使用</strong></p><ul><li><p>项目结构</p><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul></li><li><p>IDEA <strong>常用快捷键</strong></p></li></ul><table><thead><tr><th><strong>快捷键</strong></th><th><strong>功能效果</strong></th></tr></thead><tbody><tr><td>main&#x2F;psvm、sout、…</td><td>快速键入相关代码</td></tr><tr><td>Ctrl + D</td><td>复制当前行数据到下一行</td></tr><tr><td>Ctrl + Y</td><td>删除所在行，建议用Ctrl + X</td></tr><tr><td>Ctrl + ALT + L</td><td>格式化代码</td></tr><tr><td>ALT + SHIFT + ↑ , ALT + SHIFT + ↓</td><td>上下移动当前代码</td></tr><tr><td>Ctrl + &#x2F; ,  Ctrl + Shift  + &#x2F;</td><td>单行注释，多行注释</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/10.png"> </p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/11.png"></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/12.png"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><hr><h3 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h3><h4 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   多行注释</span></span><br><span class="line"><span class="comment">   注释内容1</span></span><br><span class="line"><span class="comment">   注释内容2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">   文档注释：文档注释的内容是可以提取到一个程序说明文档中去的</span></span><br><span class="line"><span class="comment">   注释内容</span></span><br><span class="line"><span class="comment">   注释内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2、字面量"><a href="#2、字面量" class="headerlink" title="2、字面量"></a>2、字面量</h4><blockquote><p>计算机是用来处理数据的，字面量就是<strong>告诉程序员</strong>：数据在程序中的<strong>书写格式</strong></p></blockquote><table><thead><tr><th><strong>常用数据</strong></th><th><strong>生活中的写法</strong></th><th><strong>程序中的写法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>整数</td><td>666，-88</td><td>666，-88</td><td>写法一致</td></tr><tr><td>小数</td><td>13.14，-5.21</td><td>13.14，-5.21</td><td>写法一致</td></tr><tr><td>字符</td><td>A, 0, 我</td><td>‘A’，‘0’，   ‘我’</td><td>程序中必须使用单引号，有且仅能一个字符</td></tr><tr><td>字符串</td><td>黑马程序员</td><td>“HelloWorld”，“黑马程序员”</td><td>程序中必须使用双引号，内容可有可无</td></tr><tr><td>布尔值</td><td>真、假</td><td>true 、false</td><td>只有两个值：true：代表真，false：代表假</td></tr><tr><td>空值</td><td></td><td>值是：null</td><td>一个特殊的值，空值(后面会讲解作用，暂时不管)</td></tr></tbody></table><h4 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h4><blockquote><p>变量就是内存中的一块区域，用来存储一个数据的，且存储的数据可以被替换</p></blockquote><ol><li><p>变量是什么，有什么作用？</p><ul><li><p><strong>内存中的一块区域。</strong></p></li><li><p><strong>用来存储一个数据的，且存储的数据可以被替换。</strong></p></li></ul></li><li><p>变量的格式</p><ul><li><strong>数据类型 变量名称</strong> <strong>&#x3D;</strong> <strong>初始值；</strong></li></ul></li><li><p>变量的基本特点</p><ul><li><p><strong>变量中只能存一个值</strong></p></li><li><p><strong>变量中存的值是可以替换的</strong></p></li></ul></li></ol><h4 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h4><ul><li>Java语言自己用到的一些词，有特殊作用的，我们称之为关键字。</li></ul><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h4 id="5、标识符"><a href="#5、标识符" class="headerlink" title="5、标识符"></a>5、标识符</h4><blockquote><p>标志符就是名字。我们写程序时会起一些名字，如<strong>类名、方法名、变量名</strong>，取名时要遵守一定的规则。</p></blockquote><ul><li><p>标识符的要求</p><ul><li>基本要求：由数字、字母、下划线(<strong>_</strong>)和美元符(<strong>$</strong>)等组成</li><li>强制要求：<strong>不能以数字开头</strong>、不能是关键字、区分大小写</li></ul></li><li><p>命名指导规范</p><ul><li><p>变量名称：满足标识符规则，建议全英文、有意义、<strong>首字母小写</strong>，满足“驼峰模式”，</p><p>例如：int studyNumber &#x3D; 59。</p></li><li><p>类名称： 满足标识符规则，建议全英文、有意义、<strong>首字母大写</strong>，满足“驼峰模式”，</p><p>例如：HelloWorld.java。</p></li></ul></li></ul><h4 id="6、数据类型"><a href="#6、数据类型" class="headerlink" title="6、数据类型"></a>6、数据类型</h4><ul><li>引用数据类型（除基本数据类型之外的，如String ，其他的后面学习）</li><li>基本数据类型：<strong>4大类8种</strong></li></ul><table><thead><tr><th>数据类型</th><th>关键字</th><th>取值范围</th><th>内存占用（字节数）</th></tr></thead><tbody><tr><td><strong>整数</strong></td><td>byte</td><td>-128~127</td><td>1</td></tr><tr><td>…</td><td>short</td><td>-32768~32767</td><td>2</td></tr><tr><td>…</td><td><strong>int(默认)</strong></td><td>-2147483648~2147483647 <strong>(10位数)</strong></td><td>4</td></tr><tr><td>…</td><td>long</td><td>-9223372036854775808 ~  9223372036854775807 <strong>(19位数)</strong></td><td>8</td></tr><tr><td><strong>浮点数</strong></td><td>float</td><td>1.401298e-45到3.402823e+38</td><td>4</td></tr><tr><td>…</td><td><strong>double（默认）</strong></td><td>4.9000000e-324 到1.797693e+308</td><td>8</td></tr><tr><td><strong>字符</strong></td><td>char</td><td>0-65535</td><td>2</td></tr><tr><td><strong>布尔</strong></td><td>boolean</td><td>true，false</td><td>1</td></tr></tbody></table><ul><li>随便写的整数、小数字面值默认什么类型？</li></ul><p>23 ，默认是int类型 <strong>,</strong> <strong>加上L&#x2F;l</strong>就是<strong>long</strong>类型的数据了。</p><p>23.8，默认是double类型，<strong>加上F&#x2F;f</strong>就是<strong>float</strong>类型了。</p><h4 id="7、类型转换"><a href="#7、类型转换" class="headerlink" title="7、类型转换"></a>7、类型转换</h4><ul><li><p><strong>自动类型转换</strong></p><blockquote><p><strong>类型范围小</strong>的变量，可以<strong>直接赋值</strong>给<strong>类型范围大</strong>的变量。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/3.png"> </p><p><strong>注意事项：</strong></p><ul><li><p>表达式的<strong>最终结果类型由表达式中的最高类型决定</strong>。</p></li><li><p>在表达式中，<strong>byte、short、char 是直接转换成int类型参与运算</strong>的。</p></li></ul></li><li><p><strong>强制类型转换</strong></p><blockquote><p>可以<strong>强行</strong>将<strong>类型范围大</strong>的变量、数据<strong>赋值</strong>给<strong>类型范围小</strong>的变量。</p></blockquote><ul><li><p><strong>数据类型 变量2 &#x3D; (数据类型)变量1、数据</strong></p></li><li><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/4.png"></p></li><li><p><strong>注意事项</strong></p><ul><li><p>强制类型转换<strong>可能</strong>造成数据(丢失)溢出；</p></li><li><p>浮点型强转成整型，直接丢掉小数部分，保留整数部分返回。</p></li></ul></li></ul></li></ul><h4 id="8、运算符"><a href="#8、运算符" class="headerlink" title="8、运算符"></a>8、运算符</h4><blockquote><p>运算符：对字面量或者变量进行操作的<strong>符号。</strong></p></blockquote><p><strong>（1）算数运算符</strong></p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>参考小学一年级</td></tr><tr><td>-</td><td>减</td><td>参考小学一年级</td></tr><tr><td>*</td><td>乘</td><td>参考小学二年级，与“×”相同</td></tr><tr><td>&#x2F;</td><td>除</td><td>与“÷”相同，注意：在Java中两个整数相除结果还是整数。</td></tr><tr><td>%</td><td>取余</td><td>获取的是两个数据做除法的余数</td></tr><tr><td>++</td><td>自增</td><td>变量自身的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量自身的值减1</td></tr></tbody></table><p><strong>“+”</strong>做<em><strong>连接符</strong></em></p><blockquote><p>“+”符号<strong>与字符串运算</strong>的时候是用作连接符的，其结果<strong>依然是一个字符串</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span> ;</span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        abca</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + a);<span class="comment">//        abc5</span></span><br><span class="line">System.out.println(<span class="number">5</span> + a);<span class="comment">//        10</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        abc5a</span></span><br><span class="line">System.out.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//        15abc15</span></span><br><span class="line">System.out.println(a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        102</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//        5a</span></span><br><span class="line">System.out.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot;itheima&quot;</span>);<span class="comment">//        102itheima</span></span><br><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        itheima5a</span></span><br><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//        itheima102</span></span><br></pre></td></tr></table></figure><p><strong>（2）赋值运算符</strong></p><ul><li><p>基本赋值运算符</p><p> int a &#x3D; 10; &#x2F;&#x2F; 先看“&#x3D;”右边，把数据10赋值给左边的变量a存储</p></li><li><p>扩展赋值运算符</p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加后赋值</td><td>a+&#x3D;b 等价于 a &#x3D; (a的数据类型)(a+b); 将a + b的值给a</td></tr><tr><td>-&#x3D;</td><td>减后赋值</td><td>a-&#x3D;b 等价于 a &#x3D;  (a的数据类型)(a-b); 将a - b的值给a</td></tr><tr><td>*&#x3D;</td><td>乘后赋值</td><td>a*&#x3D;b 等价于 a &#x3D;  (a的数据类型)(a*b); 将a *****  b的值给a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除后赋值</td><td>a&#x2F;&#x3D;b 等价于 a &#x3D;  (a的数据类型)(a&#x2F;b); 将a <strong>&#x2F;</strong> b的商给a</td></tr><tr><td>%&#x3D;</td><td>取余后赋值</td><td>a%&#x3D;b 等价于 a &#x3D;  (a的数据类型)(a%b); 将a <strong>%</strong> b的商给a</td></tr></tbody></table><p><strong>注意：扩展的赋值运算符隐含了强制类型转换。</strong></p></li></ul><p><strong>（3）关系运算符</strong></p><blockquote><p>是对数据进行条件判断的符号，最终会返回一个比较的布尔结果（false,true）</p></blockquote><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>a&#x3D;&#x3D;b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!&#x3D;</td><td>a!&#x3D;b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，   判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;&#x3D;</td><td>a&gt;&#x3D;b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，   判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;&#x3D;</td><td>a&lt;&#x3D;b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p><strong>（4）逻辑运算符</strong></p><blockquote><p>可以把多个条件的布尔结果放在一起运算，最终返回一个布尔结果。</p></blockquote><table><thead><tr><th>符号</th><th>介绍</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>必须都是true，结果才是true; 只要有一个是false，结果一定是false。</td></tr><tr><td>|</td><td>逻辑或</td><td>只要有一个为true、结果就是true</td></tr><tr><td>！</td><td>逻辑非</td><td>你真我假、你假我真。  !true&#x3D;false 、 !false&#x3D;  true</td></tr><tr><td>^</td><td>逻辑异或</td><td>如果两个条件都是false或者都是true则结果是false。两个条件不同结果是true。</td></tr></tbody></table><p><strong>短路逻辑运算符</strong></p><table><thead><tr><th>符号</th><th>介绍</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>判断结果与“&amp;”一样。过程是<strong>左边为  false</strong>，<strong>右边则不执行</strong>。</td></tr><tr><td>||</td><td>短路或</td><td>判断结果与“|”一样。过程是<strong>左边为 true</strong>， <strong>右边则不执行</strong>。</td></tr></tbody></table><p><strong>注意：逻辑与 “&amp;”</strong> 、<strong>逻辑或“|”</strong>；无论左边是 <strong>false</strong>还是<strong>true</strong>，<strong>右边都要执行。</strong></p><p><strong>（5）三元运算符</strong></p><p><code>条件表达式 **?** 值1 **:** 值2;</code></p><blockquote><p>执行流程：首先计算<strong>关系表达式的值，</strong>如果值为<strong>true</strong>，返回<strong>值1</strong>，如果为<strong>false</strong>，返回<strong>值2</strong>。</p></blockquote><p><strong>（6）运算符优先级</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>);  <span class="comment">// true</span></span><br><span class="line">System.out.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/5.png"> </p><hr><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h3 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h3><h4 id="1、分支结构"><a href="#1、分支结构" class="headerlink" title="1、分支结构"></a>1、分支结构</h4><p><strong>（1）if 分支</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">格式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式<span class="number">3</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    语句体<span class="number">3</span>;</span><br><span class="line">&#125; </span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）switch 分支</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    … </span><br><span class="line">        <span class="keyword">case</span> 值n-<span class="number">1</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        执行代码n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p><strong>表达式类型</strong>只能是byte、short、int、char，JDK5开始支持枚举，JDK7开始支持String、不支持double、float、long。</p></li><li><p>case给出的值<strong>不允许重复</strong>，且只能是字面量，不能是变量。</p></li><li><p>不要忘记写break，否则会出现穿透现象。</p></li></ul><h4 id="2、循环结构"><a href="#2、循环结构" class="headerlink" title="2、循环结构"></a>2、循环结构</h4><p><strong>（1）for 循环</strong></p><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 循环条件; 迭代语句)  &#123;</span><br><span class="line">    循环体语句(重复执行的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）while 循环</strong></p><ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    循环体语句(被重复执行的代码);</span><br><span class="line">    迭代语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）do-while 循环</strong></p><ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    迭代语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(“Hello World！<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    i++;</span></span><br><span class="line"><span class="string">&#125; while( i &lt; 3);</span></span><br></pre></td></tr></table></figure><p><strong>（4）死循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经典做法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h4 id="3、跳转控制语句"><a href="#3、跳转控制语句" class="headerlink" title="3、跳转控制语句"></a>3、跳转控制语句</h4><ul><li><strong>break  :</strong> 跳出并结束当前所在循环的执行。</li><li><strong>continue:</strong> 用于跳出当前循环的当次执行，进入下一次循环。</li></ul><p><strong>注意事项</strong></p><p>break : 只能用于结束所在循环, 或者结束所在switch分支的执行。</p><p>continue : 只能在循环中进行使用。</p><hr><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><h4 id="1、数组的定义"><a href="#1、数组的定义" class="headerlink" title="1、数组的定义"></a>1、数组的定义</h4><p><strong>（1）静态初始化</strong></p><blockquote><p>定义数组的时候<strong>直接给数组赋值</strong>。</p></blockquote><ul><li><p><strong>完整格式</strong></p><p><code>数据类型[]  数组名 = new 数据类型[]&#123;元素1，元素2 ，元素3… &#125;;</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>[] scores = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">89.9</span>, <span class="number">99.5</span>, <span class="number">59.5</span>, <span class="number">88.0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] ages = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>简化格式</strong></p><p><code>数据类型[] 数组名 = &#123; 元素1，元素2 ，元素3，… &#125;;</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>数组变量名中<strong>存储的是数组在内存中的地址</strong>，<strong>数组是引用类型</strong>。</li><li>数组<strong>一旦定义</strong>出来，程序执行的过程中，<strong>长度、类型就固定了</strong>。</li></ul><p><strong>原理：</strong></p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/6.png" style="zoom:50%;" /> <p><strong>（2）动态初始化</strong></p><blockquote><p>定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据。</p></blockquote><ul><li><p><strong>格式</strong></p><p><code>数据类型[] 数组名 = new 数据类型[长度];</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 后赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li><strong>默认值</strong></li></ul><table><thead><tr><th>数据类型</th><th>明细</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>byte、short、char、int、long</td><td>0</td></tr><tr><td>…</td><td>float、double</td><td>0.0</td></tr><tr><td>…</td><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>类、接口、数组、String</td><td>null</td></tr></tbody></table><p><strong>（3）</strong>两种格式的写法是独立的，<strong>不可以混用。</strong></p><p><code>int[] arrs = new int[3]&#123;30，40,50&#125;;</code> 是<strong>错误</strong>的</p><h4 id="2、数组的访问"><a href="#2、数组的访问" class="headerlink" title="2、数组的访问"></a>2、数组的访问</h4><p><code>数组名称[索引]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;;</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li><strong>数组的长度属性：length</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组的长度（就是数组元素的个数）</span></span><br><span class="line">System.out.println(arr.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>表示数组的<strong>最大索引</strong>：<code>数组名.length - 1//前提：元素个数大于0</code></p><ul><li><strong>遍历</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    System.out.println(ages[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、数组内存"><a href="#3、数组内存" class="headerlink" title="3、数组内存"></a>3、数组内存</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/7.png"> </p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/8.png"></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/9.png"></p><h4 id="4、常见问题"><a href="#4、常见问题" class="headerlink" title="4、常见问题"></a>4、常见问题</h4><ul><li><p>问题1：如果访问的元素位置<strong>超过最大索引</strong>，执行时会出现 <strong>ArrayIndexOutOfBoundsException</strong> (数组索引越界异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// System.out.println(arr[3])  // 出现异常 </span></span><br></pre></td></tr></table></figure></li><li><p>问题2：如果数组变量中没有存储数组的地址，而是null, 在访问数组信息时会出现 <strong>NullPointerException</strong> (空指针异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr); <span class="comment">// null</span></span><br><span class="line">System.out.println(arr.length)  <span class="comment">// 出现异常 </span></span><br></pre></td></tr></table></figure></li></ul><hr><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><h3 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h3><h4 id="1、方法的定义与调用"><a href="#1、方法的定义与调用" class="headerlink" title="1、方法的定义与调用"></a>1、方法的定义与调用</h4><p><strong>（1）定义</strong></p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (形参列表) &#123;</span><br><span class="line">    方法体代码(需要执行的功能代码)</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法不需要返回结果，则申明返回值类型为<strong>void</strong>；方法不需要参数，则形参列表可以不写。</p><p><code>return; </code> 可以<strong>立即跳出并结束</strong>当前方法的执行。</p><p><strong>（2）调用</strong></p><p><strong>格式</strong></p><p><code>方法名(…);</code></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h4 id="2、方法调用的内存图"><a href="#2、方法调用的内存图" class="headerlink" title="2、方法调用的内存图"></a>2、方法调用的内存图</h4><blockquote><p>方法是放在<strong>方法区</strong>中的，被调用的时候，需要进入到<strong>栈内存</strong>中运行</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/13.png"> </p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/14.png"> </p><h4 id="3、方法的参数传递机制"><a href="#3、方法的参数传递机制" class="headerlink" title="3、方法的参数传递机制"></a>3、方法的参数传递机制</h4><blockquote><p>在传输实参给方法的形参的时候，并不是传输实参变量本身， 而是传输实参变量中存储的值，这就是<em><strong>值传递</strong></em>。</p></blockquote><ul><li>基本类型和引用类型的参数在传递的时候有什么不同？<ul><li><strong>都是值传递。</strong></li><li>基本类型的参数传输存储的<strong>数据值</strong>。</li><li>引用类型的参数传输存储的<strong>地址值</strong>。</li></ul></li></ul><h4 id="4、方法的重载"><a href="#4、方法的重载" class="headerlink" title="4、方法的重载"></a>4、方法的重载</h4><blockquote><p>同一个类中，出现<strong><em>多个方法名称</em>相同</strong>，但是<strong><em>形参列表</em>是不同的</strong>，那么这些方法就是重载方法。</p></blockquote><p><strong>方法重载的判定</strong></p><ul><li><p>只要是同一个类中，<strong>方法名称相同、形参列表不同</strong>，那么他们就是重载的方法，<strong>其他都不管！</strong>（如：修饰符，返回值类型都无所谓）</p></li><li><p>形参列表不同指的是：<strong>形参的个数、类型、顺序不同</strong>，不关心形参的名称。</p></li></ul><hr><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><h3 id="六、面向对象"><a href="#六、面向对象" class="headerlink" title="六、面向对象"></a>六、面向对象</h3><blockquote><p>面向对象的<strong>三大</strong>特征：<strong>封装，继承，多态</strong>。</p><p>l面向对象的<strong>四大</strong>特征：<strong>抽象，封装，继承，多态</strong>。</p></blockquote><h4 id="1、定义类"><a href="#1、定义类" class="headerlink" title="1、定义类"></a>1、定义类</h4><ul><li><p>类名<strong>首字母建议大写</strong>，且有意义，满足“驼峰模式”。</p></li><li><p><strong>一个Java文件中可以定义多个class类，但只能一个类是public修饰</strong>，<strong>而且public修饰的类名必须成为代码文件名</strong>。</p></li><li><p>实际开发中建议还是一个文件定义一个class类。</p></li><li><p><strong>成员变量</strong>的完整定义格式是：<code>修饰符 数据类型 变量名称 = 初始化值；</code>， <strong>一般无需指定初始化值，存在默认值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 属性 (成员变量)</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    <span class="comment">// 行为（方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、对象在内存中的运行机制-回B站看"><a href="#2、对象在内存中的运行机制-回B站看" class="headerlink" title="2、对象在内存中的运行机制(回B站看)"></a>2、对象在内存中的运行机制(回B站看)</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/15.png"></p><ul><li><p>对象到底是放在哪个位置的？</p><p><strong>堆内存中</strong></p></li><li><p><code>Car c = new Car();</code> c变量名中存储的是什么？</p><p><strong>存储的是对象在堆内存中的地址。</strong></p></li><li><p>成员变量 <code>(name、price)</code> 的数据放在哪里，存在于哪个位置？</p><p>l<strong>对象中，存在于堆内存中。</strong></p></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/16.png"></p><p><strong>垃圾回收</strong></p><blockquote><p>当堆内存中的<strong>对象</strong>，没有被任何变量引用（指向）时，就会被判定为内存中的<strong>“垃圾”。</strong></p></blockquote><h4 id="3、构造器"><a href="#3、构造器" class="headerlink" title="3、构造器"></a>3、构造器</h4><blockquote><p>定义在类中的，可以用于初始化一个类的对象，并返回对象的地址。</p></blockquote><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表)&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 无参数构造器（默认存在的）：初始化对象时，成员变量的数据均采用默认值。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span>&#123; ... &#125;        </span><br><span class="line">    <span class="comment">// 有参数构造器        </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String n, <span class="type">double</span> p)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用构造器得到对象的格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类 变量名称 = <span class="keyword">new</span> 构造器；</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>, <span class="number">39.8</span>);</span><br></pre></td></tr></table></figure><p><strong>构造器的注意事项</strong></p><ul><li><p>任何类定义出来，<strong>默认就自带了无参</strong>数构造器，<strong>写不写都有</strong>。</p></li><li><p><strong>一旦定义了有参数构造器</strong>，那么<strong>无参数构造器就没有了</strong>，如果还想用无参数构造器，此时就<strong>需要自己手写一个无参数构造器</strong>了。</p></li></ul><h4 id="4、this关键字"><a href="#4、this关键字" class="headerlink" title="4、this关键字"></a>4、this关键字</h4><blockquote><ul><li><p>可以出现在构造器、方法中</p></li><li><p>代表<strong>当前对象的地址。</strong></p></li></ul></blockquote><h4 id="5、封装"><a href="#5、封装" class="headerlink" title="5、封装"></a>5、封装</h4><blockquote><p>封装：告诉我们，<strong>如何正确设计对象的属性和方法</strong>。</p><p>封装的原则：对象代表什么，就得<strong>封装对应的数据，并提供数据对应的行为</strong>。</p></blockquote><p><strong>如何进行封装更好？</strong></p><ul><li>一般建议对<strong>成员变量使用private</strong>（私有、隐藏）关键字修饰进（private修饰的成员只能在当前类中访问）。</li><li><strong>为每个成员变量提供配套public修饰的的getter、setter方法</strong>暴露其取值和赋值。</li></ul><h4 id="6、JavaBean"><a href="#6、JavaBean" class="headerlink" title="6、JavaBean"></a>6、JavaBean</h4><blockquote><p>也可以称为实体类，其对象可以用于在程序中封装数据</p></blockquote><p><strong>标准JavaBean</strong>须满足如下书写要求：</p><ul><li><p>成员变量使用 <strong>private</strong> 修饰。</p></li><li><p>提供成员变量对应的 <strong>setXxx() &#x2F; getXxx()方法。</strong></p></li><li><p>必须提供一个<strong>无参构造器；有参数构造器是可写可不写的。</strong></p></li></ul><h4 id="7、static关键字"><a href="#7、static关键字" class="headerlink" title="7、static关键字"></a>7、static关键字</h4><blockquote><p>static是静态的意思，可以用来修饰成员变量、成员方法。</p><p>static修饰成员变量之后称为<strong>静态成员变量（类变量）</strong>，修饰方法之后称为<strong>静态方法（类方法）</strong>。</p><p>static修饰后的成员变量，**可以被类的所有对象共享（访问、修改)**。</p></blockquote><ul><li><strong>静态成员变量内存图</strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/20.png"></p><ul><li><p><strong>静态成员变量</strong>（有static修饰，<strong>属于类</strong>、加载一次，内存中只有一份），访问格式</p><ul><li><strong><code>类名.静态成员变量</code>(推荐)</strong></li><li><code>对象.静态成员变量</code>(不推荐)</li></ul></li><li><p><strong>实例成员变量</strong>（无static修饰，<strong>属于对象</strong>），访问格式：</p><ul><li><code>对象.实例成员变量</code></li></ul></li><li><p><strong>静态成员方法</strong>（有static修饰，归属于类），建议用类名访问，也可以用对象访问。</p></li><li><p><strong>实例成员方法</strong>（无static修饰，归属于对象），只能用对象触发访问。</p></li></ul><p><strong>静态成员方法内存图</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/21.png"></p><p><strong>static访问注意事项：</strong></p><ul><li><p><strong>静态方法只能访问静态的成员</strong>，不可以直接访问实例成员。</p></li><li><p>实例方法可以访问静态的成员，也可以访问实例成员。</p></li><li><p><strong>静态方法中是不可以出现this关键字的</strong>。</p></li></ul><h6 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a><strong>工具类</strong></h6><blockquote><p><strong>类中都是一些静态方法</strong>，每个方法都是以完成一个共用的功能为目的，这个类用来给系统开发人员共同使用的。</p><p>一是调用方便，二是提高了代码复用（<strong>一次编写，处处可用</strong>）</p></blockquote><p><strong>为什么工具类中的方法不用实例方法做？</strong> </p><ul><li><p><strong>实例方法需要创建对象调用。</strong></p></li><li><p><strong>此时用对象只是为了调用方法，这样只会浪费内存。</strong></p></li></ul><p>ps: 由于工具里面都是静态方法，直接用类名即可访问，因此，工具类无需创建对象，<strong>建议将工具类的构造器进行私有</strong>。</p><h6 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a><strong>代码块</strong></h6><blockquote><p>代码块是类的5大成分之一（成员变量、构造器，方法，<strong>代码块</strong>，内部类），<strong>定义在类中方法外</strong>。</p><p>在Java类下，<strong>使用 { } 括起来的代码被称为代码块</strong> 。</p></blockquote><p>代码块<strong>分为</strong></p><ul><li><p><strong>静态代码块</strong>:</p><ul><li><strong>格式</strong>：static{}</li><li><strong>特点</strong>：需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次</li><li><strong>使用场景</strong>：在类加载的时候做一些静态数据初始化的操作，以便后续使用。</li></ul></li><li><p><strong>构造代码块</strong>（<strong>了解，见的少</strong>）：</p><ul><li><strong>格式</strong>：{}</li><li><strong>特点</strong>：每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且在构造器执行前执行</li><li><strong>使用场景</strong>：初始化实例资源。</li></ul></li></ul><p><strong>如果要在启动系统时对静态资源进行初始化，则建议使用静态代码块完成数据的初始化操作。</strong></p><h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h6><blockquote><p>可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。</p><p>例如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间。</p></blockquote><ul><li><p><strong>饿汉单例设计模式</strong></p><ul><li><blockquote><p>在用类获取对象的时候，对象已经提前为你创建好了。</p></blockquote></li><li><p>定义一个类，把<strong>构造器私有</strong>。</p></li><li><p>定义一个静态变量存储一个对象。</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;** a、定义一个单例类 <em>&#x2F;<br>public class SingleInstance {<br>&#x2F;</em>* c.定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 <em>&#x2F;<br>public static SingleInstance instance &#x3D; new SingleInstance ();<br>&#x2F;</em>* b.单例必须私有构造器*&#x2F;<br>private SingleInstance (){<br>    System.out.println(“创建了一个对象”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ **懒汉单例设计模式**</span><br><span class="line"></span><br><span class="line">  + &gt; 在真正需要该对象的时候，才去创建一个对象(延迟加载对象)。</span><br><span class="line"></span><br><span class="line">  + 定义一个类，把构造器私有。</span><br><span class="line"></span><br><span class="line">  + 定义一个静态变量存储一个对象。</span><br><span class="line"></span><br><span class="line">  + 提供一个返回单例对象的方法</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    /** 定义一个单例类 */</span><br><span class="line">    class SingleInstance&#123;</span><br><span class="line">        /** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */</span><br><span class="line">        public static SingleInstance instance ; // null</span><br><span class="line">        /** 单例必须私有构造器*/</span><br><span class="line">        private SingleInstance()&#123;&#125;</span><br><span class="line">        /** 必须提供一个方法返回一个单例对象  */</span><br><span class="line">        public static SingleInstance getInstance()&#123;</span><br><span class="line">            if (instance == null) &#123;</span><br><span class="line">                instance = new SingleInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="8、继承"><a href="#8、继承" class="headerlink" title="8、继承"></a>8、继承</h4><blockquote><p>Java中提供一个<strong>关键字extends</strong>，用这个关键字，我们可以让<strong>一个类和另一个类建立起父子关系</strong>。</p><p>Student称为<strong>子类（派生类）</strong>，People称为**父类(基类 或超类)**。</p><p><strong>作用</strong>：当子类继承父类后，就<strong>可以直接使用父类公共的属性和方法了</strong></p><p><strong>好处</strong>：<strong>提高代码的复用性，减少代码冗余，增强类的功能扩展性</strong></p><p><strong>格式</strong>：**<code>子类 extends 父类</code>**</p></blockquote><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><h3 id="七、String、ArrayList"><a href="#七、String、ArrayList" class="headerlink" title="七、String、ArrayList"></a>七、String、ArrayList</h3><h4 id="1、String类"><a href="#1、String类" class="headerlink" title="1、String类"></a>1、String类</h4><h5 id="（1）概述"><a href="#（1）概述" class="headerlink" title="（1）概述"></a>（1）概述</h5><blockquote><p>java.lang.String 类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串。</p><p>Java 程序中的<strong>所有字符串文字</strong>（例如“abc”）<strong>都为此类的对象</strong>。</p></blockquote><p><strong>String</strong>类的特点详解</p><ul><li>String其实常被称为<strong>不可变字符串类型</strong>，它的<strong>对象在创建后不能被更改</strong>。</li><li>String变量<strong>每次的修改其实都是产生并指向了新的字符串对象</strong></li></ul><p><strong>字符串对象存在哪里？</strong></p><ul><li>在<strong>字符串常量池</strong>中存储。</li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/17.png">  </p><h5 id="（2）字符串的内容比较"><a href="#（2）字符串的内容比较" class="headerlink" title="（2）字符串的内容比较"></a>（2）字符串的内容比较</h5><p><strong>字符串的内容比较 <em>不适合</em> 用“&#x3D;&#x3D;”比较。</strong>(<strong>基本数据类型比较时使用</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sysLoginName</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请您输入您的登录名称&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> sc.next();<span class="comment">// itheima</span></span><br><span class="line">System.out.println(sysLoginName == loginName);<span class="comment">// false（bi）</span></span><br></pre></td></tr></table></figure><p><strong>推荐使用String类提供的“equals”比较：只关心内容一样即可</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean <strong>equals (Object anObject)</strong></td><td>将此字符串与指定对象进行比较。只关心字符内容是否一致！</td></tr><tr><td>public boolean <strong>equalsIgnoreCase (String anotherString)</strong></td><td>将此字符串与指定对象进行比较，<strong>忽略大小写</strong>比较字符串。只关心字符内容是否一致！</td></tr></tbody></table><h5 id="（3）String常用API"><a href="#（3）String常用API" class="headerlink" title="（3）String常用API"></a>（3）String常用API</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int <strong>length()</strong></td><td>返回此字符串的长度</td></tr><tr><td>public char <strong>charAt(int index)</strong></td><td>获取某个索引位置处的字符</td></tr><tr><td>public char[] <strong>toCharArray()</strong></td><td>将当前字符串转换成字符数组返回</td></tr><tr><td>public String <strong>substring(int beginIndex, int endIndex)</strong></td><td>根据开始和结束索引进行截取，得到新的字符串（包前不包后）</td></tr><tr><td>public String <strong>substring(int beginIndex)</strong></td><td>从传入的索引处截取，截取到末尾，得到新的字符串</td></tr><tr><td>public String <strong>replace(CharSequence target, CharSequence replacement)</strong></td><td>使用新值，将字符串中的旧值替换，得到新的字符串</td></tr><tr><td>public String[] <strong>split(String regex)</strong></td><td>根据传入的规则切割字符串，得到字符串数组返回</td></tr></tbody></table><h5 id="（4）创建字符串的两种方式"><a href="#（4）创建字符串的两种方式" class="headerlink" title="（4）创建字符串的两种方式"></a>（4）创建字符串的两种方式</h5><ul><li><p>方式一：直接定义</p><p><code>String name = &quot;ggw&amp;xpl&quot;;</code></p></li><li><p>方式二：通过String构造类创建</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public String(String original)</td><td>根据传入的字符串内容，来创建字符串对象</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public String(byte[] chs)</td><td>根据字节数组的内容，来创建字符串对象</td></tr></tbody></table></li></ul><p><strong>面试常考</strong>：</p><p>两种方式有什么区别</p><ul><li>以“”方式给出的字符串对象，在字符串常量池中存储，而且<strong>相同内容只会在其中存储一份</strong>。</li><li>通过构造器new对象，<strong>每new一次都会产生一个新对象</strong>，放在堆内存中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"><span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/18.png"></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/19.png"></p><h5 id="（5）String常见面试题"><a href="#（5）String常见面试题" class="headerlink" title="（5）String常见面试题"></a>（5）String常见面试题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 创建了两个对象，&quot;abc&quot;已经创建了一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">// 指向前一行中常量池&quot;abc&quot;</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;<span class="comment">// Java存在编译优化机制，程序在编译时： “a” + “b” + “c” 会直接转成 &quot;abc&quot;</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Arraylist"><a href="#2、Arraylist" class="headerlink" title="2、Arraylist"></a>2、Arraylist</h4><blockquote><p><strong>集合的特点</strong></p><ul><li>集合的<strong>大小不固定</strong>，启动后可以动态变化，<strong>类型也可以选择不固定</strong></li><li>集合非常适合做元素个数不确定，且要进行增删操作的业务场景</li><li>集合还提供了许多丰富、好用的功能，而数组的功能很单一</li><li><strong>集合中存储的元素并不是对象本身，而是对象的地址</strong></li></ul></blockquote><p>ArrayList是集合中的一种，它支持索引</p><h5 id="（1）对象创建"><a href="#（1）对象创建" class="headerlink" title="（1）对象创建"></a>（1）对象创建</h5><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public <strong>ArrayList()</strong></td><td>创建一个空的集合对象</td></tr></tbody></table><h5 id="（2）增加元素"><a href="#（2）增加元素" class="headerlink" title="（2）增加元素"></a>（2）增加元素</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean <strong>add(E e)</strong></td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public void <strong>add(int index,E element)</strong></td><td>在此集合中的指定位置插入指定的元素</td></tr></tbody></table><h5 id="（3）泛型"><a href="#（3）泛型" class="headerlink" title="（3）泛型"></a>（3）泛型</h5><blockquote><p>ArrayList<E>：其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种数据类型。</p></blockquote><p>例如：<code>ArrayList&lt;String&gt;</code> ：此集合只能操作字符串类型的元素。</p><p><strong>注意：泛型只能支持引用数据类型，不支持基本数据类型。</strong></p><h5 id="（4）ArrayList集合常用方法"><a href="#（4）ArrayList集合常用方法" class="headerlink" title="（4）ArrayList集合常用方法"></a>（4）<strong>ArrayList</strong>集合常用方法</h5><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public E <strong>get(int  index)</strong></td><td>返回指定索引处的元素</td></tr><tr><td>public int  <strong>size()</strong></td><td>返回集合中的元素的个数</td></tr><tr><td>public E <strong>remove(int  index)</strong></td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public boolean <strong>remove(Object o)</strong></td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>public E <strong>set(int index,E element)</strong></td><td>修改指定索引处的元素，返回被修改的元素</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023使用picgo + github搭建图床（typora）,解决jsdelivr问题</title>
      <link href="/2023/01/05/2022GitHub%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/01/05/2022GitHub%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="一、图床是什么"><a href="#一、图床是什么" class="headerlink" title="一、图床是什么"></a>一、图床是什么</h3><blockquote><p><strong>图床一般是指储存图片的服务器</strong></p><p>有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p></blockquote><ul><li><p><strong>说人话</strong>： 就是把你博客，或者笔记中的图片存到云端上去，这样文本里面只留存图片链接</p></li><li><p><strong>举个例子</strong>：写<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">markdown</a>笔记时，图片存储在本地，用相对路径或者绝对路径加载图片，如果要同步笔记或者迁移笔记的话，</p><p>那么是不是要把图片也进行迁移，很麻烦。<br>有人会说可以直接复制整个目录结构，也麻烦不了太多。但是这样是不是将来在两个设备写markdown时，就需要总是同步图片，特别是如果本地写好博客，去发布时，图片链接又该如何让去解决，一张一张处理，效率显然太慢了。</p></li><li><p><strong>图床有什么效果</strong>：例子中那些问题，图床就可以很好的解决</p><ul><li>同步笔记时，利用iCloud，或者其他云盘，就可以直接同步markdown纯文本文件，不需要再考虑图片问题，笔记的体积还小，只需要存储markdown文本文件，去处理图片的体积。</li><li>博客也只需要，将markdown全选 + 复制 + 粘贴 + 发布就好了</li></ul></li></ul><h3 id="二、怎么搭建"><a href="#二、怎么搭建" class="headerlink" title="二、怎么搭建"></a>二、怎么搭建</h3><p>方法有很多，但是说到底还是选择用什么样的云存储，可以是自己用服务器写API来搭建，也可以使用大厂商提供的对象存储，还有就是本文的白嫖，白嫖<strong>GitHub</strong>。</p><p>而<strong>picgo</strong>只是一个图床管理工具，帮助我们上传图片到图床。同样的应用还有upic，以及其他，都是同样的功能，但图床的方便一定少不了图床管理工具。picgo则是可以配合<a href="http://www.cankaowang.com/question/245966.html">typora</a>使用。</p><h4 id="1、配置GitHub"><a href="#1、配置GitHub" class="headerlink" title="1、配置GitHub"></a>1、配置GitHub</h4><ul><li><p><strong>（1）创建仓库</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-02-25.png"> </p></li><li><p><strong>（2）生成token私钥</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-11-35.png"> </p><hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-13-36.png"> </p><hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-18-48.png"></p><hr><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-23-50.png" style="zoom:80%;" /> <hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-19-16.png"> </p><p><strong>ps: 得到的私钥要保存下来，后面github上无法查看</strong></p></li></ul><h4 id="2、配置picgo"><a href="#2、配置picgo" class="headerlink" title="2、配置picgo"></a>2、配置picgo</h4><p><a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载</a></p><p>还需要配置node.js环境才可以使用。<a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%7B%22request_id%22:%22167245108816782425141530%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167245108816782425141530&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121788104-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v1&utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">node.js安装及环境配置</a> </p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-33-00.png"> </p><table><thead><tr><th>名称</th><th>填写</th></tr></thead><tbody><tr><td>设定仓库名</td><td>用户名&#x2F;仓库名</td></tr><tr><td>设定分支名</td><td>分支名，用户main就可以</td></tr><tr><td>设定Token</td><td>这个就是GitHub配置的token私钥</td></tr><tr><td>设定存储路径</td><td>相对于仓库来说，自定义填写</td></tr><tr><td><strong>设定自定义域名</strong></td><td><strong>重要！！！解决jsdelivr CDN加速问题</strong> <strong>如下填写.</strong></td></tr></tbody></table><h6 id="解决jsdelivr-CDN加速问题"><a href="#解决jsdelivr-CDN加速问题" class="headerlink" title="解决jsdelivr CDN加速问题"></a>解决jsdelivr CDN加速问题</h6><p><strong>这个现在失效了</strong>：<code>https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main</code></p><p><strong>改成：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.staticaly.com/gh/[github用户名]/[仓库名]@main</span><br></pre></td></tr></table></figure><p>@后面跟的是填写的分支名，一定要一致</p><h4 id="3、配置typora"><a href="#3、配置typora" class="headerlink" title="3、配置typora"></a>3、配置typora</h4><ul><li>打开：<strong>文件 -&gt; 偏好设置 -&gt; 图像</strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-49-53.png"> </p><ul><li><strong>使用：</strong></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-57-31.png" style="zoom: 67%;" /> <ul><li><strong>效果：</strong></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-59-42.png" style="zoom:67%;" /> ]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法学习记录</title>
      <link href="/2023/01/05/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/01/05/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<hr><p>[toc]</p><h3 id="1、快捷键"><a href="#1、快捷键" class="headerlink" title="1、快捷键"></a>1、快捷键</h3><table><thead><tr><th align="left">功能</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">加粗</td><td align="left">Ctrl + B</td></tr><tr><td align="left">斜体</td><td align="left">Ctrl + I</td></tr><tr><td align="left">引用</td><td align="left">Ctrl + Shift + Q</td></tr><tr><td align="left">下划线</td><td align="left">Ctrl + U</td></tr><tr><td align="left">删除线</td><td align="left">Alt + shift + 5</td></tr><tr><td align="left">插入链接</td><td align="left">Ctrl + L</td></tr><tr><td align="left">插入代码</td><td align="left">Ctrl + Shift  + K</td></tr><tr><td align="left">插入图片</td><td align="left">Ctrl + Shift + I</td></tr><tr><td align="left">提升标题</td><td align="left">Ctrl + +</td></tr><tr><td align="left">降低标题</td><td align="left">Ctrl + -</td></tr><tr><td align="left">有序列表</td><td align="left">Ctrl + Shift + [</td></tr><tr><td align="left">无序列表</td><td align="left">Ctrl + Shift + ]</td></tr></tbody></table><hr><h3 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h3><h4 id="2-1-字体设置"><a href="#2-1-字体设置" class="headerlink" title="2.1 字体设置"></a>2.1 字体设置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正常文字</span><br><span class="line">*倾斜*</span><br><span class="line">_倾斜_</span><br><span class="line">**加粗**</span><br><span class="line">***倾斜加粗***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>正常文字<br><em>倾斜</em><br><em>倾斜</em><br><strong>加粗</strong><br><em><strong>倾斜加粗</strong></em><br><del>删除线</del></p><h4 id="2-2-分级标题"><a href="#2-2-分级标题" class="headerlink" title="2.2  分级标题"></a>2.2  分级标题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一共六级</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure> <img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/05.png" style="zoom: 67%;" /> <h4 id="2-3-链接"><a href="#2-3-链接" class="headerlink" title="2.3 链接"></a>2.3 链接</h4><p>（1）插入图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片路径 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">![图片描述](图片路径)</span><br><span class="line"><span class="attr">ps</span>: 图片描述可不写</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/01.jpg" alt="举例" style="zoom:25%;" /> <p>（2）自动链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Markdown</span> 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， <span class="title class_">Markdown</span> 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的</span><br></pre></td></tr></table></figure><p><a href="mailto:&#x31;&#54;&#53;&#51;&#49;&#x33;&#x39;&#49;&#x36;&#x31;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;">&#x31;&#54;&#53;&#51;&#49;&#x33;&#x39;&#49;&#x36;&#x31;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p><p><a href="https://badu.com/">https://badu.com</a></p><p>（3）文字链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">行内式链接形式：[超链接文字]( url)</span><br></pre></td></tr></table></figure><h4 id="2-4-分割线"><a href="#2-4-分割线" class="headerlink" title="2.4 分割线"></a>2.4 分割线</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线;</span><br><span class="line">行内不能有其他东西。你也可以在星号或是减号中间插入空格。</span><br><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line">效果是一样的</span><br></pre></td></tr></table></figure><hr><hr><hr><h4 id="2-5-代码块"><a href="#2-5-代码块" class="headerlink" title="2.5 代码块"></a>2.5 代码块</h4><p>（1）行内式：如果在一个行内需要引用代码，只要用反引号&#96;引起来就好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="string">`示例效果`</span></span><br></pre></td></tr></table></figure><p>这是一个<code>示例效果</code></p><p>（2）多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号“&#96;”包裹，就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">console.log(&quot;hello world&quot;)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>（3）代码块里面包含html代码<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理。</p><p><strong>注意：简书代码块里不支持html。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;html&lt;/h5&gt;</span><br></pre></td></tr></table></figure><h5>html</h5><h4 id="2-6-引用"><a href="#2-6-引用" class="headerlink" title="2.6 引用"></a>2.6 引用</h4><p>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</p><p>（1）基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用</span><br></pre></td></tr></table></figure><blockquote><p>这是引用</p></blockquote><p>（2）引用的嵌套使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用的嵌套</span><br><span class="line">&gt;&gt;引用的嵌套</span><br><span class="line"></span><br><span class="line">&gt;&gt;引用的嵌套</span><br><span class="line">&gt;引用的嵌套</span><br></pre></td></tr></table></figure><blockquote><p>引用的嵌套</p><blockquote><p>引用的嵌套</p></blockquote></blockquote><blockquote><blockquote><p>引用的嵌套<br>引用的嵌套</p></blockquote></blockquote><p>（3）引用其它要素<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</p><h4 id="2-7-列表"><a href="#2-7-列表" class="headerlink" title="2.7 列表"></a>2.7 列表</h4><p>（1）无序列表<br>使用 *，+，- 表示无序列表。<br>注意：符号后面一定要有一个<strong>空格</strong>，起到缩进的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 列表文字</span><br><span class="line">- 列表文字</span><br><span class="line">- 列表文字</span><br><span class="line"></span><br><span class="line">* 列表文字</span><br><span class="line">* 列表文字</span><br><span class="line">* 列表文字</span><br><span class="line"></span><br><span class="line">+ 列表文字</span><br><span class="line">+ 列表文字</span><br><span class="line">+ 列表文字</span><br></pre></td></tr></table></figure><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><p>（2）有序列表<br>使用数字和一个英文句点表示有序列表。<br>注意：英文句点后面一定要有一个<strong>空格</strong>，起到缩进的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 列表文字</span><br><span class="line"><span class="number">2.</span> 列表文字</span><br><span class="line"><span class="number">3.</span> 列表文字</span><br></pre></td></tr></table></figure><ol><li>列表文字</li><li>列表文字</li><li>列表文字</li></ol><p>（3）列表和其它要素混合使用<br>列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。</p><p>（4）注意事项<br>在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2002.</span> <span class="number">05</span>. <span class="number">01</span></span><br><span class="line"></span><br><span class="line"><span class="number">2002</span>\. <span class="number">05</span>\. <span class="number">01</span></span><br></pre></td></tr></table></figure><ol start="2002"><li><ol start="5"><li>01</li></ol></li></ol><p>2002. 05. 01</p><h4 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h4><p>表格的基本写法很简单，就跟表格的形状很相似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 学号 | 姓名 | 分数 |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">| 小明 | 男   | <span class="number">88</span>   |</span><br></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>88</td></tr></tbody></table><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 学号 | 姓名  | 分数 |</span><br><span class="line">| :--- | :---: | ---: |</span><br><span class="line">| 小明 |  男   |   <span class="number">88</span> |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">学号</th><th align="center">姓名</th><th align="right">分数</th></tr></thead><tbody><tr><td align="left">小明</td><td align="center">男</td><td align="right">88</td></tr></tbody></table><hr><h3 id="3、-常用技巧"><a href="#3、-常用技巧" class="headerlink" title="3、 常用技巧"></a>3、 常用技巧</h3><h4 id="3-1-换行"><a href="#3-1-换行" class="headerlink" title="3.1 换行"></a>3.1 换行</h4><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：</p><h4 id="3-2-缩进字符"><a href="#3-2-缩进字符" class="headerlink" title="3.2 缩进字符"></a>3.2 缩进字符</h4><p>不断行的空白格  或  半角的空格   或  全角的空格   或   </p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/02.png" style="zoom:80%;" />  <h4 id="3-3-特殊符号"><a href="#3-3-特殊符号" class="headerlink" title="3.3 特殊符号"></a>3.3 特殊符号</h4><p>（1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/03.png" style="zoom:80%;" />  <p>（2）其他特殊字符，示例如下：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/04.png"  /> <p>字符对应的Unicode码：<a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p><h4 id="3-4-链接的高级操作"><a href="#3-4-链接的高级操作" class="headerlink" title="3.4 链接的高级操作"></a>3.4 链接的高级操作</h4><h6 id="（1）参考式链接"><a href="#（1）参考式链接" class="headerlink" title="（1）参考式链接"></a>（1）参考式链接</h6><p>在文档要插入图片的地方写<code>![图片或网址链接][标记]</code>，在文档的最后写上[标记]:图片地址 “标题”。（最后这个”标题”可以不填写）</p><h6 id="（2）内容目录"><a href="#（2）内容目录" class="headerlink" title="（2）内容目录"></a>（2）内容目录</h6><p>在段落中填写<code> [TOC]</code> 以显示全文内容的目录结构。</p><h6 id="（3）锚点"><a href="#（3）锚点" class="headerlink" title="（3）锚点"></a>（3）锚点</h6><p>锚点其实就是页内超链接。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。</p><p><strong>注意</strong>：在简书中使用锚点时，点击会打开一个新的当前页面，虽然锚点用的不是很舒服，但是可以用注脚实现这个功能。</p><p><strong>语法说明：</strong><br>在你准备跳转到的指定标题后插入锚点</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
