<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>王道计算机网络</title>
      <link href="/2023/05/03/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/05/03/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV19E411D78Q?t=2.3">【王道考研计算机网络】</a></p><h2 id="第一章、计算机网络概述">第一章、计算机网络概述</h2><h3 id="1、概念、组成、功能和分类">1、概念、组成、功能和分类</h3><ul><li><u><strong>计算机网络的概念</strong></u></li></ul><p>计算机网络：是一个将分散的、具有独立功能的<strong>计算机系统</strong>，通过<strong>通信设备</strong>与<strong>线路</strong>连接起来，由功能完善的<strong>软件</strong>实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_22-35-11.png" alt=""></p><p>计算机网络是<strong>互连的</strong>、<strong>自治的</strong>计算机集合。</p><p><strong>互连</strong>-互联互通通信链路</p><p><strong>自治</strong>-无主从关系</p><hr><ul><li><u><strong>计算机网络的功能</strong></u></li></ul><ol><li><strong>数据通信</strong>：数据可以在信道上传输，保证了不同主机的<strong>连通性</strong>。</li><li><strong>资源共享</strong>：硬件资源、软件资源、数据资源。</li><li><strong>分布式处理</strong>：多台计算机各自承担同一工作的不同部分。常见分布式处理平台：<strong>hadoop</strong></li><li><strong>提高可靠性</strong>：一台主机宕机了，不会影响其他链路。</li><li><strong>负载均衡</strong>：分布式处理的效果，多台计算机一起工作，工作任务均衡分配。</li></ol><hr><ul><li><u><strong>计算机网络的组成</strong></u></li></ul><ol><li><strong>组成部分</strong>：硬件（如下图）、软件、协议</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_22-53-46.png" alt=""></p><ol start="2"><li><p><strong>工作方式</strong>：</p><ul><li>边缘部分（主机）：用户直接使用：c/s方式、P2P对等方式</li><li>核心部分（路由器、网络）：为边缘模式服务</li></ul></li><li><p><strong>功能组成</strong>：</p><ul><li>通信子网：实现<strong>数据通信</strong></li><li>资源子网：实现<strong>资源共享</strong>/数据处理</li></ul></li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_23-05-46.png" alt=""></p><hr><ul><li><u><strong>计算机网络的分类</strong></u></li></ul><ol><li><p>按分布范围分：广域网WAN（<strong>交换技术</strong>）、城域网MAN、局域网LAN（<strong>广播技术</strong>）、个人区域网PAN</p></li><li><p>按使用者分：</p><ul><li>公用网：中国电信</li><li>专用网：军队、政府等等</li></ul></li><li><p>按交换技术分：报文交换、分组交换、电路交换</p></li><li><p>按拓扑结构分：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_23-15-29.png" alt=""></p></li><li><p>按传输技术分：</p><ul><li><strong>广播式网络</strong>：共享公共通信信道</li><li><strong>点对点网络</strong>：使用<strong>分组存储转发</strong>和<strong>路由选择</strong>机制</li></ul></li></ol><hr><h3 id="2、标准化工作以及相关组织">2、标准化工作以及相关组织</h3><ul><li><u><strong>标准的分类</strong></u><ul><li>法定标准：由权威机构制定的正式的、合法的标准。例如：<strong>OSI</strong></li><li>事实标准：某些公司的产品在竞争中占据了主流时间长了，这些产品中的协议和技术就成了标准，例如：<strong>TCP/IP</strong></li></ul></li></ul><hr><ul><li><u><strong>RFC</strong>( Request For Comments )——因特网标准的形式</u></li></ul><p>RFC要上升为因特网正式标准的<strong>四个阶段</strong>:</p><ol><li>因特网草案(Internet Draft) 这个阶段还不是RFC文档</li><li>建议标准(Proposed standard) 从这个阶段开始成为RFC文档。</li><li>草案标准(Draft Standard)：2011年取消</li><li>因特网标准(Internet Standard )：通过IETF、IAB审核后</li></ol><hr><ul><li><u><strong>相关组织</strong></u></li></ul><p><strong>国际标准准化组织ISO</strong>：OSI参考模型、HDLC协议<br><strong>国际电信联盟ITU</strong>：制定通信规则<br><strong>国际电气电子工程师协会IEEE</strong>：学术机构、IEEE802系列标准、5G<br><strong>Internet工程任务组IETF</strong>：负责因特网相关标准的制定，通过后有<code>RFC XXXX</code>编号</p><hr><h3 id="3、速率相关的性能指标">3、速率相关的性能指标</h3><ul><li><u><strong>速率</strong></u></li></ul><p>连接在计算机网络上的主机在数字信道上传送数据<strong>位数的速率</strong>。</p><p>单位是：<strong>b/s，kb/s，Mb/s，Gb/s，Tb/s</strong></p><p><strong>速率</strong>：<br>千 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1kb/s=10^3b/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal">kb</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span><br>兆 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>M</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1Mb/s=10^3kb/s=10^6b/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathnormal">kb</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span><br>吉 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>G</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mi>M</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1Gb/s=10^3Mb/s=10^6kb/s=10^9b/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal">G</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord mathnormal">kb</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span><br>太 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>T</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mi>G</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi>M</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1Tb/s=10^3Gb/s=10^6Mb/s=10^9kb/s=10^{12}b/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathnormal">G</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mord mathnormal">kb</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></p><p><strong>存储容量</strong>：1 Byte（字节）= 8 bit（比特）<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>K</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mi>B</mi><mo>=</mo><mn>1024</mn><mi>B</mi><mo>=</mo><mn>1024</mn><mo>×</mo><mn>8</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">1KB=2^{10}B=1024B=1024 \times 8b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1024</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1024</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">8</span><span class="mord mathnormal">b</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>M</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mi>K</mi><mi>B</mi><mo>=</mo><mn>1024</mn><mi>K</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">1MB=2^{10}KB=1024KB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.05017em;">MB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1024</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>G</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mi>M</mi><mi>B</mi><mo>=</mo><mn>1024</mn><mi>M</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">1GB=2^{10}MB=1024MB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">MB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1024</span><span class="mord mathnormal" style="margin-right:0.05017em;">MB</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>T</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mi>G</mi><mi>B</mi><mo>=</mo><mn>1024</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">1TB=2^{10}GB=1024GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.05017em;">TB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1024</span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span></span></span></span></p><hr><ul><li><u><strong>带宽</strong></u></li></ul><ol><li><p>“<strong>带宽</strong>”原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹 (HZ)</p></li><li><p>计算机网络中，<strong>带宽</strong>用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”。单位是“比特每秒”，b/s，kb/s，Mb/s，Gb/s。</p><p>简单地说：<strong>网络设备所支持的最高速度</strong></p></li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_23-50-56.png" alt=""></p><hr><ul><li><u><strong>吞吐量</strong></u></li></ul><p>表示在<strong>单位时间</strong>内通过<strong>某个网络(或信道、接口)</strong> 的数据量。单位b/s，kb/s，Mb/s等。<br>吞吐量受网络的带宽或网络的额定速率的限制。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-28_23-57-13.png" alt=""></p><hr><h3 id="4、时延、时延带宽积、RTT和利用率">4、时延、时延带宽积、RTT和利用率</h3><ul><li><u><strong>时延</strong></u></li></ul><p>指数据(报文/分组/比特流)从网络(或链路)的一端传送到另一端所需的时间。也叫<strong>延迟</strong>或<strong>迟延</strong>。单位是s。</p><p>分为：</p><ol><li><p><strong>发送时延（传输时延）</strong></p><p>从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间。（高速链路）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>发送时延</mtext><mo>=</mo><mfrac><mtext>数据长度</mtext><mrow><mtext>信道带宽</mtext><mo stretchy="false">(</mo><mtext>发送速率</mtext><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">发送时延=\frac{数据长度}{信道带宽(发送速率)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">发送时延</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3923em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">信道带宽</span><span class="mopen mtight">(</span><span class="mord cjk_fallback mtight">发送速率</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">数据长度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p><strong>传播时延</strong></p><p>取决于电磁波的传播速度和链路长度</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>传播时延</mtext><mo>=</mo><mfrac><mtext>信道长度</mtext><mtext>电磁波在信道上的传播速率</mtext></mfrac></mrow><annotation encoding="application/x-tex">传播时延=\frac{信道长度}{电磁波在信道上的传播速率}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">传播时延</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">电磁波在信道上的传播速率</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">信道长度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p><strong>排队时延</strong></p><p>等待输出或输入链路可用</p></li><li><p><strong>处理时延</strong></p><p>检错，找出口</p></li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_00-31-17.png" alt=""></p><hr><ul><li><u><strong>时延带宽积</strong></u></li></ul><p>时延带宽积（bit） = 传播时延（s） X 带宽（b/s）</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_00-43-57.png" alt=""></p><p>时延带宽积又称为以<strong>比特为单位的链路长度</strong>。即“某段链路现在有多少比特（容量）”。</p><hr><ul><li><u><strong>往返时延RTT</strong></u></li></ul><p>从发送方发送数据开始，到发送方收到接收方的确认(接收方收到数据后立即发送确认)，总共经历的时延。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_00-52-09.png" alt=""></p><p>RTT越大（期间的时间越长），在收到确认之前，可以发送的数据越多</p><p><strong>RTT包括</strong>：</p><ol><li>往返传播时延=传播时延*2</li><li>末端处理时间（看题目要求是否需要考虑）</li></ol><hr><ul><li><u><strong>利用率</strong></u></li></ul><p>分为：</p><ol><li><strong>信道利用率</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>有数据通过时间</mtext><mrow><mo stretchy="false">(</mo><mtext>有</mtext><mo>+</mo><mtext>无</mtext><mo stretchy="false">)</mo><mtext>数据通过时间</mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{有数据通过时间}{(有+无)数据通过时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3923em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord cjk_fallback mtight">有</span><span class="mbin mtight">+</span><span class="mord cjk_fallback mtight">无</span><span class="mclose mtight">)</span><span class="mord cjk_fallback mtight">数据通过时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">有数据通过时间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><strong>网络利用率</strong>：信道利用率加权平均值</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_00-56-20.png" alt=""></p><hr><h3 id="5、分层协议、协议、接口、服务">5、分层协议、协议、接口、服务</h3><ul><li><u><strong>为什么要分层？</strong></u></li></ul><p>发送文件前要完成的工作：<br>(1)发起通信的计算机必须将数据通信的通路进行激活。<br>(2)要告诉网络如何识别目的主机。<br>(3)发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。<br>(4)发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。<br>(5)确保差错和意外可以解决。<br>。。。。。</p><p>计算机：大问题 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span> 小问题1、小问题2、…</p><hr><ul><li><u><strong>怎么分层</strong></u></li></ul><p>举例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-16-49.png" alt=""></p><hr><ul><li><u><strong>分层结构</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-24-42.png" alt=""></p><ol><li><strong>实体</strong>：第n层中的活动元素称为<strong>n层实体</strong>。同一层的实体叫<strong>对等实体</strong></li><li><strong>协议</strong>：为进行网络中的<strong>对等实体</strong>数据交换而建立的规则、标准或约定称为网络协议。【水平】<ul><li>语法：规定传输数据的格式</li><li>语义：规定所要完成的功能</li><li>同步：规定各种操作的顺序</li></ul></li><li><strong>接口(访问服务点SAP)</strong> ：上层使用下层服务的入口。</li><li><strong>服务</strong>：下层为相邻上层提供的功能调用。【垂直】</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-28-03.png" alt=""></p><p><strong>SDU服务数据单元</strong>：为完成用户所要求的功能而应传送的数据。</p><p><strong>PCI协议控制信息</strong>：控制协议操作的信息。</p><p><strong>PDU协议数据单元</strong>：对等层次之间传送的数据单位。</p><hr><ul><li><u><strong>概念总结</strong></u></li></ul><p>网络体系结构是从<strong>功能</strong>上描述计算机网络结构。</p><p>计算机网络体系结构简称网络体系结构是<strong>分层结构</strong>。</p><p>每层遵循某个/些<strong>网络协议</strong>以完成本层功能。</p><p><strong>计算机网络体系结构</strong>是计算机网络的<strong>各层及其协议</strong>的集合。</p><p>第n层在向n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</p><p>仅仅在<strong>相邻层间有接口</strong>，且所提供服务的具体实现细节对上一层完全屏蔽。</p><p>体系结构是<strong>抽象</strong>的，而实现是指能运行的一些软件和硬件。</p><hr><h3 id="6、OSI参考模型（1）">6、OSI参考模型（1）</h3><p>计算机网络分层结构：</p><ul><li><strong>7层</strong>OSI参考模型（法定标准）</li><li><strong>4层</strong>TCP/IP参考模型（事实标准）</li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span> <strong>5层</strong>的体系结构</p><hr><ul><li><u><strong>ISO/OSI参考模型怎么来的</strong></u></li></ul><p>为了解决计算机网络复杂的大问题 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span> 分层结构(按<strong>功能</strong>)</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-39-09.png" alt=""></p><p>目的：支持异构网络系统的互联互通</p><p>国际标准化组织(<strong>ISO</strong>)于1984年提出开放系统互连 (<strong>OSI</strong>) 参考模型。<strong>但是！理论成功，市场失败</strong>。</p><hr><ul><li><u><strong>ISO/OSI参考模型</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-42-24.png" alt=""></p><hr><ul><li><u><strong>ISO/OSI参考模型解释通信过程</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-55-08.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-55-28.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_01-55-32.png" alt=""></p><hr><h3 id="7、OSI参考模型（2）">7、OSI参考模型（2）</h3><ul><li><u><strong>应用层</strong></u></li></ul><p>所有能和用户交互产生网络流量的程序。（用户与网络的界面）</p><p>典型应用层服务：文件传输(FTP)、电子邮件(SMTP)、万维网(HTTP)、…</p><hr><ul><li><u><strong>表示层</strong></u></li></ul><p>用于处理在两个通信系统中交换信息的表示方式（语法和语义）</p><p><strong>功能一：数据格式变换</strong>（翻译官)</p><p><strong>功能二：数据加密解密</strong></p><p><strong>功能三：数据压缩和恢复</strong></p><p>主要协议(考研不考)：JPEG、ASCII</p><hr><ul><li><u><strong>会话层</strong></u></li></ul><p>向表示层实体/用户进程<strong>提供建立连接</strong>并在连接上<strong>有序</strong>地<strong>传输</strong>数据。</p><p>这就是会话，也是<strong>建立同步</strong>（SYN）</p><p><strong>功能一</strong>：建立、管理、终止会话。</p><p><strong>功能二</strong>：使用校验点可使会话在通信失效时从校验点/同步点继续恢复通信，实现数据同步。（适用于传输大文件）</p><p>主要协议(考研不考)：ADSP、ASP</p><hr><ul><li><u><strong>传输层</strong></u></li></ul><p>负责主机中<strong>两个进程</strong>的通信，即<strong>端到端</strong>的通信。传输单位是报文段或用户数据报。</p><p><strong>功能一：可靠传输</strong> （确认，重发）、<strong>不可靠传输</strong>（不确认，不重发）</p><p><strong>功能二：差错控制</strong></p><p><strong>功能三：流量控制</strong></p><p><strong>功能四：复用分用</strong>（复用：多个应用层进程可同时使用下面运输层的服务。分用：运输层把收到的信息分别交付给上面应用层中相应的进程）</p><p>主要协议: TCP、UDP</p><hr><ul><li><u><strong>网络层</strong></u></li></ul><p>主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上的不同主机提供通信服务。<br>网络层传输单位是<strong>数据报</strong>。</p><p><strong>功能一：路由选择</strong> 选择最佳路径</p><p><strong>功能二：流量控制</strong></p><p><strong>功能三：差错控制</strong></p><p><strong>功能四：拥塞控制</strong>（若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于<strong>拥塞</strong>状态。因此要采取一定措施缓解这种拥塞）</p><p>主要协议:IP、IPX、ICMP、IGMP、ARP、RARP、OSPF</p><hr><ul><li><u><strong>数据链路层</strong></u></li></ul><p>主要任务是把网络层传下来的数据报<strong>组装成帧</strong>。</p><p>数据链路层/链路层的传输单位是<strong>帧</strong></p><p><strong>功能一：成帧(定义的开始和结束)</strong>…1000011101010101…</p><p><strong>功能二：差错控制</strong> 帧错+位错</p><p><strong>功能三：流量控制</strong></p><p><strong>功能四：访问(接入)控制</strong> 控制对信道的访问</p><p>主要协议：SDLC、HDLC、PPP、STP</p><hr><ul><li><u><strong>物理层</strong></u></li></ul><p>主要任务是在<strong>物理媒体</strong>上实现比特流的<strong>透明传输</strong>。</p><p>物理层传输单位是<strong>比特</strong></p><p><strong>透明传输</strong>：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</p><p><strong>功能一：定义接口特性</strong></p><p><strong>功能二：定义传输模式</strong> 单工、半双工、双工</p><p><strong>功能三：定义传输速率</strong></p><p><strong>功能四：比特同步</strong></p><p><strong>功能五：比特编码</strong></p><p>主要协议：Rj45、802.3</p><hr><h3 id="8、TCP、IP参考模型和5层参考模型">8、TCP、IP参考模型和5层参考模型</h3><ul><li><u><strong>OSI参考模型与TCP/IP模型</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_09-32-41.png" alt=""></p><hr><ul><li><u><strong>OSI参考模型与TCP/IP模型相同点</strong></u></li></ul><ol><li><p>都分层</p></li><li><p>基于独立的协议栈的概念</p></li><li><p>可以实现异构网络互联</p></li></ol><hr><ul><li><u><strong>OSI参考模型与TCP/IP模型不同点</strong></u></li></ul><ol><li><p>OSI定义<strong>三</strong>点:服务、协议、接口</p></li><li><p>OSI<strong>先</strong>出现，参考模型先于协议发明，不偏向特定协议</p></li><li><p>TCP/IP设计之初就考虑到异构网<strong>互联</strong>问题，将IP作为重要层次</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ISO/OSI</th><th style="text-align:center">TCP/IP</th></tr></thead><tbody><tr><td style="text-align:center">网络层</td><td style="text-align:center">无连接 + 面向连接</td><td style="text-align:center">无连接</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">无连接</td><td style="text-align:center">无连接 + 面向连接</td></tr></tbody></table><p><strong>面向连接</strong>分为三个阶段，第一是建立连接，在此阶段，发出一个建立连接的请求。只有在连接成功建立之后，才能开始数据传输，这是第二阶段接着，当数据传输完毕，必须释放连接。而面向<strong>无连接</strong>没有这么多阶段，它直接进行数据传输。</p></li></ol><hr><ul><li><u><strong>5层参考模型</strong></u></li></ul><p>综合了OSI和TCP/IP的优点</p><p>应用层：支持各种网络应用。FTP、SMTP、HTTP</p><p>传输层：进程-进程的数据传输。TCP、UDP</p><p>网络层：源主机到目的主机的数据分组路由与转发。IP、ICMP、OSPF等</p><p>数据链路层：把网络层传下来的数据报组装成帧。Ethernet、PPP</p><p>物理层：比特传输</p><hr><ul><li><u><strong>5层参考模型的数据封装与解封装</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_09-47-53.png" alt=""></p><hr><h2 id="第二章、物理层">第二章、物理层</h2><h3 id="1、物理层基本概念">1、物理层基本概念</h3><p>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是指具体的传输媒体。</p><p>物理层主要任务：确定与传输媒体<strong>接口</strong>有关的一些特性 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span> <strong>定义标准</strong></p><ol><li><p><strong>机械特性</strong>：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、<strong>引线数目</strong>、<strong>引脚数量</strong>和排列情况。</p></li><li><p><strong>电气特性</strong>：规定传输二进制位时，线路上信号的<strong>电压范围</strong>、阻抗匹配、传输<strong>速率</strong>和<strong>距离</strong>限制等.</p></li><li><p><strong>功能特性</strong>：指明某条线上出现的<strong>某一电平表示何种意义</strong>，接口部件的信号线的用途</p><p>举例：某网络在物理层规定，信号的电平用+10V ~ +15V表示二进制0，用-10V ~ -15V表示二进制1，电线长度限定=15m以内</p></li><li><p><strong>规程特性</strong>：（过程特性）定义各条物理线路的工作<strong>规程和时序</strong>关系</p><p>举例：描述一个物理层接口引脚处于高电平时的含义时</p></li></ol><hr><h3 id="2、数据通信的基础知识">2、数据通信的基础知识</h3><ul><li><u><strong>典型的数据通信模型</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_10-20-55.png" alt=""></p><hr><ul><li><u><strong>数据通信的相关术语</strong></u></li></ul><p>通信的<strong>目的</strong>是传送消息<br><strong>数据</strong>：传送信息的实体，通常是有意义的符号序列。<br><strong>信号</strong>：数据的电气/电磁的表现，是数据在传输过程中的存在形式。<br>  <strong>数字信号</strong>：代表消息的参数取值是<strong>离散的</strong>。<br>  <strong>模拟信号</strong>：代表消息的参数取值是<strong>连续的</strong>。</p><p><strong>信源</strong>：产生和发送数据的源头。<br><strong>信宿</strong>：接收数据的终点。<br><strong>信道</strong>：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。<br>  按传输信号分：<strong>模拟信道 (传送模拟信号)</strong> 、<strong>数字信道 (传送数字信号 )</strong><br>  按传输介质分：<strong>无线信道</strong>、<strong>有线信道</strong></p><hr><ul><li><u><strong>三种通信方式</strong></u></li></ul><p>从通信双方信息的交互方式看，可以有三种基本方式:</p><ol><li><p><strong>单工通信</strong>：只有一个方向的通信而没有反方向的交互，仅需要一条信道。</p></li><li><p><strong>半双工通信</strong>：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道。</p></li><li><p><strong>全双工通信</strong>：通信双方可以同时发送和接受信息，也需要两条信道。</p></li></ol><hr><ul><li><u><strong>两种数据传输方式</strong></u></li></ul><ol><li><strong>串行传输</strong>：速度<strong>慢</strong>，费用<strong>低</strong>，适合<strong>远</strong>距离</li><li><strong>并行传输</strong>：速度<strong>快</strong>，费用<strong>高</strong>，适合<strong>近</strong>距离用于计算机内部数据传输</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_10-34-54.png" alt=""></p><hr><h3 id="3、码元、速率、波特、带宽">3、码元、速率、波特、带宽</h3><ul><li><u><strong>码元</strong></u></li></ul><p><strong>码元</strong>是指用一个<strong>固定时长</strong>的<strong>信号波形</strong>(数字脉冲)，代表不同离散数值基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为<strong>k进制码元</strong>，而该时长称为<strong>码元宽度</strong>。当码元的离散状态有M个时 (M大于2)，此时码元为M进制码元。</p><p><strong>1码元可以携带多个比特的信息量</strong>。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_10-43-46.png" alt=""></p><p>K进制码元一4进制码元：码元的离散状态有4个，4种高低不同的信号波形 00、01、10、11，1码元2比特。</p><hr><ul><li><u><strong>速率、波特、带宽</strong></u></li></ul><p>速率也叫数据率，是指数据的<strong>传输速率</strong>，表示单位时间内传输的数据量。可以用<strong>码元传输速率</strong>和<strong>信息传输速率</strong>表示</p><ol><li><p><strong>码元传输速率</strong>：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数(也可称为<strong>脉冲个数</strong>或<strong>信号变化的次数</strong>)，<strong>单位是波特 (Baud)</strong>。1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。</p><p>简单讲就是：<strong>1s 传输多少个码元</strong>。1 Baud = 1 码元/s</p></li><li><p><strong>信息传输速率</strong>：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数(即比特数)，单位是 比特/秒 (b/s)。</p><p>简单讲就是：1s传输多少个比特</p></li></ol><p><strong>关系</strong>：若一个码元携带 n bit的信息量，则 M Baud的码元传输速率所对应的信息传输速率为 M X n bit/s.</p><p><strong>带宽</strong>：表示在单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”，常用来表示网络的通信线路所能传输数据的能力。单位是 b/s。</p><hr><ul><li><u><strong>练习题</strong></u></li></ul><p>某一数字通信系统传输的是四进制码元，4s传输了8000个码元，求系统的码元传输速率是多少？信息传输速率是多少？若另一通信系统传输的是十六进制码元，6s传输了7200个码元。求他的码元传输速率是多少？信息传输速率是多少？并指出哪个系统传输速率快？</p><p><strong>答案</strong>：2000Baud，4000b/s；1200Baud，4800b/s；十六进制更快</p><p><strong>解析</strong>：</p><p>四进制码元系统:<br>码元传输速率就是 8000 / 4 = 2000 Baud，信息传输速率就是2000<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>4</mn></mrow><annotation encoding="application/x-tex">\times log_24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">×</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">4</span></span></span></span> = 4000 b/s</p><p>十六进制码元系统:<br>码元传输速率就是 7200 / 6 = 1200 Baud，信息传输速率就是1200<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>16</mn></mrow><annotation encoding="application/x-tex">\times log_216</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">×</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">16</span></span></span></span> = 4800 b/s<br>系统传输的是<strong>比特流</strong>，通常比较的是信息传输速率，所以传输十六进制码元的通信系统传输速率较快，<strong>如果用该系统去传输四进制码元会有更高的码元传输速率。</strong></p><hr><h3 id="4、奈氏准则和香农定理">4、奈氏准则和香农定理</h3><ul><li><u><strong>失真</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_11-08-52.png" alt=""></p><p>影响失直程度的因素：正相关（1、<strong>码元传输速率</strong> 2、<strong>信号传输距离</strong> 3、<strong>噪声干扰</strong>）， 负相关（4、<strong>传输媒体质量</strong>）</p><hr><ul><li><u><strong>失真的一种现象——码间串扰</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_11-15-08.png" alt=""></p><p><strong>信道带宽</strong>是信道能通过的<strong>最高频率和最低频率之差</strong>。3300Hz-300Hz=3000Hz</p><p>200HZ不能通过的原因：频率太低了，衰减后就无法识别了</p><p>4000HZ不能通过的原因：码间串扰</p><p><strong>码间串扰</strong>：接收端收到的信号波形<strong>失去了码元之间清晰界限</strong>的现象</p><hr><ul><li><u><strong>奈氏准则（奈奎斯特定理）</strong></u></li></ul><p>奈氏准则：在理想低通(无噪声，带宽受限)条件下，为了避免码间串扰，限码元传输速率为 <strong>2W Baud</strong>，W是信道带宽，单位是Hz。</p><p><strong>只有在这两个公式，带宽单位才用Hz! !</strong></p><p>为了混淆学生，会在求一步极限数据率：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_11-27-01.png" alt=""></p><p>结论：</p><ol><li>在任何信道中，<strong>码元传输的速率是有上限的</strong>。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。</li><li>信道的<strong>频带越宽</strong>(即能通过的信号高频分量越多)，就可以用更高的速率进行码元的有效传输</li><li><strong>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</strong>。</li><li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。</li></ol><p><strong>例题</strong>：在无噪声的情况下，若某通信链路的带宽为3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的<strong>最大</strong>数据传输率是多少?</p><p>解析：</p><p>信号有 4 x 4 = 16 种变化<br>最大数据传输率 = 2 x 3k  x <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>16</mn></mrow><annotation encoding="application/x-tex">log_216</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">16</span></span></span></span> =24 kb/s</p><hr><ul><li><u><strong>香农定理</strong></u></li></ul><p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_11-47-30.png" alt=""></p><p>结论：</p><ol><li><p>信道的<strong>带宽</strong>或信道中的<strong>信噪比</strong>越大，则信息的极限传输速率就<strong>越高</strong>。</p></li><li><p>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了。</p></li><li><p>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现<strong>无差错的传输</strong>。</p></li><li><p>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</p></li><li><p>从香农定理可以看出，若信道带宽W或信噪比S/N没有上限(不可能），那么信道的极限信息传输速率也就没有上限。</p></li></ol><p><strong>例题</strong>：电话系统的典型参数是信道带宽为3000Hz，信噪比为30dB，则该系统最大数据传输速率是多少?</p><p>解析：</p><p>30 dB = 10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">log_{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (S/N)<br>则 S/N = 1000<br>信道的极限数据传输速率 = W <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">log_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (1 + S/N) = 3000 x <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">log_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(1 + 1000) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4831em;"></span><span class="mrel">≈</span></span></span></span> 30 kb/s</p><hr><ul><li><u><strong>两个定理如何选择</strong></u></li></ul><p>缺少计算条件的，直接不考虑；如果都可以计算则都计算，然后比较结果大小。</p><p><strong>例题</strong>： 进制信号在信噪比为127:1的4kHz信道上传输，最大的数据速率可达到多少?</p><p>解析：</p><p>奈氏准则: 2 X 4000 X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>2</mn></mrow><annotation encoding="application/x-tex">log_2{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span></span></span></span></span> = 8000 b/s<br>香农定理: 4000 X  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>127</mn><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">log_2{(1 + 127)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mclose">)</span></span></span></span></span> = 28000 b/s<br>选择较小的 8000 b/s</p><hr><h3 id="5、编码和调制（1）">5、编码和调制（1）</h3><ul><li><u><strong>基带信号与宽带信号</strong></u></li></ul><p><strong>信道</strong>：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。<br>  按传输信号分：<strong>模拟信道 (传送模拟信号)</strong> 、<strong>数字信道 (传送数字信号 )</strong><br>  按传输介质分：<strong>无线信道</strong>、<strong>有线信道</strong></p><p>信道上传送的信号：</p><ol><li><p><strong>基带信号</strong>：<br>将数字信号1和0直接用两种不同的电压表示，再送到<strong>数字信道</strong>上去传输(<strong>基带传输</strong>)。来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的<strong>直接表达了要传输的信息的信号</strong>，比如我们说话的声波就是基带信号。</p></li><li><p><strong>宽带信号</strong>：</p><p>将基带信号进行调制后形成的频分复用模拟信号，再传送到<strong>模拟信道</strong>上去传输(<strong>宽带传输</strong>)。把基带信号经过<strong>载波调制</strong>后，把信号的<strong>频率范围搬移</strong>到<strong>较高的频段</strong>以便在信道中传输(即仅在一段频率范围内能够通过信道)。</p></li></ol><p>在传输距离较近时，计算机网络采用基带传输方式(近距离衰减小，从而信号内容不易发生变化)。</p><p>在传输距离较远时，计算机网络采用宽带传输方式(远距离衰减大，即使信号变化大也能最后过滤出来基带信号）。</p><hr><ul><li><u><strong>编码与调制</strong></u></li></ul><p><strong>编码</strong>：数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 数字信号</p><p><strong>调制</strong>：数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 模拟信号</p><p>数字数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>数字发送器</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{数字发送器}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">数字发送器</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 数字信号（编码）</p><p>数字数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>调制器</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{调制器}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">调制器</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 模拟信号（调制）</p><p>模拟数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>P</mi><mi>C</mi><mi>M</mi><mtext>编码器</mtext></mrow></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{PCM编码器}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">PCM</span><span class="mord cjk_fallback mtight">编码器</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 数字信号（编码）</p><p>模拟数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>放大器调制器</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{放大器调制器}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">放大器调制器</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 模拟信号（调制）</p><hr><h3 id="6、编码和调制（2）">6、编码和调制（2）</h3><ul><li><u><strong>数字数据编码为数字信号</strong></u></li></ul><ol><li><p><strong>非归零编码</strong>【<strong>NRZ</strong>】<br>高1低0<br>编码容易实现，但没有检错功能且无法判断一个码元的开始和结束，以至于收发双方难以保持同步</p></li><li><p><strong>曼切斯特编码</strong></p><p>将一个码元分成两个相等的间隔前一个间隔为低电平后一个间隔为高电平表示码元1；码元0则正好相反。也可以采用相反的规定该编码的特点是在每一个码元的中间出现电平跳变，位中间的跳变既作时钟信号(可用于同步)，又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。<strong>所以数据传输速率只有调制速率的1/2</strong>。</p></li><li><p><strong>差分曼切斯特编码</strong></p><p>同1异0<br>常用于局域网传输，其规则是：若码元为1，则前半个码元的电平与上一个码元的后半个码元的电平相同，若为0，则相反。该编码的特点是，在每个码元的中间,都有一次电平的跳转，可以实现自同步，且<strong>抗干扰性强于彻斯特编码</strong>。</p></li><li><p>归零编码【RZ】</p><p>信号电平在一个码元之内都要恢复到零的这种编码成编码方式。</p></li><li><p>反向不归零编码【NRZI】</p><p>信号电平翻转表示0，信号电平不变表示1。</p></li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_14-30-30.png" alt=""></p><ol start="6"><li><p>4B/5B编码</p><p>比特流中插入额外的比特以打破一连串的0或1，就是用5个比特来编码4个比特的数据，之后再传给接收方，因此称为4B/5B。编码效率为80%。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_14-34-27.png" alt=""></p><p>只采用16种对应16种不同的4位码其他的16种作为控制码(的开始和结束，线路的状态信息等)或保留。</p></li></ol><hr><ul><li><u><strong>数字数据编码为模拟信号</strong></u></li></ul><p>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_14-36-45.png" alt=""></p><p>（调幅 + 调相 也叫 正交调幅调相）</p><p>答案：4800 b/s</p><hr><ul><li><u><strong>模拟数据编码为数字信号</strong></u></li></ul><p>计算机内部处理的是二进制数据，处理的都是<strong>数字音频</strong>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列(即实现<strong>音频数字化</strong>)。</p><p>最典型的例子就是对音频信号进行编码的脉码调制(<strong>PCM</strong>)，在计算机应用中，能够达到<strong>最高保真水平</strong>的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的 WAV文件中均有应用、它主要包括三步: 抽样、量化、编码。</p><ol><li><strong>抽样</strong>：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mtext>采样频率</mtext></msub><mo>≥</mo><mn>2</mn><msub><mi>f</mi><mtext>信号最高频率</mtext></msub></mrow><annotation encoding="application/x-tex">f_{采样频率} \ge 2f_{信号最高频率}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">采样频率</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">信号最高频率</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><strong>量化</strong>：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字量。</li><li><strong>编码</strong>：把量化的结果转换为与之对应的二进制编码。</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_14-42-50.png" alt=""></p><hr><ul><li><u><strong>模拟数据编码为模拟信号</strong></u></li></ul><p>为了实现传输的有效性，可能需要较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式：模拟的声音数据是加载到模拟的载波信号中传输的。</p><hr><h3 id="7、物理层传输介质">7、物理层传输介质</h3><ul><li><strong><u>传输介质及分类</u></strong></li></ul><p>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的<strong>物理通路</strong>。</p><p><strong>传输媒体不是物理层</strong>。传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为0层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思但物理层规定了<strong>电气特性</strong>，因此能够识别所传送的比特流。</p><p>传输介质分为：</p><ol><li>导向性传输介质：电磁波被导向沿着固体媒介 (铜线/光纤) 传播。</li><li>非导向性传输介质：自由空间，介质可以是空气、真空、海水等。</li></ol><hr><ul><li><u><strong>导向型传输介质——1、双绞线</strong></u></li></ul><p>双绞线是古老、又最常用的传输介质，它由<strong>两根</strong>采用一定规则并排<strong>绞合</strong>的、相互绝缘的<strong>铜导线</strong>组成。</p><p>为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由金属丝编织成的屏蔽层，这就是<strong>屏蔽双绞线(STP)</strong> ，无屏蔽层的双绞线就称为<strong>非屏蔽双绞线(UTP)</strong> 。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-06-46.png" alt=""></p><p><strong>绞合可以减少对相邻导线的电磁干扰。</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-05-27.png" alt=""></p><p>双绞线价格<strong>便宜</strong>，是最常用的传输介质之一，在局域网和传统电话网中普遍使用。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里。距离太远时，对于<strong>模拟传输</strong>，要用<strong>放大器</strong>放大衰减的信号；对于<strong>数字传输</strong>，要用<strong>中继器</strong>将失真的信号整形。</p><hr><ul><li><u><strong>导向型传输介质——2、同轴电缆</strong></u></li></ul><p>同轴电缆由<strong>导体铜质芯线</strong>、<strong>绝缘层</strong>、<strong>网状编织屏蔽层</strong>和<strong>塑料外层</strong>构成。按特性阻抗数值的不同，通常将同轴电缆分为两类：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>50</mn><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">50\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">50Ω</span></span></span></span>同轴电缆和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>75</mn><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">75\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">75Ω</span></span></span></span>同轴电缆。其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>50</mn><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">50\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">50Ω</span></span></span></span>同轴电缆主要用于传送基带数字信号，又称为<strong>基带同轴电缆</strong>，它在局域网中得到广泛应用：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>75</mn><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">75\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">75Ω</span></span></span></span>同轴电缆主要用于传送宽带信号，又称为<strong>宽带同轴电缆</strong>，它主要用于有线电视系统</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-13-02.png" alt=""></p><p><strong>同轴电缆 VS 双绞线</strong></p><p>由于外导体屏蔽层的作用，同轴电缆<strong>抗干扰特性</strong>比双绞线好，被广泛用于传输较高速率的数据，其<strong>传输距离</strong>更远，但<strong>价格</strong>较双绞线贵。</p><hr><ul><li><u><strong>导向型传输介质——3、光纤</strong></u></li></ul><p>光纤通信就是利用光导纤维(简称光纤)传递<strong>光脉冲</strong>来进行通信。有光脉冲表示1，无光脉冲表示0。而可见光的频率大约是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>MHz，因此光纤通信系统的<strong>带宽远远大于</strong>目前其他各种传输媒体的带宽。</p><p>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲，在接收端用光极管做成光检测器，在检测到光脉冲时可还原出电脉冲。</p><p>光纤主要由 <strong>纤芯(实心的!)</strong> 和<strong>包层</strong>构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，如果入射角足够大，就会出现<strong>全反射</strong>，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-18-45.png" alt=""></p><table><thead><tr><th></th><th>定义</th><th>光源</th><th>特点</th></tr></thead><tbody><tr><td>多模光纤</td><td>有<strong>多种</strong>传输光信号模式的光纤</td><td>发光二极管</td><td><strong>易失真</strong>，适合<strong>近</strong>距离传输</td></tr><tr><td>单模光纤</td><td>一种在<strong>横向模式</strong>直接传输光信号的光纤</td><td><strong>定向</strong>性很好的<strong>激光</strong>二极管</td><td><strong>衰耗小</strong>，适合<strong>远</strong>距离传输</td></tr></tbody></table><p>光纤的特点:</p><ol><li>传输<strong>损耗小</strong>，中继距离长，对远距离传输特别经济。</li><li><strong>抗电和电磁扰性能好</strong>。</li><li>无串音干扰，保密性好，也<strong>不易被窃听或截取数据</strong>。</li><li><strong>体积小，重量轻</strong>。</li></ol><hr><ul><li><u><strong>非导向性传输介质</strong></u></li></ul><p>1、无线电波：信号向<strong>所有方向</strong>传播</p><p>较强<strong>穿透能力</strong>，可传远距离，广泛用于通信领域(如手机通信)。</p><p>2、微波：信号向<strong>固定方向</strong>传播</p><p>微波通信频率较高、频段范，因此数据率很高。</p><p>分类：</p><ol><li><p>地面微波接力通信</p></li><li><p>卫星通信</p><ul><li><p>优点：<br>1、通信容量大</p><p>2、距离远</p><p>3、覆盖广</p><p>4、广播通信和多址通信</p></li><li><p>缺点：</p><p>1、传播时延长 (250-270ms）</p><p>2、受气候影响大 (eg: 强风太阳黑子爆发、日凌)<br>3、误码率较高<br>4、成本高</p></li></ul></li></ol><p>3、红外线、激光：信号向<strong>固定方向</strong>传播</p><p>把要传输的信号分别<strong>转换为各自的信号格式</strong>，即红外光信号和激光信号再在空间中传播。</p><hr><h3 id="8、物理层设备">8、物理层设备</h3><ul><li><u><strong>中继器</strong></u></li></ul><p><strong>诞生原因</strong>：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误。</p><p><strong>中继器的功能</strong>：对信号进行<strong>再生和还原</strong>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-46-18.png" alt=""></p><p><strong>中继器的两端</strong>：</p><ol><li>两端的网络部分是网段，而不是子网，适用于完全相同的<strong>两类</strong>网络的互连，且两个网段速率要相同。</li><li>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据。</li><li>两端可连相同媒体，也可连不同媒体。</li><li>中继器两端的网段一定要是同一个协议。 (中继器不会存储转发，傻)</li></ol><p><strong>5-4-3规则</strong>：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障.</p><ol><li>不超过5个网段</li><li>最多有4个物理层网络设备（中继器、集线器）</li><li>只有三个段可以挂接计算机</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-51-38.png" alt=""></p><hr><ul><li><u><strong>集线器</strong></u></li></ul><p><strong>集线器的功能</strong>：对信号进行<strong>再生放大转发</strong>，对衰减的信号进行放大，接着转发到其他所有(除输入端口外)处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_15-53-44.png" alt=""></p><p>集线器不能分割冲突域。</p><p>连在集线器上的工作主机平分宽带。</p><hr><h2 id="第三章、数据链路层">第三章、数据链路层</h2><h3 id="1、数据链路层功能概述">1、数据链路层功能概述</h3><ul><li><u><strong>数据链路层的基本概念</strong></u></li></ul><p><strong>数据链路层</strong>负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p><p><strong>结点</strong>：主机、路由器。</p><p><strong>链路</strong>：网络中两个结点之间的<strong>物理通道</strong>，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。</p><p><strong>数据链路</strong>：网络中两个结点之间的<strong>逻辑通道</strong>，把实现控制数据传输<strong>协议</strong>的硬件和软件加到链路上就构成数据链路。</p><p><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报。</p><hr><ul><li><u><strong>数据链路层的功能概述</strong></u></li></ul><p>数据链路层在物理层提供服务的基础上<strong>向网络层提供服务</strong>，其最基本的服务是将源自网络层来的数据<strong>可靠</strong>地传输到相邻节点的目标机网络层。其主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能出错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>，使之对网络层表现为一条无差错的链路。</p><p>功能一：为网络层提供服务。<strong>无确认无连接服务</strong>，<strong>有确认无连接服务</strong>，<strong>有确认面向连接服务</strong>。【有连接一定有确认!】<br>功能二：链路管理，即连接的建立、维持、释放(用于面向连接的服务)。<br>功能三：组帧。<br>功能四：流量控制。限制发送方<br>功能五：差错控制(帧错/位错)</p><hr><h3 id="2、封装成帧和透明传输">2、封装成帧和透明传输</h3><ul><li><u><strong>封装成帧</strong></u></li></ul><p><strong>封装成帧</strong>就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p><p>首部和尾部包含许多的控制信息，他们的一个重要作用：<strong>帧定界</strong>(确定的界限)。</p><p><strong>帧同步</strong>：接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</p><p><strong>组帧的四种方法</strong>：1.字符计数法，2.字符(节) 填充法，3.零比特填充法，4.违规编码法。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_16-48-15.png" alt=""></p><hr><ul><li><u><strong>透明传输</strong></u></li></ul><p><strong>透明传输</strong>是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。</p><p>当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这档各层的传输是透明的。</p><hr><ul><li><u><strong>1.字符计数法</strong></u></li></ul><p>帧首部使用一个计数字段(第一个<strong>字节</strong>，八位) 来标明帧内字符数。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_16-54-12.png" alt=""></p><p>痛点：如果前面的帧的计数字段改变，会导致后面的全部发送错误</p><hr><ul><li><u><strong>2.字符填充法</strong></u></li></ul><p>前导：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_16-55-42.png" alt=""></p><ol><li>当传送的帧是由文本文件组成时 (文本文件的字符都是从键盘上输入的，都是ASCII码）。不管从键盘上输入什么字符都可以放在帧里传过去，即<strong>透明传输</strong>。</li><li>当传送的帧是由非ASCII码的文本文件组成时(二进制代码的程序或图像等)。就要采用<strong>字符填充方法</strong>实现透明传输。</li></ol><p><strong>字符填充法</strong>：</p><p>填充的字节类似转义字符，这里的作用是告知下一个是正常数据，而不是控制信。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_16-57-48.png" alt=""></p><hr><ul><li><u><strong>3.零比特填充法</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_17-00-58.png" alt=""></p><p>操作:</p><ol><li><p>在发送端，扫描整个信息字段，只要连续5个1，就立即填入1个0。</p><p>0110111111110111110010（原始数据）</p><p>011011111<strong>0</strong>111011111<strong>0</strong>0010（填充0）</p></li><li><p>在接收端收到一个帧时，先找到标志字段确定边界，再用硬件对比特流进行扫描。发现连续5个1时，就把后面的0删除。</p><p>011011111<strong>0</strong>111011111<strong>0</strong>0010（接受数据）</p><p>0110111111110111110010（删除0）</p></li></ol><hr><ul><li><u><strong>4.违规编码法</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_17-08-59.png" alt=""></p><p>可以用“<strong>高-高</strong>“，”<strong>低-低</strong>”来定界的起始和终止</p><p>由于字节计数法中Count字段的脆弱性(其值若有差错将导致灾难性后果)及字符填充实现上的复杂性和不兼容性，<strong>目前较普遍使用的帧同步法是<u>零比特填充法</u>和<u>违规编码法</u></strong>。</p><hr><h3 id="3、差错控制（检错编码）">3、差错控制（检错编码）</h3><ul><li><u><strong>差错从何而来?</strong> </u></li></ul><p>概括来说，传输中的差错都是由于噪声引起的。</p><p><strong>全局性</strong>：由于线路本身电气特性所产生的随机噪声(热噪声)，是信道固有的，随机存在的</p><p>    解决办法：提高信噪比来减少或避免干扰。(对传感器下手)</p><p><strong>局部性</strong>：外界特定的短暂原因所造成的冲击噪声，是产生差错 的主要原因</p><p>    解决办法：通常利用编码技术来解决。</p><p>差错：</p><ol><li>位错：比特位出错，1变为0， 0变为1。</li><li>帧错：假设原始数据为【#1】-【#2】-【#3】<ul><li>丢失：【#1】-【#3】</li><li>重复：【#1】-【#2】-【#2】-【#3】</li><li>失序：【#1】-【#3】-【#2】</li></ul></li></ol><p>链路层为网络层提供服务：<strong>无确认无连接服务</strong>（通信质量<strong>好</strong>，<strong>有线</strong>传输链路），<strong>有确认无连接服务和有确认面向连接服务</strong>（通信质量<strong>差</strong>的<strong>无线</strong>传输链路（后面两个））。</p><hr><ul><li><u><strong>数据链路层的差错控制</strong></u></li></ul><p>差错控制（比特错）：</p><ol><li><strong>检错编码</strong>：<ul><li>奇偶校验码</li><li>循环冗余码</li></ul></li><li><strong>纠错编码</strong>：海明码</li></ol><p><strong>编码 VS 编码</strong>：</p><p>数据链路层编码和物理层的数据编码与调制不同。物理层编码针对的是<strong>单个比特</strong>，解决传输过程中比特的同步等问题，如曼彻斯特编码。而数据链路层的编码针对的是<strong>一组比特</strong>，它通过几余码的技术实现一组二进制比特串在传输过程是否出现了差错。</p><p><strong>冗余编码</strong>：</p><p>在数据发送之前，先按某种关系<strong>附加</strong>上一定的<strong>冗余位</strong>，构成一个符合某一规则的码字后再发送。当要发送的有效数据变化时，相应的冗余位也随之变化，使码字遵从不变的规则。接收端根据收到码字是否仍符合原规则，从而判断是否出错。</p><hr><ul><li><u><strong>检错编码——奇偶校验码</strong></u></li></ul><p>奇偶校验码（1位校验位，其他为信息）</p><ol><li><p>奇校验码：“1”的个数为奇数</p><p>生成时：信息中“1”为偶数，校验位为“1”；信息中“1”为奇数，校验位为“0”</p><p>检测时：“1”的个数不为奇数则发生错误</p></li><li><p>偶校验码：“1”的个数为偶数</p><p>生成时：信息中“1”为偶数，校验位为“0”；信息中“1”为奇数，校验位为“1”</p><p>检测时：“1”的个数不为偶数则发生错误</p></li></ol><p><strong>例题</strong>：如果一个字符S的ASCI编码从低到高依次为1100101，采用奇校验，在下述收到的传输后字符中，哪种错误不能检测<br>   A.11000011 B.11001010 C.11001100 <strong>D.11010011</strong></p><p>奇偶校验码特点：<br>只能检查出奇数个比特错误，检错能力为50%（奇数个比特位出错，才能检验出来）</p><hr><ul><li><u><strong>检错编码——CRC循环冗余码</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_19-18-31.png" alt=""></p><p><strong>接收端检错过程</strong>：</p><p>把收到的每一个帧都除以同样的除数，然后检查得到的余数R。</p><ol><li>余数为0，判定这个帧没有差错，<strong>接受</strong></li><li>余数为不为0，判定这个有差错 (无法确定到位)，<strong>丢弃</strong></li></ol><p>FCS的生成以及接收端CRC检验都是由硬件实现，处理很迅速因此不会延误数据的传输。</p><p>  在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的无差错接收，即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”</p><hr><h3 id="4、差错控制（纠错编码）">4、差错控制（纠错编码）</h3><ul><li><u><strong>纠错编码——海明码</strong></u></li></ul><p>海明码：<strong>发现双</strong>比特错，<strong>纠正单</strong>比特错</p><p>工作原理：<strong>牵一发而动全身</strong></p><p>工作流程：确定校验码位数r <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 确定校验码和数据的位置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 求出校验码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 检错并纠错</p><hr><ul><li><u><strong>1.确定校验码位数r</strong></u></li></ul><p><strong>海明不等式</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>r</mi></msup><mo>≥</mo><mi>k</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^r \ge k + r + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8004em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>  (r为冗余位，k为信息位)</p><p><strong>举例：要发送的数据为：D = 101101</strong><br>数据的位数k=6，<br>满足不等式的<strong>最小r</strong>为4,<br>也就是D = 101101的海明码应该有6+4=10位，<br>其中原数据6位，效验码4位。</p><hr><ul><li><u><strong>2.确定校验码和数据的位置</strong></u></li></ul><p>假设这4位校验码分别为P1、P2、P3、P4；数据从左到右为D1、D2、…、D6。</p><p>P1、P2、P3、P4<strong>放在2的几次方位</strong>：</p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">代码</td><td style="text-align:center"><strong>p1</strong></td><td style="text-align:center"><strong>p2</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>p3</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>p4</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>D1、D2、…、D6<strong>按序填满</strong>:</p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">代码</td><td style="text-align:center">p1</td><td style="text-align:center">p2</td><td style="text-align:center"><strong>D1</strong></td><td style="text-align:center">p3</td><td style="text-align:center"><strong>D2</strong></td><td style="text-align:center"><strong>D3</strong></td><td style="text-align:center"><strong>D4</strong></td><td style="text-align:center">p4</td><td style="text-align:center"><strong>D5</strong></td><td style="text-align:center"><strong>D6</strong></td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>1</strong></td></tr></tbody></table><hr><ul><li><u><strong>3.求出校验码</strong></u></li></ul><p><strong>令所有要检验的位异或=0</strong></p><p>P1: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>5</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p1 \oplus D1 \oplus D2 \oplus D4 \oplus D5 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>p</mi><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\Rightarrow p1 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">000<strong>1</strong></td><td style="text-align:center">0010</td><td style="text-align:center">001<strong>1</strong></td><td style="text-align:center">0100</td><td style="text-align:center">010<strong>1</strong></td><td style="text-align:center">0110</td><td style="text-align:center">011<strong>1</strong></td><td style="text-align:center">1000</td><td style="text-align:center">100<strong>1</strong></td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">代码</td><td style="text-align:center"><strong>p1</strong></td><td style="text-align:center">p2</td><td style="text-align:center"><strong>D1</strong></td><td style="text-align:center">p3</td><td style="text-align:center"><strong>D2</strong></td><td style="text-align:center">D3</td><td style="text-align:center"><strong>D4</strong></td><td style="text-align:center">p4</td><td style="text-align:center"><strong>D5</strong></td><td style="text-align:center">D6</td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center">1</td></tr></tbody></table><p>p2:  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p2 \oplus D1 \oplus D3 \oplus D4 \oplus D6 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>p</mi><mn>2</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\Rightarrow p2 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0001</td><td style="text-align:center">00<strong>1</strong>0</td><td style="text-align:center">00<strong>1</strong>1</td><td style="text-align:center">0100</td><td style="text-align:center">0101</td><td style="text-align:center">01<strong>1</strong>0</td><td style="text-align:center">01<strong>1</strong>1</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">10<strong>1</strong>0</td></tr><tr><td style="text-align:center">代码</td><td style="text-align:center">p1</td><td style="text-align:center"><strong>p2</strong></td><td style="text-align:center"><strong>D1</strong></td><td style="text-align:center">p3</td><td style="text-align:center">D2</td><td style="text-align:center"><strong>D3</strong></td><td style="text-align:center"><strong>D4</strong></td><td style="text-align:center">p4</td><td style="text-align:center">D5</td><td style="text-align:center"><strong>D6</strong></td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><strong>1</strong></td></tr></tbody></table><p>p3: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p3 \oplus D2 \oplus D3 \oplus D4 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>p</mi><mn>3</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\Rightarrow p3 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0001</td><td style="text-align:center">0010</td><td style="text-align:center">0011</td><td style="text-align:center">0<strong>1</strong>00</td><td style="text-align:center">0<strong>1</strong>01</td><td style="text-align:center">0<strong>1</strong>10</td><td style="text-align:center">0<strong>1</strong>11</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">代码</td><td style="text-align:center">p1</td><td style="text-align:center">p2</td><td style="text-align:center">D1</td><td style="text-align:center"><strong>p3</strong></td><td style="text-align:center"><strong>D2</strong></td><td style="text-align:center"><strong>D3</strong></td><td style="text-align:center"><strong>D4</strong></td><td style="text-align:center">p4</td><td style="text-align:center">D5</td><td style="text-align:center">D6</td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><p>p4: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>5</mn><mo>⊕</mo><mi>D</mi><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p4 \oplus D5 \oplus D6 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>p</mi><mn>4</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\Rightarrow p4 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0001</td><td style="text-align:center">0010</td><td style="text-align:center">0011</td><td style="text-align:center">0100</td><td style="text-align:center">0101</td><td style="text-align:center">0110</td><td style="text-align:center">0111</td><td style="text-align:center"><strong>1</strong>000</td><td style="text-align:center"><strong>1</strong>001</td><td style="text-align:center"><strong>1</strong>010</td></tr><tr><td style="text-align:center">代码</td><td style="text-align:center">p1</td><td style="text-align:center">p2</td><td style="text-align:center">D1</td><td style="text-align:center">p3</td><td style="text-align:center">D2</td><td style="text-align:center">D3</td><td style="text-align:center">D4</td><td style="text-align:center"><strong>p4</strong></td><td style="text-align:center"><strong>D5</strong></td><td style="text-align:center"><strong>D6</strong></td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>1</strong></td></tr></tbody></table><p>所以海明码为<strong>00</strong>1<strong>0</strong>011<strong>1</strong>01</p><hr><ul><li><u><strong>4.检错并纠错</strong></u></li></ul><table><thead><tr><th style="text-align:center">数据位</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center"><strong><u>5</u></strong></th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0001</td><td style="text-align:center">0010</td><td style="text-align:center">0011</td><td style="text-align:center">0100</td><td style="text-align:center"><strong><u>0101</u></strong></td><td style="text-align:center">0110</td><td style="text-align:center">0111</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">代码</td><td style="text-align:center"><strong>p1</strong></td><td style="text-align:center"><strong>p2</strong></td><td style="text-align:center">D1</td><td style="text-align:center"><strong>p3</strong></td><td style="text-align:center"><u><strong>D2</strong></u></td><td style="text-align:center">D3</td><td style="text-align:center">D4</td><td style="text-align:center"><strong>p4</strong></td><td style="text-align:center">D5</td><td style="text-align:center">D6</td></tr><tr><td style="text-align:center">实际值</td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center">1</td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong><u>1</u></strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><p>假设现在第五位发生了错误：0变成1</p><p><strong>令所有要检验的位进行异或运算</strong>：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>5</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p1 \oplus D1 \oplus D2 \oplus D4 \oplus D5 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>1</mn><mo>⊕</mo><mi>D</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p2 \oplus D1 \oplus D3 \oplus D4 \oplus D6 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>2</mn><mo>⊕</mo><mi>D</mi><mn>3</mn><mo>⊕</mo><mi>D</mi><mn>4</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p3 \oplus D2 \oplus D3 \oplus D4 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>4</mn><mo>⊕</mo><mi>D</mi><mn>5</mn><mo>⊕</mo><mi>D</mi><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p4 \oplus D5 \oplus D6 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>p</mi><mn>4</mn><mi>p</mi><mn>3</mn><mi>p</mi><mn>2</mn><mi>p</mi><mn>1</mn><mo>=</mo><mn>0101</mn></mrow><annotation encoding="application/x-tex">\Rightarrow p4 p3 p2 p1 = 0101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">4</span><span class="mord mathnormal">p</span><span class="mord">3</span><span class="mord mathnormal">p</span><span class="mord">2</span><span class="mord mathnormal">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0101</span></span></span></span> 所以可以看出第五位出错了</p><hr><h3 id="5、流量控与可靠传输机制">5、流量控与可靠传输机制</h3><ul><li><u><strong>数据链路层的流量控制</strong></u></li></ul><p><strong>较高的发送速度</strong>和<strong>较低的接收能力</strong>的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p><p>数据链路层的流量控制是点对点的，而传输层的流量控制是端到端的。</p><p>数据链路层流量控制手段: 接收方收不下就不回复确认。</p><p>传输层流量控制手段: 接收端给发送端一个窗口公告</p><hr><ul><li><u><strong>流量控制的方法</strong></u></li></ul><ol><li><strong>停止-等待协议</strong>：发送窗口大小=1，接收窗口大小=1</li></ol><p>每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_20-27-57.png" alt=""></p><ol start="2"><li><p><strong>滑动窗口协议</strong></p><ul><li><p><strong>后退N帧协议</strong>（GBN）：发送窗口大小&gt;1，接收窗口大小=1</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_20-32-16.png" alt=""></p></li><li><p><strong>选择重传协议</strong>（SR）：发送窗口大小&gt;1，接收窗口大小&gt;1</p></li></ul></li></ol><hr><ul><li><u><strong>可靠传输、滑动窗口、流量控制</strong></u></li></ul><p>可靠传输：发送端发啥，接收端收啥。<br>流量控制：控制发送速率，使接收方有足够的缓冲空间来接收每一个帧。</p><p>滑动窗口解决了：</p><ol><li>流量控制(收不下就不给确认，想发也发不了)</li><li>可靠传输(发送方自动重传)</li></ol><hr><h3 id="6、停止-等待协议">6、停止-等待协议</h3><ul><li><u><strong>停止-等待协议究竟是哪一层的</strong>？</u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_20-39-29.png" alt=""></p><p>发展后：数据链路层 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 传输层</p><hr><ul><li><u><strong>停止-等待协议</strong></u></li></ul><ol><li><p><strong>为什么要有停止-等待协议</strong>?<br>除了<strong>比特出差错</strong>，底层信道还会出现丢包问题为了实现流量控制。<br>丢包：物理线路故障、设备故障、病毒攻击、路由信息错误等原因，会导致数据包的丢失。</p></li><li><p><strong>研究停等协议的前提</strong>?<br>虽然现在常用全双工通信方式，但为了讨论问题方便，仅考虑一方发送数据(发送方)，一方接收数据(接收方)。<br>因为是在讨论可靠传输的原理，所以并不考虑数据是在哪一个层次上传送的。<br>“停止-等待”就是每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组。</p></li><li><p><strong>停等协议有几种应用情况</strong>？<br>无差错情况和有差错情况</p></li></ol><hr><ul><li><u><strong>停止-等待协议——无差错情况</strong></u></li></ul><p>每发送1个数据帧就停止并等待，因此用1bit来编号就够</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_22-49-30.png" alt=""></p><hr><ul><li><u><strong>停止-等待协议——有差错情况</strong></u></li></ul><p><strong>1、数据帧丢失或检测到帧出错</strong></p><p>超时计时器：每次发送一个帧就启动一个计时（超时计时器设置的重传时间应当比帧传输的平均RTT更长一些）</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_22-52-40.png" alt=""></p><p>注意：</p><ol><li>发完一个帧后，必须保留它的副本。</li><li>数据帧和确认帧必须编号。</li></ol><p><strong>2、ACK丢失</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_22-54-55.png" alt=""></p><p><strong>3、ACK迟到</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_22-56-02.png" alt=""></p><hr><ul><li><u><strong>停止-等待协议——性能分析</strong></u></li></ul><p>简单，但是<strong>信道利用率太低</strong>！</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_22-58-08.png" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>信道利用率</mtext><mi>U</mi><mo>=</mo><mfrac><msub><mi>T</mi><mi>D</mi></msub><mrow><msub><mi>T</mi><mi>D</mi></msub><mo>+</mo><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><msub><mi>T</mi><mi>A</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">信道利用率U = \frac{T_D}{T_D + RTT + T_A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">信道利用率</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3339em;vertical-align:-0.4453em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1433em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">RTT</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1433em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4103em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1433em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4453em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><hr><ul><li><u><strong>信道利用率</strong></u></li></ul><p><strong>发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率</strong>。</p><p>信道利用率 = (L / C) / T<br>T：发送周期<br>L：T内发送L比特数据<br>C：发送方数据传输率</p><p><strong>信道吞吐率 = 信道利用率 * 发送方的发送速率</strong></p><p>例题：一个信道的数据传输率为4kb/s，单向传播时延为30ms，如果使停止-等待协议的信道最大利用率达到80%要求的数据帧长度至少为?</p><p>解析：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>80</mn><mi mathvariant="normal">%</mi><mo>=</mo><mfrac><mrow><mi>L</mi><mi mathvariant="normal">/</mi><mn>4</mn></mrow><mrow><mi>L</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>30</mn><mi>m</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mfrac><mi>L</mi><mrow><mi>L</mi><mo>+</mo><mn>2</mn><mo>×</mo><mn>30</mn><mi>m</mi><mi>s</mi><mo>×</mo><mn>4</mn><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">80\% = \frac{L/4}{L/4 + 2\times30ms} = \frac{L}{L + 2 \times 30ms \times 4kb/s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">80%</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mtight">/4</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight">30</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mtight">/4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3923em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight">30</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">×</span><span class="mord mtight">4</span><span class="mord mathnormal mtight">kb</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, L = 960bit</p><hr><h3 id="7、后退N帧协议（GBN）">7、后退N帧协议（GBN）</h3><ul><li><u><strong>停止-等待协议的弊端</strong></u></li></ul><p>信道利用率太低了</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-12-29.png" alt=""></p><p>要求：<br>1、必须增加序号范围<br>2、发送方需要缓存多个分组。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <strong>后退N帧协议（GBN）选择重传协（SR）</strong> 。</p><hr><ul><li><u><strong>后退N帧协议中的滑动窗口</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-16-04.png" alt=""></p><hr><ul><li><u><strong>GBN发送方必须响应的三件事</strong></u></li></ul><ol><li><strong>上层的调用</strong><br>上层要发送数据时，发送方先检查发送窗口是否已满，如果<strong>未满</strong>，则产生一个帧并将其发送；如果<strong>窗口已满</strong>发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送。(实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧)。</li><li><strong>收到了一个ACK</strong><br>GBN协议中，对n号帧的确认采用<strong>累积确认</strong>的方式，标明接收方已经收到n号帧和它之前的全部帧。</li><li><strong>超时事件</strong><br>协议的名字为后退N帧/回退N帧，来源于出现丢失和时延过长帧时发送方的行为。就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失。如果出现超时，发送方重传所有已发送但未被确认的帧。</li></ol><hr><ul><li><u><strong>GBN接收方要做的事</strong></u></li></ul><ol><li><p>如果正确收到n号帧，并且按序，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层。</p></li><li><p>其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK。接收方无需缓存任何失序帧，只需要维护一个信息: expectedseqnum (下一个按序接收的帧序号)。</p></li></ol><hr><ul><li><u><strong>运行中的GBN</strong></u></li></ul><p>假设发送窗口尺寸为 4 。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-24-54.png" alt=""></p><hr><ul><li><u><strong>滑动窗口的长度</strong></u></li></ul><p>窗口长度可以无限吗？当然不行！</p><p>若采用n个比特对帧编号，那么发送窗口的尺寸<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>应满足: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>W</mi><mi>T</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \le W_T \le 2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。因为发送窗口尺寸过大，就会使得接收方无法区别新帧和旧帧。</p><hr><ul><li><u><strong>GBN协议重点总结</strong></u></li></ul><ol><li><strong>累积确认(偶尔捎带确认</strong> (全双工，互相通信的嘛，捎带一下确认帧) <strong>)</strong></li><li>接收方只按顺序接收帧，不按序无情丢弃</li><li>确认序列号最大的、按序到达的帧</li><li>发送窗口最大为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，接收窗口大小为1</li></ol><hr><ul><li><u><strong>习题</strong></u></li></ul><p>数据链路层采用了后退N帧(GBN)协议，发送方已经发送了编号为0~7的。当计时器超时时，若发送方只收到0、2、3号顿的确认，则发送方需要重发的帧数是(       )<br>  A.2 B.3 <strong>C.4</strong> D.5</p><p>解析：需要重发4、5、6、7帧</p><hr><ul><li><u><strong>GBN协议性能分析</strong></u></li></ul><p>因连续发送数据帧而提高了信道利用率；<br>在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低。</p><hr><h3 id="8、选择重传协议（SR）">8、选择重传协议（SR）</h3><ul><li><u><strong>GBN协议的弊端</strong></u></li></ul><p><strong>累计确认 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 批量重传</strong></p><p>想法：<strong>可不可以只重传出错的帧</strong>?<br>解决办法：设置单个确认，同时加大接收窗口，设置接收缓存，缓存乱序到达的帧。</p><hr><ul><li><u><strong>选择重传协议的滑动窗口</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-40-06.png" alt=""></p><hr><ul><li><u><strong>SR发送方必须响应的三件事</strong></u></li></ul><ol><li><strong>上层的调用</strong><br>从上层收到数据后，SR发送方检查下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧：否则就像GBN一样，要么将数据<strong>缓存</strong>，要么<strong>返回给上层</strong>之后再传输。</li><li><strong>收到了一个ACK</strong><br>如果收到ACK，加入该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收。如果该帧序号是窗口的下界(最左边第一个窗口对应的序号)，则窗口向前移动到具有最小序号的未确认帧处。如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧。</li><li><strong>超时事件</strong><br>每个帧都有自己的定时器，一个超时事件发生后<strong>只重传一个帧</strong>。</li></ol><hr><ul><li><u><strong>SR接收方要做的事</strong></u></li></ul><p><strong>来者不拒(窗口内的帧)</strong><br>SR接收方将<strong>确认一个正确接收的帧</strong>而<strong>不管其是否按序</strong>。失序的帧将被<strong>缓存</strong>，并返回给发送方一个该帧的确认帧【<strong>收谁确认谁</strong>】，直到所有(即序号更小的帧)皆被收到为止，这时才可以将一批帧按序交付给上层，然后<strong>向前移动滑动窗口</strong>。</p><hr><ul><li><u><strong>运行中的SR</strong></u></li></ul><p>假设发送窗口和接收窗口尺寸都为 4 。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-51-56.png" alt=""></p><hr><ul><li><u><strong>滑动窗口的长度</strong></u></li></ul><p>窗口长度可以无限吗？当然不行！</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-29_23-57-22.png" alt=""></p><p>若采用n个比特对帧编号：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mrow><mi>T</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>R</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">W_{Tmax} = W_{Rmax} = 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><hr><ul><li><u><strong>SR协议重点总结</strong></u></li></ul><ol><li>对数据恢逐一确认，收一个确认一个</li><li>只重传出错帧</li><li>接收方有缓存</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mrow><mi>T</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>R</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">W_{Tmax} = W_{Rmax} = 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></li></ol><hr><ul><li><u><strong>习题</strong></u></li></ul><p>数据链路层采用了选择重传(SR)协议，发送方已经发送了编号为0~3的。现已收到1号的确认，而0、2号帧依次超时，则发送方需要重传的帧数是(    )</p><p>  <strong>A.2</strong> B.3 C.4 D.5</p><p>解析：需要重发0、2帧</p><hr><h3 id="9、信道划分介质访问控制">9、信道划分介质访问控制</h3><ul><li><u><strong>传输数据使用的两种链路</strong></u><ul><li><p><strong>点对点链路</strong><br>两个相邻节点通过一个链路相连，没有第三者。<br>应用：PPP协议，常用于<strong>广域网</strong></p></li><li><p><strong>广播式链路</strong><br>所有主机共享通信介质。<br>应用：早期的总线以太网、无线局域网，常用于<strong>局域网</strong>。<br>典型拓扑结构：总线型、星型(逻辑总线型)</p></li></ul></li></ul><hr><ul><li><p><u><strong>介质访问控制</strong></u></p><p>介质访问控制的内容就是，采取一定的措施，使得两对节点之间的通信<strong>不会发生互相干扰</strong>的情况。</p><ul><li><p><strong>静态划分信道</strong></p><ul><li><strong>信道划分介质访问控制</strong><ol><li><strong>频分多路复用 FDM</strong></li><li><strong>时分多路复用 TDM</strong></li><li><strong>波分多路复用 WDM</strong></li><li><strong>码分多路复用 CDM</strong></li></ol></li></ul></li><li><p><strong>动态划分信道</strong></p><p><em>动态媒体接入控制/多点接入</em></p><p>特点：信道并非在用户通信时固定分配给用户。</p><ul><li><p><strong>轮询访问介质访问控制</strong></p><ol><li>轮询协议</li><li><strong>令牌传递协议</strong></li></ol></li><li><p><strong>随机访问介质访问控制</strong></p><p>所有用户可随机发送信息。<br>发送信息时占<strong>全部带宽</strong>。</p><ol><li><strong>ALOHA 协议</strong>（不听（监听信道）就说）</li><li><strong>CSMA 协议</strong>（先听再说）</li><li><strong>CSMA/CD 协议</strong>（先听再说，边听边说）</li><li><strong>CSMA/CA 协议</strong></li></ol></li></ul></li></ul></li></ul><hr><ul><li><u><strong>信道划分介质访问控制</strong></u></li></ul><p>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的<strong>通信隔离</strong>开，把<strong>时域和频域资源</strong>合理地分配给网络上的设备。</p><p><strong>多路复用技术</strong>：<br>把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备<strong>共享信道资源</strong>，提高信道利用率</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_15-41-59.png" alt=""></p><p>把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，<strong>实际就是把广播信道转变为点对点信道</strong>。</p><hr><ul><li><u><strong>频分多路复用 FDM</strong></u></li></ul><p>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<strong>频分复用的所有用户在同样的时间占用不同的带宽(频率带宽）资源</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_15-44-55.png" alt=""></p><p>充分利用传输介质带宽，系统<strong>效率较高</strong>；<br>由于技术比较成熟，实现也比较<strong>容易</strong>。</p><hr><ul><li><u><strong>时分多路复用 TDM</strong></u></li></ul><p>将时间划分为一段段等长的时分复用帧 (TDM帧)。每一个时分复用的用户在每一个TDM帧中占用<strong>固定序号的时隙</strong>，所有用户轮流占用信道。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_15-47-39.png" alt=""></p><p><strong>频分 VS 时分</strong>：</p><p>频分复用——“并行”<br>时分复用——“并发“</p><hr><ul><li><u><strong>改进的时分复用——统计时分复用STDM</strong></u></li></ul><p>每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的<strong>输入缓存</strong>，然后集中器按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM顺中，一个STDM顺满了就发出。<strong>STDM帧不是固定分配时隙，而是按需动态分配时隙</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_15-52-16.png" alt=""></p><p>假设信道带宽为 8000 b/s：<br>时分多路复用 TDM：一人最高 2000 b/s<br>统计时分多路复用 STDM：一人最高 8000 b/s</p><hr><ul><li><u><strong>波分多路复用 WDM</strong></u></li></ul><p>波分多路复用就是<strong>光的频分多路复用</strong>，在一根光纤中传输多种不同波长(频率)的光信号，由于波长(频率)不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_15-55-57.png" alt=""></p><hr><ul><li><u><strong>码分多路复用 CDM</strong></u></li></ul><p>码分多址 (CDMA)是码分复用的一种方式。</p><p>1个比特分为多个码片/芯片 (chip)，每一个站点被指定一个唯一的m位的芯片序列。</p><p>发送1时站点发送芯片序列，发送0时发送芯片序列反码(通常把0写成-1)</p><p><strong>如何不打架</strong>：多个站点同时发送数据的时候，要求各个站点芯片序列<strong>相互正交</strong>（等于0才行）。</p><p><strong>如何合并</strong>：各路数据在信道中被<strong>线性相加</strong>。</p><p><strong>如何分离</strong>：合并的数据和源站<strong>规格化内积</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_16-37-46.png" alt=""></p><hr><h3 id="10、ALOHA-协议">10、ALOHA 协议</h3><ul><li><u><strong>ALOHA 协议</strong></u><ul><li>纯ALOHA 协议</li><li>时隙ALOHA 协议</li></ul></li></ul><hr><ul><li><u><strong>纯ALOHA 协议</strong></u></li></ul><p>纯ALOHA协议思想：不监听信道，不按时间槽发送，随机重发。<strong>想发就发</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_18-09-43.png" alt=""></p><p><strong>冲突如何检测</strong>?<br>如果发生冲突，接收方在就会检测出差错,然后不予确认，发送方在一定时间内收不到就判断发生冲突。<br><strong>冲突如何解决</strong>?<br>超时后等一随机时间再重传</p><hr><ul><li><u><strong>时隙ALOHA 协议</strong></u></li></ul><p>时隙ALOHA协议的思想：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送。<strong>控制想发就发的随意性</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_18-12-14.png" alt=""></p><hr><ul><li><u><strong>关于ALOHA要知道的事</strong></u></li></ul><ol><li>纯ALOHA比时隙ALOHA吞吐量更低，效率更低。</li><li>纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发。</li></ol><hr><h3 id="11、CSMA协议">11、CSMA协议</h3><ul><li><p><u><strong>CSMA协议</strong></u></p><p><strong>载波监听多路访问协议CSMA (carrier sense multiple access)</strong></p><ul><li>1-坚持CSMA</li><li>非坚持CSMA</li><li>p-坚持CSMA</li></ul></li></ul><p><strong>CS</strong>：载波侦听/监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。<br>当几个站同时在总线上发送数据时，总线上的信号<strong>电压摆动值</strong>将会增大（互相叠加）。当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞，即发生了冲突。</p><p><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上</p><p><strong>协议思想</strong>：发送帧之前，<strong>监听</strong>信道</p><p>监听结果：</p><ol><li>信道空闲：<strong>发送完整帧</strong></li><li>信道忙：<strong>推迟发送</strong></li></ol><hr><ul><li><u><strong>1-坚持CSMA</strong></u></li></ul><p>坚持指的是对于监听信道<strong>忙</strong>之后的坚持。</p><p>1-坚持CSMA<strong>思想</strong>：如果一个主机要发送消息，那么它先监听信道。</p><p><strong>空闲则直接传输，不必等待</strong>。</p><p><strong>忙则一直监听</strong>，直到空闲马上传输。</p><p>如果有<strong>冲突</strong>(一段时间内未收到肯定回复)，则等待一个随机长的时间再监听，重复上述过程。</p><p><strong>优点</strong>：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。</p><p><strong>缺点</strong>：假如有两个或两个以上的站点有数据要发送，冲突就不可避免。</p><hr><ul><li><u><strong>非坚持CSMA</strong></u></li></ul><p>非坚持指的是对于监听信道<strong>忙</strong>之后就不继续监听。</p><p>非坚持CSMA<strong>思想</strong>： 如果一个主机要发送消息，那么它先监听信道；</p><p><strong>空闲则直接传输，不必等待</strong>；</p><p><strong>忙则等待一个随机的时间之后再进行监听</strong>。</p><p><strong>优点</strong>：采用随机的重发延迟时间可以减少冲突发生的可能性。<br><strong>缺点</strong>：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</p><hr><ul><li><u><strong>p-坚持CSMA</strong></u></li></ul><p>p-坚持指的是对于监听信道<strong>空闲</strong>的处理。</p><p>p-坚持CSMA<strong>思想</strong>：如果一个主机要发送消息，那么它先监听信道；</p><p>空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽再传输；</p><p>忙则等待一个随机的时间之后再进行监听。</p><p><strong>优点</strong>：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间的这种方案。</p><p><strong>BUT</strong>！：发生冲突后还是要坚持把数据帧发送完，造成了浪费</p><p>思考：有没有什么办法可以减少资源浪费冲突就能发现呢?（后面内容）</p><hr><h3 id="12、CSMA-CD协议">12、CSMA/CD协议</h3><ul><li><p><u><strong>CSMA/CD协议（考研重点）</strong></u></p><p><strong>载波监听多点接入/碰撞检测CSMA/CD (carrier sense multiple access with collision detection)</strong></p></li></ul><p><strong>CS</strong>：载波侦听/监听，每一个站在<strong>发送数据之前</strong>以及<strong>发送数据时</strong>都要检测一下总线上是否有其他计算机在发送数据。</p><p><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。（<strong>总线型网络</strong>）</p><p><strong>CD</strong>：碰撞检测(冲突检测)，“<strong>边发送边监听</strong>”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（<strong>半双工网络</strong>）</p><p><strong>先听后发为什么还会冲突</strong>？因为电磁波在总线上总是以有限的速率传播的</p><hr><ul><li><u><strong>传播时延对载波监听的影响</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_20-22-45.png" alt=""></p><p>最迟多久才能知道自己发送的数据没和别人碰撞?</p><p>答案：最多是两倍的总线端到端的传播时延<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>（即总线的端到端往返传播时延，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>也叫做争用期/冲突窗口/碰撞窗口）</p><p>推断：只要经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>时间还没有检测到碰撞，就能肯定这次发送不会发生碰撞。</p><hr><ul><li><u><strong>如何确认碰撞后重传的时间</strong>？</u></li></ul><p><strong>截断二进制指数规避算法</strong>：(二进制回退算法)</p><ol><li>确定基本退避（<strong>推迟</strong>）时间为争用期<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>。</li><li>定义参数<strong>k</strong>，它等于<strong>重传次数</strong>，但k不超过10，即k=min[重传次数，10]。当重传次数不超过10时，k等于重传次数；当重传次数大于10时，k就不再增大而一直等于10。</li><li>从离散的整数集合[0, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>]中随机取出一个数r，重传所需要退避的时间就是<strong>r倍的基本退避时间</strong>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>r</mi><mtext> </mtext><mi>τ</mi></mrow><annotation encoding="application/x-tex">2r\,\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>。</li><li>当重传达<strong>16次</strong>仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错。</li></ol><p>举例：<br>第一次重传，k=1，r从{0，1}选；<br>重传推迟时间为0或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>，在这两个时间中随机选一个。<br>若再次碰撞，则在第二次重传时，k=2，r从0，1，2，3}选；<br>重传推迟时间为0或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">2\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">4\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">6\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>，在这四个时间中随机选一个。<br>若再次碰撞，则第三次重传时，k=3，r从{0，1，2，3，4，5，6，7}选…</p><p>结论：若连续多次发生冲突，就表明可能有较多的站参与争用信道使用此算法可使重传需要推迟的平均时间随重传次数的增大而增大，因而减小发生碰撞的概率，有利于整个系统的稳定</p><p><strong>例题</strong>：在以太网的二进制回退算法中，在11次碰撞之后，站点会在0~(?)之间选择一个随机数。（答案：1023）</p><hr><ul><li><u><strong>最小帧长</strong></u></li></ul><p>背景：</p><p>A站发了一个很短的帧，<br>但发生了碰撞，<br>不过帧在发送完毕后才检测到发生碰撞，<br>没法停止发送，<br>因为发完了。。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <strong>最小帧长</strong></p><p>帧的传输时延至少要两倍于信号在总线中的传播时延</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mtext>帧长（</mtext><mi>b</mi><mi>i</mi><mi>t</mi><mtext>）</mtext></mrow><mtext>数据传输速率</mtext></mfrac><mo>≥</mo><mn>2</mn><mo>×</mo><mtext>传播时延</mtext></mrow><annotation encoding="application/x-tex">\frac{帧长（bit）}{数据传输速率} \ge 2 \times 传播时延</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">数据传输速率</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">帧长（</span><span class="mord mathnormal mtight">bi</span><span class="mord mathnormal mtight">t</span><span class="mord cjk_fallback mtight">）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">传播时延</span></span></span></span> 即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mtext>帧长（</mtext><mi>b</mi><mi>i</mi><mi>t</mi><mtext>）</mtext></mrow><mtext>数据传输速率</mtext></mfrac><mo>≥</mo><mn>2</mn><mi>τ</mi></mrow><annotation encoding="application/x-tex">\frac{帧长（bit）}{数据传输速率} \ge 2 \tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">数据传输速率</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">帧长（</span><span class="mord mathnormal mtight">bi</span><span class="mord mathnormal mtight">t</span><span class="mord cjk_fallback mtight">）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mtext>最小帧长</mtext><mo>=</mo><mtext>总线传播时延</mtext><mo>×</mo><mtext>数据传播速率</mtext><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\Rightarrow 最小帧长=总线传播时延\times数据传播速率\times2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">最小帧长</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">总线传播时延</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">数据传播速率</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mspace width="2em"/><mspace width="2em"/><mspace width="1em"/><mtext> </mtext><mo>=</mo><mn>2</mn><mi>τ</mi><mo>×</mo><mtext>数据传播速率</mtext></mrow><annotation encoding="application/x-tex">\qquad\qquad\quad\,=2\tau\times数据传播速率</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">数据传播速率</span></span></span></span></p><hr><h3 id="13、CSMA-CA协议">13、CSMA/CA协议</h3><ul><li><p><u><strong>CSMA/CA协议（非重点 了解即可）</strong></u></p><p><strong>载波监听多点接入/碰撞避免CSMA/CA (carrier sense multiple access with collision avoidance）</strong></p></li></ul><p>为什么要有CSMA/CA?</p><p>无线局域网：</p><ol><li>无法做到360°全面检测碰撞。</li><li>隐蔽站：<br>当A和c都检测不到信号，认为信道空闲时，同时向终端B发送数据帧，就会导致冲突。（C相对于A来说就是一个隐蔽站，A相对于C也是）</li></ol><hr><ul><li><u><strong>CSMA/CA协议工作原理</strong></u></li></ul><p>发送数据前，先检测信道是否空闲。</p><p>空闲则发出<strong>RTS (request to send)</strong> ，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。</p><p>接收端收到RTS后，将响应<strong>CTS (clear to send)</strong>。</p><p>发送端收到CTS后，开始发送数据帧（同时<strong>预约信道</strong>：发送方告知其他站点自己要传多久数据）。</p><p>接收端收到数据帧后，将用<strong>CRC</strong>来检验数据是否正确，正确则响应<strong>ACK帧</strong>。</p><p>发送方收到ACK就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止(采用<strong>二进制指数退避算法</strong>来确定随机的推迟时间)。</p><p>机制总结：</p><p><strong>1.预约信道      2.ACK帧       3.RTS/CTS帧(可选，解决隐蔽站问题）</strong></p><hr><ul><li><u><strong>CSMA/CD与CSMA/CA</strong></u></li></ul><p><strong>相同点</strong>:<br>CSMA/CD与CSMA/CA机制都从属于CSMA的思路，其核心是<strong>先听再说</strong>。换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入。<br><strong>不同点</strong>:</p><ol><li><strong>传输介质不同</strong>：CSMA/CD 用于总线式以太网【有线】，而CSMA/CA用于无线局域网【无线】。</li><li><strong>载波检测方式不同</strong>：因传输质不同，CSMA/CD与CSMA/CA的检测方式也不同。CSMA/CD通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压就会随着发生变化；而CSMA/CA采用能量检测 (ED)、载波检测(CS)和能量载波混合检测三种检测信道空闲的方式。</li><li><strong>CSMA/CD检测冲突，CSMA/CA避免冲突</strong>，二者出现冲突后都会进行<strong>有上限的重传</strong>。</li></ol><hr><h3 id="14、轮询访问介质访问控制">14、轮询访问介质访问控制</h3><ul><li><p><u><strong>介质访问控制</strong></u></p><ul><li><p>信道划分介质访问控制（<strong>MAC</strong> Multiple Access Control）协议：</p><p>基于<strong>多路复用技术</strong>划分资源<br><strong>网络负载重</strong>：共享信道效率高，且公平<br><strong>网络负载轻</strong>：共享信道效率低</p></li><li><p>随机访问MAC协议：只有这个会发生冲突</p><p>用户根据意愿随机发送信息，发送信息时可独占信道带宽<br><strong>网络负载重</strong>：产生冲突开销<br><strong>网络负载轻</strong>：共享信道效率高，单个结点可利用信道全部带宽</p></li><li><p>轮询访问MAC协议/轮流协议/轮转访问MAC协议:</p><p>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong>。</p><ol><li>轮询协议</li><li><strong>令牌传递协议</strong></li></ol></li></ul></li></ul><hr><ul><li><u><strong>轮询协议</strong></u></li></ul><p><strong>主结点轮流“邀请”从属结点发送数据</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_19-49-13.png" alt=""></p><p>问题:<br>  1.轮询开销 2.等待延迟 3. 单点故障</p><hr><ul><li><u><strong>令牌传递协议</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_19-52-37.png" alt=""></p><p>令牌：一个特殊格式的MAC控制帧，不含任何信息控制信道的使用，确保同一时刻只有一个结点独占信道。</p><p><strong>令牌环网无碰撞</strong></p><p>每个结点都可以在一定的时间内 （令牌持有时间）获得发送数据的权利，并不是无限制地持有令牌。</p><p>问题:<br>  1.令牌开销 2.等待延迟 3.单点故障</p><p>应用于令牌环网（物理星型拓扑，逻辑环形拓扑）。</p><p>采用令牌传送方式的网络常用于<strong>负载较重、通信量较大</strong>的网络中。</p><hr><h3 id="15、局域网的基本概念和体系结构">15、局域网的基本概念和体系结构</h3><ul><li><u><strong>局域网</strong></u></li></ul><p>局域网(Local Area Network)：简称<strong>LAN</strong>，是指在<strong>某一区域内</strong>由多台计算机互联成的计算机组，使用<strong>广播信道</strong>。</p><p>特点1：覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内。<br>特点2：使用专门铺设的传输介质(双绞线、同轴电缆) 进行联网，数据传输速率高(10Mb/s~10Gb/s)。<br>特点3：通信延迟时间短，误码率低，可靠性较高。<br>特点4：各站为平等关系，共享传输信道。<br>特点5：多采用分布式控制和广播式通信，能进行广播和组播。</p><p>决定局域网的主要要素为：<strong>网络拓扑</strong>，<strong>传输介质</strong>与<strong>介质访问控制方法</strong>。</p><hr><ul><li><u><strong>局域网拓扑结构</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_21-45-41.png" alt=""></p><p><strong>星型拓扑</strong>：</p><p>中心节点是控制中心，任意两介节点间的通信最多只需<strong>两步</strong>，传输速度快并且网络构形简单、建网容易、便于控制和管理但这种网络系统，网络可靠性低，网络共享能力差有<strong>单点故障</strong>问题。</p><p><strong>总线型拓扑</strong>：（局域网中常用）</p><p>网络可靠性高、网络节点间响应速度快、共享资源能力强、设备投入量少、成本低、安装使用方便当某个工作站节点出现故障时，对整个网络系统影响小。</p><p><strong>环型拓扑</strong>：</p><p>系统中通信设备和线路比较节省。有<strong>单点故障</strong>问题：由于环路是封闭的，所以不便于扩充，系统响应延时长，且信息传输效率相对较低。</p><p><strong>树型拓扑</strong>：</p><p>易于拓展，易于隔离故障，也容易有<strong>单点故障</strong>。</p><hr><ul><li><p><u><strong>局域网传播介质</strong></u></p><ul><li><p>有线局域网</p><p>双绞线、同轴电缆、光纤。</p></li><li><p>无线局域网</p><p>电磁波</p></li></ul></li></ul><hr><ul><li><u><strong>局域网介质访问控制方法</strong></u><ol><li>CSMA/CD  常用于<strong>总线型局域网</strong>，也用于树型网络</li><li>令牌总线  常用于<strong>总线型局域网</strong>，也用于树型网络<br>它是把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成个逻辑环。只有令牌持有者才能控制总线，才有发送信息的权力。</li><li>令牌环  用于<strong>环形局域网</strong>，如令牌环网</li></ol></li></ul><hr><ul><li><u><strong>局域网分类</strong></u></li></ul><ol><li><strong>以太网</strong>：以太网是应用最为广泛的局域网，包括标准以太网(10Mbps)、快速以太网(100Mbps)、千兆以太网(1000 Mbps)和10G以太网，它们都符合<strong>IEEE802.3</strong>系列标准规范。逻辑拓总线型，物理拓扑是星型或拓展星型。使用CSMA/CD。</li><li><strong>令牌环网</strong>： 物理上采用了星形拓扑结构，逻辑上是环形拓扑结构。已是“明日黄花”</li><li><strong>FDDI网 (Fiber Distributed Data Interface)</strong> ：物理上采用了双环拓扑结构，逻辑上是环形拓扑结构</li><li><strong>ATM网 (Asynchronous Transfer Mode)</strong> ：较新型的单元交换技术,使用53字节固定长度的单元进行交换.</li><li><strong>无线局域网 (Wireless Local Area Network; WLAN)</strong> ：采用<strong>IEEE 802.11</strong>标准</li></ol><hr><ul><li><u><strong>IEEE 802标准</strong></u></li></ul><p>IEEE 802系列标准是IEEE 802 LAN/MAN 标准委员会制定的局域网、城域网技术标准(<strong>1980年2月</strong>成立)。其中最广泛使用的有以太网、令牌环、无线局域网等。这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责。</p><p>下面加粗的一定要记住：</p><table><thead><tr><th style="text-align:center">标准</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">IEEE 802.1</td><td>局城网体系结构、寻址、网络互联和网络。</td></tr><tr><td style="text-align:center">IEEE 802.1A</td><td>概述和系统结构。</td></tr><tr><td style="text-align:center">IEEE 802.1B</td><td>网络管理和网络互连。</td></tr><tr><td style="text-align:center">IEEE 802.2</td><td>逻辑链路控制子层 (LLC)的定义。</td></tr><tr><td style="text-align:center"><strong>IEEE 802.3</strong></td><td><strong>以太网介质访问控制协议 (CSMA/CD)及物理层技术规范</strong>。</td></tr><tr><td style="text-align:center">IEEE 802.4</td><td>令牌总线网 (Token-Bus)的介质访问控制协议及物理层技术规范。</td></tr><tr><td style="text-align:center"><strong>IEEE 802.5</strong></td><td><strong>令牌环网 (Token-Ring)的介质访问控制协议及物理层技术规范</strong>。</td></tr><tr><td style="text-align:center">IEEE 802.6</td><td>城城网介质访问控制协议DQDB (Distributed Queue Dual Bus 分布式队列双总线)及物理层技术规范。</td></tr><tr><td style="text-align:center">IEEE 802.7</td><td>宽带技术咨询组，提供有关宽带联网的技术咨询。</td></tr><tr><td style="text-align:center"><strong>IEEE 802.8</strong></td><td><strong>光纤技术咨询组，提供有关光纤联网的技术咨询</strong>。</td></tr><tr><td style="text-align:center">IEEE 802.9</td><td>综合声音数据的局城网 (IVD LAN)介质访问控制协议及物理层技术规范。</td></tr><tr><td style="text-align:center">IEEE 802.10</td><td>网络安全技术咨询组，定义了网络互操作的认证和加密方法。</td></tr><tr><td style="text-align:center"><strong>IEEE 802.11</strong></td><td><strong>无线局域网(WLAN)的介质访问控制协议及物理层技术规范</strong>。</td></tr><tr><td style="text-align:center">IEEE 802.11</td><td>1997年，原始标准(2Mbit/s，播在2.4GHz)。</td></tr><tr><td style="text-align:center">IEEE 802.11a</td><td>1999年，物理层补充 (54Mbit/s，播在5GHz)。</td></tr><tr><td style="text-align:center">IEEE 802.11b</td><td>1999年，物理层补充(11Mbit/s播在2.4GHz)。</td></tr></tbody></table><hr><ul><li><u><strong>LLC子层和MAC子层</strong></u></li></ul><p>IEEE 802标准所描述的局域网参考模型只对应OSI参考模型的<strong>数据链路层</strong>与<strong>物理层</strong>，它将数据链路层划分为逻辑链路层LLC子层和介质访问控制MAC子层。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_22-07-55.png" alt=""></p><p>【LLC子层】：LLC负责识别网络层协议，然后对它们进行封装。LLC报头告诉数据链路层一旦帧被接收到时，应当对数据包做何处理。为网络层提供服务：无确认无连接面向连接、带确认无连接、高速传送。</p><p>【MAC子层】：MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等。MAC子层的存在屏蔽了不同物理链路种类的差异性。</p><hr><h3 id="16、以太网">16、以太网</h3><ul><li><u><strong>以太网概述</strong></u></li></ul><p>以太网(<strong>Ethernet</strong>)指的是由Xerox公司创建并由Xerox、Intel和DEC公司联合开发的<strong>基带总线局域网规范</strong>，是当今现有局域网采用的最通用的通信协议标准。以太网络使用<strong>CSMA/CD</strong> (载波监听多路访问及冲突检测）技术。</p><p>以太网在局域网各种技术中占<strong>统治性地位</strong>:</p><ol><li>造价低廉(以太网网卡不到100块) ；</li><li>是应用最广泛的局域网技术；</li><li>比令牌环网、ATM网便宜，简单；</li><li><strong>满足网络速率要求:10Mb/s~10Gb/s</strong>。</li></ol><p>以太网的<strong>两个标准</strong>：</p><p><strong>DIX Ethernet V2：第一个局域网产品(以太网)规约</strong>。</p><p>I<strong>EEE 802.3：IEEE 802委员会802.3工作组制定的第一个IEEE的以太网标准</strong>。</p><p>(两个标准的区别：帧格式有一丢丢改动)</p><hr><ul><li><u><strong>以太网提供无连接、不可靠服务</strong></u></li></ul><p>无连接：发送方和接收方之间无“握手过程”</p><p>不可靠：不对发送方的数据顿<strong>编号</strong>，接收方不向发送方进行<strong>确认</strong>，差错帧直接丢弃，差错纠正由高层负责。</p><p><strong>以太网只实现无差错接收，不实现可靠传输</strong>。</p><hr><ul><li><u><strong>以太网传输介质与拓扑结构的发展</strong></u></li></ul><p>粗同轴电缆 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 细同轴电缆 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 双绞线+集线器</p><p>物理拓扑：总线型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 星型（以太网目前最常用的物理拓扑）</p><p>使用集线器的以太网在逻辑上仍是一个总线网,各站共享逻辑上的总线，使用的还是协议</p><p>以太网拓扑：逻辑上总线型，物理上星型</p><hr><ul><li><u><strong>10BASE-T以太网</strong></u></li></ul><p>10BASE-T是传送<strong>基带信号</strong>的双绞线以太网，T表示采用双绞线，现10BASE-T 采用的是<strong>无屏蔽双绞线</strong>(UTP)，传输速率是<strong>10Mb/s</strong>。</p><p><strong>物理上采用星型拓扑，逻辑上总线型</strong>，每段双绞线最长为100m。</p><p>采用<strong>曼彻斯特编码。</strong></p><p>采用<strong>CSMA/CD</strong>介质访问控制。</p><hr><ul><li><u><strong>适配器与MAC地址</strong></u></li></ul><p>计算机与外界有局域网的连接是通过<strong>通信适配器</strong>的。</p><p>网络接口板。</p><p>网络接口卡NIC (network interface card)。</p><p>现在不再使用单独网卡。</p><p>适配器上装有处理器和存储器 (包括RAM和ROM)。</p><p>ROM上有计算机硬件地址MAC地址。</p><p>在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】</p><p>MAC地址:每个适配器有一个<strong>全球唯一</strong>的48位二进制地址，前24位代表厂家(由IEEE规定)，后24位厂家自己指定。常用6个十六进制数表示，如02-60-8c-e4-b1-21。</p><hr><ul><li><u><strong>以太网MAC帧</strong></u></li></ul><p>最常用的MAC帧是以太网V2的格式。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_22-50-06.png" alt=""></p><hr><ul><li><u><strong>高速以太网</strong></u></li></ul><p>速率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≥</mo><mn>100</mn><mi>M</mi><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">\ge100Mb/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span>的以太网称为高速以太网</p><ol><li><p><strong>100BASE-T以太网</strong><br>在<strong>双绞线</strong>上传送<strong>100Mb/s基带信号</strong>的<strong>星型</strong>拓扑以太网，仍使用IEEE802.3的<strong>CSMA/CD</strong>协议。<br>支持全双工和半双工，可在全双工方式下工作而无冲突。</p></li><li><p>吉比特以太网<br>在<strong>光纤或双绞线</strong>上传送<strong>1Gb/s</strong>信号<br>支持全双工和半双工，可在全双工方式下工作而无冲突。</p></li><li><p>3.10吉比特<br>10吉比特以太网在<strong>光纤</strong>上传送<strong>10Gb/s</strong>信号。<br>只支持全双工，无争用问题。</p></li></ol><hr><h3 id="17、无线局域网">17、无线局域网</h3><ul><li><p><u><strong>IEEE 802.11</strong></u></p><p>IEEE 802.11是无线局域网通用的标准，它是由IEEE所定义的无线网络通信的标准。</p></li></ul><p>WiFi？IEEE 802.11b、IEEE 802.11g</p><hr><ul><li><u><strong>802.11的MAC帧头格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_23-14-25.png" alt=""></p><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">To DS</th><th style="text-align:center">From DS</th><th style="text-align:center">Adress1（接收端）</th><th style="text-align:center">Adress2（发送端）</th><th style="text-align:center">Adress3</th><th style="text-align:center">Adress4</th></tr></thead><tbody><tr><td style="text-align:center">IBSS</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">DA</td><td style="text-align:center">SA</td><td style="text-align:center">BSSID</td><td style="text-align:center">未使用</td></tr><tr><td style="text-align:center">To AP（基础结构型）</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">BSSID</td><td style="text-align:center">SA</td><td style="text-align:center">DA</td><td style="text-align:center">未使用</td></tr><tr><td style="text-align:center">From AP（基础结构型）</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">DA</td><td style="text-align:center">BSSID</td><td style="text-align:center">SA</td><td style="text-align:center">未使用</td></tr><tr><td style="text-align:center">WDS（无限分布式系统）</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">RA</td><td style="text-align:center">TA</td><td style="text-align:center">DA</td><td style="text-align:center">SA</td></tr></tbody></table><hr><ul><li><u><strong>无线局域网分类</strong></u><ol><li><strong>有固定基础设施无线局域网</strong></li><li><strong>无固定基础设施无线局域网的自组织网络</strong></li></ol></li></ul><hr><ul><li><u><strong>有固定基础设施无线局域网</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_23-21-19.png" alt=""></p><hr><ul><li><u><strong>无固定基础设施无线局域网的自组织网络</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-01-31_23-23-13.png" alt=""></p><hr><h3 id="18、PPP协议和HDLC协议">18、PPP协议和HDLC协议</h3><ul><li><u><strong>广域网</strong></u></li></ul><p>​广域网(WAN，Wide Area Network)，通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。</p><p>​广域网的通信子网主要使用<u><strong>分组交换</strong></u>技术。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的<strong>局域网或计算机系统</strong>互连起来，达到<u><strong>资源共享</strong></u>的目的。如因特网(Internet)是世界范围内最大的广域网。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-22-09.png" alt=""></p><hr><ul><li><u><strong>PPP协议的特点</strong></u></li></ul><p>点对点协议PPP (Point-to-Point Protocol) 是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都使用PPP协议。</p><p><strong>只支持<u>全双工</u>链路</strong>。</p><hr><ul><li><u><strong>PPP协议应满足的要求</strong></u></li></ul><p><strong>简单</strong> 对于链路层的帧，无需纠错，无需序号，无需流量控制。封装成帧 帧定界符</p><p><strong>透明传输</strong> 与帧定界符一样比特组合的数据应该如何处理：异步线路用字节填充，同步线路用比特填充。</p><p><strong>多种网络层协议</strong> 封装的IP数据报可以采用多种协议多种类型链路 串行/并行，同步/异步，电/光…</p><p><strong>差错检测</strong> 错就丢弃。</p><p><strong>检测连接状态</strong> 链路是否正常工作。</p><p><strong>最大传送单元</strong> 数据部分最大长度MTU。</p><p><strong>网络层地址协商</strong> 知道通信双方的网络层地址</p><p><strong>数据压缩协商</strong></p><hr><ul><li><u><strong>PPP协议无需满足的要求</strong></u></li></ul><p><strong>纠错</strong> 只需要检错</p><p><strong>流量控制</strong> 交给上层</p><p><strong>序号</strong> 无需对帧编号</p><p><strong>不支持多点线路</strong> 只需要点对点</p><hr><ul><li><u><strong>PPP协议的三个组成部分</strong></u><ol><li>一个将IP数据报封装到串行链路（同步串行/异步串行）的方法。</li><li>链路控制协议<strong>LCP</strong>：建立并维护数据链路连接。 身份验证</li><li>网络控制协议<strong>NCP</strong>：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接。</li></ol></li></ul><hr><ul><li><u><strong>PPP协议的状态图</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-33-02.png" alt=""></p><hr><ul><li><u><strong>PPP协议的帧格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-34-07.png" alt=""></p><p>都是以字节作为单位，所以说是<strong>面向字节</strong>。</p><hr><ul><li><u><strong>HDLC协议</strong></u></li></ul><p>高级数据链路控制 (Hieh-level Data link Control或简称HDLC)，是一个在同步网上传输数据、面向比特的数据路层协议，它是由国际标准化组织(<strong><u>ISO</u></strong>)根据BM公司的SDLC(SynchronousData Link Control)协议扩展开发而成的。</p><p>数据报文可透明传输，用于实现透明传输的“0比特插入法”易于硬件实现。</p><p>采用<strong>全双工通信</strong>。</p><p>所有帧采用<strong>CRC</strong>检验，对信息帧进行顺序<strong>编号</strong>，可防止漏收或重份，传输可靠性高。</p><hr><ul><li><p><u><strong>HDLC的站</strong></u></p><p><strong>主站、从站、复合站</strong></p></li></ul><ol><li>主站的主要功能是发送命令(包括数据信息)、接收响应，并负责对整个链路的控制系统的初启流程的控制、差错检测或恢复等。</li><li>从站的主要功能是接收由主站发来的命令帧，向主站发送响应帧，并且配合主站参与差错恢复等链路控制。</li><li>复合站的主要功能是既能发送，又能接收命令帧和响应帧，并且负责整个链路的控制。</li></ol><p><strong>三种数据操作方式</strong>:</p><ol><li>正常响应方式：从站要发送数据，需要主站的同意。</li><li>异步平衡方式：每一个复合站都可以对别的站数据传输。</li><li>异步响应方式：从站要发送数据，可以不经过主站的同意。</li></ol><hr><ul><li><u><strong>HDLC的帧格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-44-02.png" alt=""></p><ol><li>信息 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>) 第1位为0，用来<strong>传输数据信息</strong>，或使用捎带技术对数据进行确认。</li><li>监督帧 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>) 10，用于<strong>流量控制和差错控制</strong>，执行对信息帧的确认、请求重发和请求暂停发送等功能。</li><li>无编号帧 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>) 11，用于提供对<strong>链路</strong>的建立、拆除等多种控制功能。</li></ol><hr><ul><li><u><strong>PPP协议 &amp; HDLC协议</strong></u></li></ul><p>HDLC、PPP只支持<strong>全双工</strong>链路。</p><p>PPP协议既可以实现零比特填充，也可以使实现字节填充；HDLC只能实现零比特填充。</p><p>都可以实现透明传输。</p><p>都可以实现差错检测，但不纠正差错。</p><table><thead><tr><th>PPP协议</th><th>面向字节</th><th>2B协议字段</th><th>无序号和确认机制</th><th>不可靠</th></tr></thead><tbody><tr><td>HDLC协议</td><td>面向比特</td><td>没有</td><td>有编号和确认机制</td><td>可靠</td></tr></tbody></table><p>为什么HDLC协议可靠但是不总用它呢？因为太浪费了，在实际中要兼顾速率。</p><hr><h3 id="19、链路层设备">19、链路层设备</h3><ul><li><u><strong>物理层扩展以太网</strong>？</u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-56-00.png" alt=""></p><p>更好的方法？往下</p><hr><ul><li><p><u><strong>链路层扩展以太网</strong></u></p><p><strong>网桥 &amp; 交换机</strong></p></li></ul><p><strong>网桥</strong>根据<strong>MAC帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong>。当网桥收到一个帧时，并不向所有接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或者是把它丢弃 (即过滤)。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_10-59-57.png" alt=""></p><p>这里的冲突域也叫网段。</p><p><strong>网段</strong>：一般指一个计算机网络中使用同一物理层设备(传输介质，中继器，集线器等)能够直接通讯的那一部分。</p><p><strong>网桥优点</strong>:</p><ol><li>过滤通信量，增大吞吐量。</li><li>2.扩大了物理范围。</li><li>3.提高了可靠性。</li><li>.可互连不同物理层、不同MAC子层和不同速率的以太网。</li></ol><hr><ul><li><u><strong>网桥分类——透明网桥</strong></u></li></ul><p>透明网桥：“透明”指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备——<strong>自学习</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_11-09-34.png" alt=""></p><hr><ul><li><u><strong>网桥分类——源路由网桥</strong></u></li></ul><p>源路由网桥：在发送帧时，把详细的最佳路由信息路由最少/时间最短)放在的首部中。<br>方法：源站以广播方式向欲通信的目的站发送一个<strong>发现帧</strong>。</p><p>打个比方：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_11-14-19.png" alt=""></p><p>假设实际中有：</p><p>方案1：。。。</p><p>方案2：。。。</p><p>方案3：。。。</p><p>。。。。。。</p><p>如果方案3是最佳路由信息，那么将放在首部。</p><hr><ul><li><u><strong>多接口网桥——交换机</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_11-18-38.png" alt=""></p><hr><ul><li><p><u><strong>以太网交换机的两种交换方式</strong></u></p><ul><li><p><strong>直通式交换机</strong></p><p>查完目的地址 (6B) 就立刻转发。</p><p><strong>延迟小</strong>，可靠性低，无法支持具有不同速率的端口的交换。</p></li><li><p><strong>存储转发式交换机</strong></p><p>将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃。</p><p>延迟大，<strong>可靠性高，可以支持具有不同速率的端口的交换</strong>。</p></li></ul></li></ul><hr><ul><li><u><strong>冲突域 &amp; 广播域</strong></u></li></ul><p><strong>冲突域</strong>：在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。</p><p><strong>广播域</strong>：网络中能接收任一设备发出的广播帧的所有设备的集合。简单的说如果站点发出一个广播信号，所有能接收收到这个信号的设备范围称为一个广播域。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">能否隔离冲突域</th><th style="text-align:center">能否隔离广播域</th></tr></thead><tbody><tr><td style="text-align:center">物理层设备【傻瓜】<br />(中器、集线器)</td><td style="text-align:center">不能</td><td style="text-align:center">不能</td></tr><tr><td style="text-align:center">链路层设备【路人】<br />(网桥、交换机)</td><td style="text-align:center">能</td><td style="text-align:center">不能</td></tr><tr><td style="text-align:center">网络层设备【大佬】<br />(路由器)</td><td style="text-align:center">能</td><td style="text-align:center">能</td></tr></tbody></table><p>例题：下图有几个冲突域名，几个广播域？</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_11-26-48.png" alt=""></p><p>答案：4；1。</p><p>解析：有交换机隔离出4个冲突域；没有被隔离，所以整体是一个广播域。</p><hr><h2 id="第四章、网络层">第四章、网络层</h2><h3 id="1、网络层功能概述">1、网络层功能概述</h3><ul><li><p><u><strong>网络层</strong></u></p><p>主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上的不同主机提供通信服务。</p><p>网络层传输单位是<strong>数据报</strong>。</p><ul><li><p><strong>功能一：路由选择与分组转发 <u>最佳路径</u></strong></p></li><li><p><strong>功能二：异构网络互联 <u>路由器</u></strong></p></li><li><p><strong>功能三：拥塞控制</strong></p><p>若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施缓解这种拥塞：</p><ul><li>WAY1: 开环控制（静态）</li><li>WAY2: 闭环控制（动态）</li></ul></li></ul></li></ul><hr><h3 id="2、电路交换、报文交换和分组交换">2、电路交换、报文交换和分组交换</h3><ul><li><u><strong>网络的”掌中宝“</strong></u></li></ul><p>【<strong>一堆主机</strong>】 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 【<strong>一堆路由器</strong>】 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 【<strong>一堆主机</strong>】</p><p>如何是数据通过网络的核心【路由器】从源主机到达目的主机？<strong>数据交换</strong></p><hr><ul><li><u><strong>为什么需要数据交换</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_12-29-19.png" alt=""></p><hr><ul><li><u><strong>数据交换方式</strong></u><ul><li><strong>电路交换</strong></li><li><strong>报文交换</strong></li><li><strong>分组交换</strong><ul><li>数据报方式</li><li>虚电路方式</li></ul></li></ul></li></ul><hr><ul><li><p><u><strong>电路交换</strong></u></p><p>举例：电话网络</p></li></ul><p>电话交换的阶段：建立连接（呼叫/电路建立） <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 通信 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 释放连接（拆除电路）</p><p>特点：独占资源。</p><p><strong>优点</strong>：</p><ol><li>通信延时小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ol><p><strong>缺点</strong>:</p><ol><li>建立接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ol><hr><ul><li><u><strong>报文交换</strong></u></li></ul><p>报文：源应用发送的信息整体。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_12-39-57.png" alt=""></p><p><strong>优点</strong>:</p><ol><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>多目标服务</li></ol><p><strong>缺点</strong>:</p><ol><li>有存储转发时延</li><li>报文大小不定，需要网络节点有较 大缓存空间</li></ol><hr><ul><li><u><strong>分组交换</strong></u></li></ul><p>分组：把大的数据块分割成小的数据块</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_12-42-31.png" alt=""></p><p><strong>优点</strong>:</p><ol><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>相对于报文交换，存储管理更容易</li></ol><p><strong>缺点</strong>:</p><ol><li>有存储转发时延</li><li>需要传输额外的信息量</li><li>乱序到目的主机时，要对分组排序重组</li></ol><hr><ul><li><u><strong>报文交换 &amp; 分组交换</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_12-48-31.png" alt=""></p><p>报文交换：（串行）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>10000</mn><mi>b</mi><mi>i</mi><mi>t</mi></mrow><mrow><mn>1000</mn><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mn>10</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">\frac{10000bit}{1000b/s}=10s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4001em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span><span class="mord mathnormal mtight">b</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10000</span><span class="mord mathnormal mtight">bi</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mi>s</mi><mo>+</mo><mn>10</mn><mi>s</mi><mo>+</mo><mn>10</mn><mi>s</mi><mo>=</mo><mn>30</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">10s + 10s + 10s = 30s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mord mathnormal">s</span></span></span></span></p><p>分组交换：（并行）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>10000</mn><mi>b</mi><mi>i</mi><mi>t</mi></mrow><mrow><mn>1000</mn><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mn>10</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">\frac{10000bit}{1000b/s}=10s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4001em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span><span class="mord mathnormal mtight">b</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10000</span><span class="mord mathnormal mtight">bi</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>10</mn><mi>b</mi><mi>i</mi><mi>t</mi></mrow><mrow><mn>1000</mn><mi>b</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mn>0.01</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">\frac{10bit}{1000b/s}=0.01s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4001em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span><span class="mord mathnormal mtight">b</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span><span class="mord mathnormal mtight">bi</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.01</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mi>s</mi><mo>+</mo><mn>0.01</mn><mi>s</mi><mo>+</mo><mn>0.01</mn><mi>s</mi><mo>=</mo><mn>10.02</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">10s + 0.01s + 0.01s = 10.02s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.01</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.01</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10.02</span><span class="mord mathnormal">s</span></span></span></span></p><p>所以生活中最常用的是分组交换方式，因特网。</p><p><strong>计算题中要注意的几点</strong>:</p><ol><li>单位换算。</li><li>2.是否考虑传播延迟（一般不考虑，看题目）。</li><li>时间至少是多少——选择最少跳数。</li><li>起始时间（从发送开始到接收完为止 / 从发送开始到发送完毕）</li><li>是否有分组头部大小的开销</li><li>报文交换时延更长，分组交换时延可能不是整数</li></ol><hr><ul><li><u><strong>三种数据交换方式比较</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_12-56-50.png" alt=""></p><ol><li><strong>报文交换</strong>和<strong>分组交换</strong>都采用存储转发</li><li>传送数据量大，且传送时间远大于呼叫时，选择<strong>电路交换</strong>。电路交换传输时延最小。</li><li>从信道利用率看，报文交换和分组交换优于电路交换，其中分组交换时延更小。</li></ol><hr><h3 id="3、数据报与虚电路">3、数据报与虚电路</h3><ul><li><u><strong>数据报方式 &amp; 虚电路方式</strong></u></li></ul><p>数据报方式为网络层提供无连接服务。</p><p>虚电路方式为网络层提供连接服务。</p><p><strong>无连接服务</strong>：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同。</p><p><strong>连接服务</strong>：首先为分组的传输确定传输路径(建立连接)，然后沿该路径(连接)传输系列分组，系列分组传输路径相同，传输结束后拆除连接。</p><hr><ul><li><u><strong>几种传输单元名词解析</strong></u></li></ul><p> 应用层 <strong> 报文</strong></p><p> 传输层 <strong> 报文段</strong></p><p> 网络层 <strong> IP数据报，分组</strong></p><p>数据链路层 <strong>帧</strong></p><p> 物理层  <strong>比特流</strong></p><hr><ul><li><u><strong>数据报（因特网在用）</strong></u></li></ul><p><strong>无连接服务</strong>：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同。</p><p><strong>每个分组携带源和目的地址</strong>。</p><p><strong>路由器根据分组的目的地址转发分组</strong>：基于路由协议/算法构建转发表；检索转发表；每个分组独立选路。</p><hr><ul><li><u><strong>虚电路</strong></u></li></ul><p>虚电路将数据报方式和电路交换方式结合，以发挥两者优点。</p><p>虚电路：一条源主机到目的主机类似于电路的路径(逻辑连接)，路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项记录了一个打开的虚电路的信息。</p><p>通信过程:</p><p><strong>建立连接（虚电路建立）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 数据传输 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 释放连接（虚电路释放）</strong></p><p>说明：</p><p>建立连接（虚电路建立）：每个分组携带<strong>虚电路号</strong>，而非目的地址。源主机发送“呼叫请求”分组并收到“呼叫应答分组后才算建立连接。</p><p>数据传输：全双工通信。</p><p>释放连接（虚电路释放）：源主机发送“释放请求“，分组以拆除虚电路。</p><hr><ul><li><u><strong>数据报 &amp; 虚电路</strong></u></li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">数据报服务</th><th style="text-align:left">虚电路服务</th></tr></thead><tbody><tr><td style="text-align:center">连接的建立</td><td style="text-align:left">不要</td><td style="text-align:left">必须有</td></tr><tr><td style="text-align:center">目的地址</td><td style="text-align:left">每个分组都有完整的目的地址</td><td style="text-align:left">仅在建立连接阶段使用，之后每个分组使用长度较短的虚电路号</td></tr><tr><td style="text-align:center">路由选择</td><td style="text-align:left">每个分组独立的进行路由选择和转发</td><td style="text-align:left">属于同一条虚电路的分组按同一路由转发</td></tr><tr><td style="text-align:center">分组顺序</td><td style="text-align:left">不保证分组有序到达</td><td style="text-align:left">保证分组有序到达</td></tr><tr><td style="text-align:center">可靠性</td><td style="text-align:left">不保证可靠通信，可靠性由主机来保证</td><td style="text-align:left">可靠性由网络保证</td></tr><tr><td style="text-align:center">对网络故障的适应性</td><td style="text-align:left">出故障的结点丢失分组，其他分组路径选择发生变化，可正常传输</td><td style="text-align:left">所有经过故障结点的虚电路均不能正常工作</td></tr><tr><td style="text-align:center">差错处理和流量控制</td><td style="text-align:left">由用户主机进行流量控制，不保证数据报的可靠性</td><td style="text-align:left">可由分组交换网负责，也可由用户主机负责</td></tr></tbody></table><hr><h3 id="4、IP数据报格式">4、IP数据报格式</h3><ul><li><u><strong>TCP/IP协议栈</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-20-57.png" alt=""></p><hr><ul><li><u><strong>IP数据报格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-22-37.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-24-34.png" alt=""></p><p><strong>版本</strong>：IPv4/IPv6?</p><p><strong>首部长度</strong>：单位是<strong>4B</strong>，最小为5。</p><p><strong>区分服务</strong>：指示期望获得哪种类型的服务。</p><p><strong>总长度</strong>：首部+数据，单位是<strong>1B</strong>。</p><p><strong>生存时间(TTL)</strong> ：IP分组的保质期。经过一个路由器-1，变成0则丢弃。</p><p><strong>协议</strong>：数据部分的协议。（要记住TCP和UDP）</p><table><thead><tr><th style="text-align:center">协议名</th><th style="text-align:center">ICMP</th><th style="text-align:center">IGMP</th><th style="text-align:center"><u>TCP</u></th><th style="text-align:center">EGP</th><th style="text-align:center">IGP</th><th style="text-align:center"><u>UDP</u></th><th style="text-align:center">IPv6</th><th style="text-align:center">ESP</th><th style="text-align:center">OSPF</th></tr></thead><tbody><tr><td style="text-align:center">字段值</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"><u><strong>6</strong></u></td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center"><u><strong>17</strong></u></td><td style="text-align:center">41</td><td style="text-align:center">50</td><td style="text-align:center">89</td></tr></tbody></table><p><strong>首部检验和</strong>：只检验首部。</p><p><strong>源IP地址和目的IP地址</strong>：32位。</p><p><strong>可选字段</strong>：0~40B,用来支持排错测量以及安全等措施。</p><p><strong>填充</strong>：全0，把首部补成4B的整数倍。</p><hr><h3 id="5、IP数据报分片">5、IP数据报分片</h3><ul><li><u><strong>最大传送单元MTU</strong></u></li></ul><p>链路层数据帧可封装数据的上限。</p><p>以太网的MTU是1500字节。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_16-00-12.png" alt=""></p><p>如果所传送的数据报长度超过某链路的MTU值? <strong>分片</strong></p><hr><ul><li><u><strong>IP数据报格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-24-34.png" alt=""></p><p><strong>标识</strong>：同一数据报的分片使用同一标识。</p><p><strong>标志</strong>：只有2位有意义。<br>最高位：保留不使用。<br><strong>中间位DF</strong>(Don’tFragment)：DF=1，禁止分片；DF=0，允许分片<br><strong>最低位MF</strong>(More Fragment)：MF=1，后面“还有分片”；MF=0，代表最后一片/没分</p><p><strong>片偏移</strong>：指出较长分组分片后某片在原分组中的相对位置。以<strong>8B</strong>为单位。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 除了最后一个分片，每个分片长度一定是<strong>8B的整数倍</strong>。</p><hr><ul><li><u><strong>IP数据报分片例题</strong></u></li></ul><p>需要分片为长度不超过1420B的数据报片</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_16-14-46.png" alt=""></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">总长度(B)</th><th style="text-align:center">标识</th><th style="text-align:center">MF</th><th style="text-align:center">DF</th><th style="text-align:center">片偏移(8B)</th></tr></thead><tbody><tr><td style="text-align:center">原始数据报</td><td style="text-align:center">3820</td><td style="text-align:center">12345</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">数据报片1</td><td style="text-align:center">1420</td><td style="text-align:center">12345</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">数据报片2</td><td style="text-align:center">1420</td><td style="text-align:center">12345</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">175</td></tr><tr><td style="text-align:center">数据报片3</td><td style="text-align:center">1020</td><td style="text-align:center">12345</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">350</td></tr></tbody></table><hr><h3 id="6、IPv4地址">6、IPv4地址</h3><ul><li><u><strong>IP地址</strong></u></li></ul><p>在哪个网络？</p><p>是哪个主机？</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <strong>IP地址</strong></p><hr><ul><li><u><strong>IP编址的历史阶段</strong></u></li></ul><p>分类的IP地址 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 子网的划分 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 构成超网（无分类编址方法）</p><hr><ul><li><u><strong>分类的IP地址</strong></u></li></ul><p>IP地址：全世界唯一的<strong>32位/4字节</strong>的标识符，标识路由器主机的接口。</p><p>IP地址::={&lt;网络号&gt;,&lt;主机号&gt;}</p><p>11011111 00000001 00000001 00000001</p><p> 网络号      主机号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 223.1.1.1</p><hr><ul><li><u><strong>互联网中的IP地址</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_17-36-46.png" alt=""></p><hr><ul><li><u><strong>分类的IP地址</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_17-38-02.png" alt=""></p><table><thead><tr><th style="text-align:center">网络类别</th><th style="text-align:center">最大可用网络数</th><th style="text-align:center">每个网络中的最大主机数</th><th style="text-align:center">第一个可用网络号</th><th style="text-align:center">最后一个可用网络号</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2^7-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span><br />（全0、全1）</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2^{24}-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">24</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span><br />（全0、全1）</td><td style="text-align:center">1</td><td style="text-align:center">126</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{14}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">14</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br />(全0)</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2^{16}-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span><br />（全0、全1）</td><td style="text-align:center">128.1</td><td style="text-align:center">191.255</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>21</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{21}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br />(全0)</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2^{8}-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span><br />（全0、全1）</td><td style="text-align:center">192.0.1</td><td style="text-align:center">233.255.255</td></tr></tbody></table><hr><ul><li><u><strong>特殊IP地址</strong></u></li></ul><table><thead><tr><th style="text-align:center">NetID网络号</th><th style="text-align:center">HostId主机号</th><th style="text-align:center">作为IP分组源地址</th><th style="text-align:center">作为IP分组目的地址</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:center">全0</td><td style="text-align:center">全0</td><td style="text-align:center">可以</td><td style="text-align:center">不可以</td><td style="text-align:left">本网范围内表示主机，路由表中用于表示默认路由(表示整个Internet网络)</td></tr><tr><td style="text-align:center">全0</td><td style="text-align:center">特殊值</td><td style="text-align:center">不可以</td><td style="text-align:center">可以</td><td style="text-align:left">表示本网内某个特定主机</td></tr><tr><td style="text-align:center">全1</td><td style="text-align:center">全1</td><td style="text-align:center">不可以</td><td style="text-align:center">可以</td><td style="text-align:left">本网广播地址(路由器不转发)</td></tr><tr><td style="text-align:center">特殊值</td><td style="text-align:center">全0</td><td style="text-align:center">不可以</td><td style="text-align:center">不可以</td><td style="text-align:left">网络地址，表示一个网络</td></tr><tr><td style="text-align:center">特殊值</td><td style="text-align:center">全1</td><td style="text-align:center">不可以</td><td style="text-align:center">可以</td><td style="text-align:left">直接广播地址，对特定网络上的所有主机进行广播</td></tr><tr><td style="text-align:center">127</td><td style="text-align:center">任何数（非全0/1）</td><td style="text-align:center">可以</td><td style="text-align:center">可以</td><td style="text-align:left">用于本地软件换回测试，称为环回地址</td></tr></tbody></table><hr><ul><li><u><strong>私有IP地址</strong></u></li></ul><table><thead><tr><th style="text-align:center">地址类别</th><th style="text-align:center">地址范围</th><th style="text-align:center">网段个数</th></tr></thead><tbody><tr><td style="text-align:center">A类</td><td style="text-align:center">10.0.0.0 ~ 10.255.255.255</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">B类</td><td style="text-align:center">172.16.0.0 ~ 172.31.255.255</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">C类</td><td style="text-align:center">192.168.0.0 ~ 192.168.255.255</td><td style="text-align:center">256</td></tr></tbody></table><p>路由器对目的地址是私有IP地址的数据报一律不进行转发。</p><hr><h3 id="7、网络地址转换NAT">7、网络地址转换NAT</h3><ul><li><u><strong>网络地址转换NAT</strong></u></li></ul><p>网络地址转换<strong>NAT</strong> (Network Address Translation)：在<strong>专用网</strong>连接到<strong>因特网</strong>的路由器上安装NAT软件，安装了NAT<br>软件的路由器叫<strong>NAT路由器</strong>，它至少有一个有效的<strong>外部全球IP地址</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_19-08-12.png" alt=""></p><hr><h3 id="8、子网划分和子网掩码">8、子网划分和子网掩码</h3><ul><li><u><strong>子网划分</strong></u></li></ul><p>分类IP地址的弱点：</p><ol><li>IP地址的空间利用率有时候很低</li><li>两级IP地址不够灵活</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_20-13-06.png" alt=""></p><p>某单位划分子网后，对外仍表现为一个网络，即本单位外的网络看不见本单位内子网的划分。</p><p>子网号能否全1或全0要看情况。</p><p>主机号不能全0或全1。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_20-15-41.png" alt=""></p><hr><ul><li><u><strong>子网掩码</strong></u></li></ul><p><strong>子网掩码与IP地址逐位相与，就得到子网网络地址</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_20-17-59.png" alt=""></p><hr><ul><li><u><strong>子网掩码——练习题</strong></u></li></ul><p><strong>例题1</strong>：已知IP地址是141.14.72.24，子网掩码是255.255.192.0，求网络地址。 如果子网掩码是255.255.224.0，求网络地址。</p><p>141.14 和 255.255 相与为 141.14；</p><p>24 与 0 相与为 0；</p><p>72:   0100 1000</p><p>192: 1100 0000</p><p>相与: 0100 0000</p><p>所以网络地址为 141.14.64.0</p><p>同理 下一问答案为 141.14.64.0</p><p>常见二进制：</p><table><thead><tr><th style="text-align:center">二级制</th><th style="text-align:center">十进制</th></tr></thead><tbody><tr><td style="text-align:center">1000 0000</td><td style="text-align:center">128</td></tr><tr><td style="text-align:center">1100 0000</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">1110 0000</td><td style="text-align:center">224</td></tr><tr><td style="text-align:center">1111 0000</td><td style="text-align:center">240</td></tr><tr><td style="text-align:center">1111 1000</td><td style="text-align:center">248</td></tr><tr><td style="text-align:center">1111 1100</td><td style="text-align:center">252</td></tr><tr><td style="text-align:center">1111 1110</td><td style="text-align:center">254</td></tr><tr><td style="text-align:center">1111 1111</td><td style="text-align:center">255</td></tr></tbody></table><p><strong>例题2</strong>：某主机的IP地址为180.80.77.55，子网掩码为255.255.252.0。若该主机向其所在子网发送广播分组，则目的地址可以是(  )     A.180.80.76.0   B.180.80.76.255   C.180.80.77.255   D.180.80.79.255</p><p>解析：</p><p>先将IP地址180.80.77.55与子网掩码相与，结果得到子网为180.80.76.0；</p><p>再看子网掩码中，252：1111 1100，所以子网位数为6位再加上255.255这里16位，一共22位；</p><p>子网位数为22，则主机号位数为10，又因为发送的是广播分组，主机号全为1；</p><p>所以结果为子网22位，再加10个1，即180.80.79.255。</p><hr><ul><li><u><strong>使用子网时分组的转发</strong></u></li></ul><p>路由表中：</p><ol><li>目的网络地址</li><li>目的网络子网掩码</li><li>下一跳地址</li></ol><p><strong>路由器转发分组的算法</strong>:</p><ol><li>提取目的IP地址</li><li>是否直接交付（直接交付：目的IP就在路由器所连的子网上）</li><li>特定主机路由</li><li>检测路由表中有无路径（目的IP和路由器所有子网掩码相与）</li><li>默认路由 0.0.0.0（发给下一个路由器）</li></ol><p>重复1-5步，直到找到，或者生命周期结束，丢弃，报告转发分组出错。</p><hr><h3 id="9、无分类编址CIDR">9、无分类编址CIDR</h3><ul><li><u><strong>无分类编址CIDR</strong></u></li></ul><p>无分类域间路由选择CIDR:</p><ol><li>消除了传统的A类，B类和C类地址以及划分子网的概念</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_21-12-12.png" alt=""></p><p>CIDR记法：IP地址后加上“/”，然后写上网络前缀 (可以任意长度)的位数。e.g.128.14.32.0/<strong>20</strong></p><ol start="2"><li><p>融合子网地址与子网掩码，方便子网划分。</p><p>CIDR把<strong>网络前缀都相同</strong>的连续的IP地址组成一个”CIDR地址块”。</p><p>举例：128.14.35.7/20是某CIDR地址块中的一个地址</p><p>二进制: <u><strong>10000000 00001110 0010</strong></u>0011 00000111</p><p>最小地址：<u><strong>10000000 00001110 0010</strong></u>0000 00000000</p><p>最大地址：<u><strong>10000000 00001110 0010</strong></u>1111 11111111</p><p>地址块: 128.14.32.0/20 不需要指明起始地址时，也可以写作“/20地址块“</p><p>地址掩码(子网掩码)：<u><strong>10000000 00001110 0010</strong></u>0000 00000000</p></li></ol><hr><ul><li><u><strong>构成超网</strong></u></li></ul><p>将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合</p><p>方法：将网络前缀缩短。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_21-20-34.png" alt=""></p><hr><ul><li><u><strong>最长前缀匹配</strong></u></li></ul><p>使用CIDR时，查找路由表可能得到几个匹配结果，应选择具有最长网络前缀的路由。前缀越长，地址块越小,路由越具体。</p><p><strong>例题</strong>：路由器RO的路由表见下表：若进入路由器RO的分组的目的地址为132.19.237.5，请问该分组应该被转发到哪一个下一跳路由器 (  )。</p><p> A.R1 B.R2 C.R3 D.R4</p><table><thead><tr><th style="text-align:center">目的网络</th><th style="text-align:center">下一帧</th></tr></thead><tbody><tr><td style="text-align:center">132.0.0.0/8</td><td style="text-align:center">R1</td></tr><tr><td style="text-align:center">132.0.0.0/11</td><td style="text-align:center">R2</td></tr><tr><td style="text-align:center">132.19.232.0/22</td><td style="text-align:center">R3</td></tr><tr><td style="text-align:center">0.0.0.0/0</td><td style="text-align:center">R4</td></tr></tbody></table><p>解析：132.19.237.5，按8、11、22计算出子网为：132.0.0.0、132.0.0.0、132.19.236.0；</p><p>可见前两项都匹配，但是132.0.0.0/11前缀匹配更多，所以答案选B。</p><hr><ul><li><u><strong>习题</strong></u></li></ul><p>【2010】某网络的IP地址空间为192.168.5.0/24，采用定长子网划分，子网掩码为255.255.255.248，则该网络中的最大子网个数、每个子网内的最大可分配地址个数分别是 (  ）</p><p> A.32,8 B.32,6 C.8,32 D.8,30</p><p>解析：本题在CIDR的基础上又划分了子网。</p><p>除去24位，那么最后八位由于子网掩码248：11111000，那么有五位是子网位数，3位是主机号，所以最大子网个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup><mo>=</mo><mn>32</mn></mrow><annotation encoding="application/x-tex">2^5=32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">32</span></span></span></span>，最大可分配地址个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>−</mo><mn>2</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">2^3-2=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>。答案选B。</p><hr><h3 id="10、ARP协议">10、ARP协议</h3><ul><li><u><strong>发送数据的过程</strong></u></li></ul><p>1、发给本网络</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_22-03-18.png" alt=""></p><p>2、发给另一网络</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_22-03-42.png" alt=""></p><hr><ul><li><u><strong>ARP协议</strong></u></li></ul><p>由于在实际网络的链路上传送数据帧时，最终必须使用MAC地址。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> ARP协议：完成主机或路由器IP地址到MAC地址的映射。<strong>解决下一跳走哪的问题</strong></p><p>ARP协议使用过程：检查ARP高速缓存，有对应表项则写入MAC帧，没有则用目的MAC地址为FF-FF-FF-FF-FF-FF的封装并<strong>广播ARP请求分组</strong>，<strong>同一局域网</strong>中所有主机都能收到该请求。目的主机收到请求后就会向源主机<strong>单播一个ARP响应分组</strong>，源主机收到后将此映射<strong>写入ARP缓存</strong> (10-20min更新一次)。</p><p>ARP协议4种典型情况:</p><ol><li>主机A发给<strong>本网络</strong>上的主机B：用ARP找到主机B的硬件地址；</li><li>主机A发给<strong>另一网络</strong>上的主机B：用ARP找到本网络上一个路由器(网关)的硬件地址；</li><li>路由器发给<strong>本网络</strong>的主机A：用ARP找到主机A的硬件地址；</li><li>路由器发给<strong>另一网络</strong>的主机B：用ARP找到本网络上的一个路由器的硬件地址。</li></ol><p><strong>ARP协议自动进行</strong></p><hr><ul><li><u><strong>ARP协议习题</strong></u></li></ul><p>主机发送IP数据报给主机B，经过了5个路由器，请问此过程总共使用了几次ARP协议?</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_22-13-50.png" alt=""></p><p>答案：6次</p><hr><h3 id="11、DHCP协议">11、DHCP协议</h3><ul><li><p><u><strong>主机如何获得IP地址</strong>？</u></p><ul><li><p><strong>静态配置</strong></p><p>IP地址、子网掩码、默认网关</p></li><li><p><strong>动态配置</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_22-42-33.png" alt=""></p></li></ul></li></ul><hr><ul><li><u><strong>DHCP协议</strong></u></li></ul><p>动态主机配置协议DHCP是<strong>应用层</strong>协议，使用<strong>客户/服务器</strong>方式，客户端和服务端通过<strong>广播</strong>方式进行交互，基于<strong>UDP</strong>。</p><p>DHCP提供<strong>即插即用</strong>联网的机制，主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称与IP地址，允许<strong>地址重用</strong>，支持<strong>移动用户加入网络</strong>，支持<strong>在用地址续租</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_22-42-33.png" alt=""></p><p>工作流程：</p><ol><li><p>主机广播DHCP<strong>发现</strong>报文</p><p><strong>“有没有DHCP服务器呀?”</strong><br>试图找到网络中的服务器，服务器获得一个IP地址。</p></li><li><p>DHCP服务器广播DHCP<strong>提供</strong>报文</p><p><strong>“有!”“有!”“有!”</strong></p><p>服务器拟分配给主机一个IP地址及相关配置，先到先得</p></li><li><p>主机广播DHCP<strong>请求</strong>报文</p><p><strong>”我用你给我的IP地址啦?”</strong></p><p>主机向服务器请求提供IP地址</p></li><li><p>DHCP服务器广播DHCP<strong>确认</strong>报文</p><p><strong>“用吧!”</strong></p><p>正式将IP地址分配给主机。</p></li></ol><hr><h3 id="12、ICMP协议">12、ICMP协议</h3><ul><li><u><strong>TCP/IP协议栈</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-20-57.png" alt=""></p><p>ICMP：为了更有效地转发IP数据报和提高交付成功的机会…</p><hr><ul><li><u><strong>网际控制报文协议ICMP</strong></u><ul><li><strong>ICMP差错报文</strong></li><li><strong>ICMP询问报文</strong></li></ul></li></ul><p>ICMP协议支持主机或路由器：</p><p>差错（或者异常）报告 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 发送特定ICMP报文</p><p>网络探询</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_07-53-01.png" alt=""></p><hr><ul><li><u><strong>ICMP差错报告报文（5种）</strong></u></li></ul><p>1、<strong>终点不可达</strong>：当路由器或主机不能交付数据报时就向源点发送终点不可达报文。（<strong>无法交付</strong>）</p><p>2、<strong>源点抑制</strong>（已取消使用）：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。（<strong>拥塞丢数据</strong>）</p><p>3、<strong>时间超过</strong>：当路由器收到生存时间TTL=0的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。（<strong>TTL=0</strong>）</p><p>4、<strong>参数问题</strong>：当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。（<strong>首部字段有问题</strong>）</p><p>5、<strong>改变路由(重定向)</strong> ：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。（<strong>值得更好的路由</strong>）</p><hr><ul><li><u><strong>ICMP差错报告报文数据字段</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_07-59-39.png" alt=""></p><hr><ul><li><u><strong>不应该发送ICMP差错报文的情况</strong></u></li></ul><p>1、对<strong>ICMP差错报告报文</strong>不再发送ICMP差错报告报文。</p><p>2、对第一个分片的数据报片的所有<strong>后续数据报片</strong>都不发送ICMP差错报告报文。</p><p>3、对具有<strong>组播地址</strong>的数据报都不发送ICMP差错报告报文</p><p>4、对具有<strong>特殊地址</strong>(如127.0.0.0或0.00.0)的数据报不发送ICMP差错报告报文。</p><hr><ul><li><u><strong>ICMP询问报文</strong></u></li></ul><p>1、回送请求和回答报文</p><p>主机或路由器向特定目的主机发出的询问，收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。<strong>测试目的站是否可达以及了解其相关状态</strong>。</p><p>2、时间戳请求和回答报文</p><p>请某个主机或路由器回答当前的日期和时间。<strong>用来进行时钟同步和测量时间</strong>。</p><p>3、掩码地址请求和回答报文（不再使用）</p><p>4、路由器询问和通告报文（不再使用）</p><hr><ul><li><u><strong>ICMP的应用</strong></u></li></ul><p><strong>PING</strong>  测试两个主机的连通性，使用了ICMP回送请求和回答报文。</p><p><strong>Traceroute</strong>  跟踪一个分组从源点到终点的路径，使用了<strong>ICMP时间超过差错报文</strong>。（发送一连串数据报， TTL分别为1, 2, 3…）</p><hr><h3 id="13、IPv6">13、IPv6</h3><ul><li><u><strong>为什么要有IPv6</strong>?</u></li></ul><p>32位IPv4地址空间会分配完…</p><p><strong>CIDR</strong>、<strong>NAT</strong>治标不治本</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> <strong>IPv6</strong> 从根本上解决了地址耗尽问题</p><p>改进首部格式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <strong>快速处理/转发数据报</strong>、<strong>支持QoS</strong></p><p>Qos (Quality of Service，服务质量)指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力，是网络的一种安全机制，是用来解决网络延迟和阻塞等问题的一种技术。</p><hr><ul><li><u><strong>IPv6数据报格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_08-37-12.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_08-37-15.png" alt=""></p><p><strong>版本</strong>：指明了协议版本，总是6.</p><p><strong>优先级</strong>：区分数据报的类别和优先级</p><p><strong>流标签</strong>：“流”是互联网络上从特定源点到特定终点的一系列数据报。所有属于同一个流的数据报都具有同样的流标签。</p><p><strong>跳数限制</strong>：相当于IPv4的TTL。</p><p><strong>下一个首部</strong>：标识下一个扩展首部或上层协议首部。</p><hr><ul><li><u><strong>IPv6和IPv4</strong></u></li></ul><p>1、IPv6将地址从32位(4B)扩大到<strong>128位(16B)</strong> ，更大的地址空间。</p><p>2、IPv6将IPv4的<strong>校验和字段彻底移除</strong>，以减少每跳的处理时间。</p><p>3、IPv6将IPV4的可选字段移出首部，变成了<strong>扩展首部</strong>，成为灵活的首部格式，路由器通常不对扩展首部进行检查，大大提高了路由器的处理效率。</p><p>4、IPv6支持<strong>即插即用</strong>(即自动配置)，不需要DHCP协议。</p><p>5、IPv6首部长度必须是<strong>8B的整数倍</strong>，IPv4首部是4B的整数倍。</p><p>6、IPv6<strong>只能在主机处分片</strong>，IPv4可以在路由器和主机处分片。</p><p>7、ICMPv6:附加报文类型“分组过大”。</p><p>8、IPv6支持资源的预分配，支持实时视像等要求，保证一定的带宽和时延的应用。</p><p>9、IPv6取消了协议字段，改成下一个首部字段。</p><p>10、IPv6取消了总长度字段，改用有效载荷长度字段。</p><p>11、IPv6取消了服务类型字段。</p><hr><ul><li><u><strong>IPv6地址表示形式</strong></u></li></ul><p><strong>一般形式</strong>  冒号十六进制记法：4BF5:AA12:0216:FEBC:BA5F:039A:BE9A:2170</p><p><strong>压缩形式</strong></p><p>4BF5:0000:0000:0000:BA 5F:039A:000A:2176</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 4BF5:0:0:0:BA5F:39A:A:2176</p><p>零压缩：一连串连续的0可以被一对冒号取代。</p><p>FF05:0:0:0:0:0:0:B3</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> FF05::B3</p><p>双冒号表示法在一个地址中仅可出现一次。</p><hr><ul><li><u><strong>IPv6基本地址类型</strong></u></li></ul><p><strong>单播</strong>  一对一通信  可做源地址+目的地址</p><p><strong>多播</strong>  一对多通信  可做目的地址</p><p><strong>任播</strong>  一对多中的一个通信</p><hr><ul><li><u><strong>IPv6向IPv4过渡的策略</strong></u></li></ul><p><strong>双栈协议</strong>：</p><p>双协议栈技术就是指在一台设备上<strong>同时启用IPv4协议栈和IPv6协议栈</strong>。这样的话，这台设备既能和IPv4网络通信，又能和IPv6网络通信。如果这台设备是一个<strong>路由器</strong>，那么这台路由器的不同接口上，分别配置了IPv4地址和IPv6地址，并很可能分别连接了IPv4网络和IPv6网络。如果这台设备是一个<strong>计算机</strong>，那么它将同时拥有IPv4地址和IPv6地址，并具备同时处理这两个协议地址的功能。</p><p><strong>隧道技术</strong>:</p><p>通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据(或负载可以是不同协议的数据帧或包。隧道协议将其它协议的数据帧或包（作为数据部分）<strong>重新封装</strong>然后通过隧道发送。</p><hr><h3 id="14、路由算法与路由协议概述">14、路由算法与路由协议概述</h3><ul><li><u><strong>路由算法</strong></u></li></ul><p>路由表/路由转发表</p><table><thead><tr><th style="text-align:center">目的网络IP地址</th><th style="text-align:center">子网掩码</th><th style="text-align:center">下一跳IP地址</th><th style="text-align:center">接口</th></tr></thead></table><p>最佳路电：“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。</p><hr><ul><li><p><u><strong>路由算法的分类</strong></u></p><ul><li><p><strong>静态路由算法</strong>（非自适应路由算法）</p><p>管理员手工配置路由信息。</p><p><strong>简便、可靠，在负荷稳定、拓扑变化不大的网络中运行效果很好，广泛用于高度安全性的军事网络和较小的商业网络</strong>。</p><p><strong>路由更新慢，不适用大型网络</strong>。</p></li><li><p><strong>动态路由算法</strong>（自适应路由算法）</p><p>路由器间彼此交换信息，按照路由算法优化出路由表项。</p><p><strong>路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化</strong>。</p><p><strong>算法复杂，增加网络负担</strong>。</p><ul><li><p><strong>全局性</strong></p><p>链路状态路由算法 典型应用：<strong>OSPF协议</strong></p><p>所有路由器掌握完整的网络拓扑和链路费用信息。</p></li><li><p><strong>分散性</strong></p><p>距离向量路由算法 典型应用：<strong>RIP协议</strong></p><p>路由器只掌握物理相连的邻居及链路费用。</p></li></ul></li></ul></li></ul><hr><ul><li><u><strong>分层次的路由选择协议</strong></u></li></ul><p>问题：</p><p>(1)因特网规模很大。<br>(2) 许多单位不想让外界知道自己的路由选择协议，但还想连入因特网。</p><p>解决：</p><p><strong>路由器在本自治系统内都必须连通</strong>。</p><p>路由选择协议：</p><p><strong>内部网关协议IGP</strong> 一个AS内使用的 <strong>RIP、OSPF</strong>；</p><p><strong>外部网关协议EGP</strong> AS之间使用的 <strong>BGP</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-01_15-45-53.png" alt=""></p><hr><h3 id="15、RIP协议与距离向量算法">15、RIP协议与距离向量算法</h3><ul><li><u><strong>RIP协议</strong></u></li></ul><p>RIP是一种分布式的基于<strong>距离向量</strong>的路由选择协议，是因特网的协议标准，最大优点是<strong>简单</strong>。</p><p>RIP协议要求网络中每一个路由器都维护<strong>从它自己到其他每一个目的网络的唯一最佳距离记录</strong>(即一组距离)。</p><p>距离：通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数+1。特别的，从一路由器到直接连接的网络距离为1。RIP允许一条路由最多只能包含15个路由器，因此距离为<strong>16表示网络不可达</strong>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> RIP协议只适用于<strong>小互联网</strong>。</p><hr><ul><li><u><strong>RIP协议和谁交换? 多久交换一次? 交换什么?</strong></u></li></ul><p>1、仅和<strong>相邻路由器</strong>交换信息。</p><p>2、路由器交换的信息是<strong>自己的路由表</strong>。</p><p>3、<strong>每30秒</strong>交换一次路由信息，然后路由器根据新信息更新路由表。若超过180s没收到邻居路由器的通告，则判定邻居没了，并更新自己路由表。</p><p>路由器刚开始工作时，只知道直接连接的网络的距离(距离为1)，接着每一个路由器也只和数目非常有限的相令路由器交换并更新路由信息。</p><p>经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“<strong>收敛</strong>”。</p><hr><ul><li><u><strong>距离向量算法</strong></u></li></ul><p>1、修改相邻路由器发来的RIP报文中所有表项</p><p>对地址为X的相邻路由器发来的RIP报文，修改此报文中的所有项目：把“下一跳”字段中的地址改为X，并把所有的“距离”字段+1。</p><p>2、对修改后的RIP报文中的每一个项目，进行以下步骤:</p><p> (1) R1路由表中若没有X，则把该项目填入R1路由表</p><p> (2) R1路由表中若有X，则查看下一跳路由器地址:</p><p>  若下一跳是X，则用收到的项目替换源路由表中的项目;<br>  若下一跳不是X，原来距离比从X走的距离远则更新，否则不作处理。</p><p>3、若180s还没收到相邻路由器X的更新路由表，则把X记为不可达的路由器，即把距离设置为16。</p><p>4、返回。</p><hr><ul><li><u><strong>距离向量算法练习1</strong></u></li></ul><p>已知路由器R6的路由表，现收到相邻路由器R4发来的路由更新信息，试更新路由器R1的路由表:</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_09-29-31.png" alt=""></p><hr><ul><li><u><strong>距离向量算法练习2</strong></u></li></ul><p>考虑如图所示的子网，该子网使用了距离-向量算法，下面的向量刚刚到达路由器C：来自B的向量为(5, 0, 8, 12, 6, 2)；来自D的向量为(16, 12, 6, 0, 9, 10)；来自E的向量为(7, 6, 3, 9, 0, 4)。经过测量，C到B、D和E的延迟分别为6，3和5，那么C到达所有结点的最短路径是( )。</p><p> A.(5, 6, 0, 9, 6, 2)</p><p> B.(11, 6, 0, 3, 5, 8 )</p><p> C.(5, 11, 0, 12, 8, 9)</p><p> D.(11 ,8 ,0, 7, 4, 9)</p><p>解析：</p><table><thead><tr><th style="text-align:center">向量名称</th><th style="text-align:center">(A,  B,  C,  D,  E,  F)</th><th style="text-align:center">(A,  B,  <u>C</u>,  D,  E,  F)</th></tr></thead><tbody><tr><td style="text-align:center">来自B</td><td style="text-align:center">(5,   <strong>0</strong>,   8, 12,  6,  2)</td><td style="text-align:center">(<strong>11</strong>, <strong>6</strong>, 14,18, 12,  <strong>8</strong>)</td></tr><tr><td style="text-align:center">来自D</td><td style="text-align:center">(16,12,  6,  <strong>0</strong>,   9, 10)</td><td style="text-align:center">(19,15,   9,  <strong>3</strong>, 12, 13)</td></tr><tr><td style="text-align:center">来自E</td><td style="text-align:center">(7,   6,   3,  9,   <strong>0</strong>,   4)</td><td style="text-align:center">(12,11,   8,14,   <strong>5</strong>,  9)</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center"></td><td style="text-align:center"><strong>(11, 6,   0,  3,  5,  8)</strong></td></tr></tbody></table><p>所以答案为B</p><hr><ul><li><u><strong>RIP协议的报文格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_09-58-39.png" alt=""></p><p>RIP是<strong>应用层协议</strong>使用<strong>UDP</strong>传送数据。</p><p>一个RIP报文最多可包括25 个路由，如超过，必须再用一个RIP报文传送。</p><hr><ul><li><u><strong>RIP协议好消息传得快，坏消息传得慢</strong></u></li></ul><p>RIP的特点：当网络出现故障时，要经过比较长的时间(例如数分钟) 才能将此信息传送到所有的路由器，“慢收敛”。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_13-25-50.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_13-26-04.png" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>说：“我到网1的距离是16(表示无法到达)，是直接交付；</p><p>但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在收到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的更新报文之前，还发送原来的报文，因为这时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，并不知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>出了故障；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>收到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的更新报文后，误认为可经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到达网1，于是更新自己的路由表，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>说：“我到网1的距离是3，下一跳经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>”。然后将此更新信息发送给<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>以后又更新自己的路由表为“1，4，R,”，表明“我到网1距离是4，下一跳经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>”；</p><p>这样不断更新下去，直到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到网1的距离都增大到16时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>才知道网1是不可达的。</p><hr><h3 id="16、OSPF以及链路状态算法">16、OSPF以及链路状态算法</h3><ul><li><u><strong>OSPF协议</strong></u></li></ul><p>开放最短路径优先OSPF协议：“开放”标明OSPF协议不是受某一家厂商控制，而是<strong>公开发表</strong>的：“最短路径优先“是因为使用了<strong>Diikstra</strong>提出的最短路径算法<strong>SPF</strong>。</p><p>OSPF最主要的特征就是使用分布式的<strong>链路状态协议</strong>。</p><p>OSPF的特点:</p><p><strong>和谁交换？</strong></p><ol><li>使用洪泛法向自治系统内<strong>所有路由器</strong>发送信息，即路由器通过输出端口向所有相邻的路由器发送信息，而每一个相邻路由器又再次将此信息发往其所有的相邻路由器。<strong>广播</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 最终整个区域内所有路由器都得到了这个信息的一个副本。</li></ol><p><strong>交换什么？</strong></p><ol start="2"><li>发送的信息就是与本路由器<strong>相邻的所有路由器的链路状态</strong>(本路由器和哪些路由器相邻，以及该链路的度量/代价一一费用、距离、时延、带宽等)。</li></ol><p><strong>多久交换？</strong></p><ol start="3"><li>只有当<strong>链路状态发生变化时</strong>，路由器才向所有路由器洪泛发送此信息。</li></ol><p>最后，所有路由器都能建立一个<strong>链路状态数据库</strong>，即<strong>全网拓扑图</strong>。</p><hr><ul><li><u><strong>链路状态路由算法</strong></u></li></ul><p>1、每个路由器发现它的邻居结点【HELLO问候分组】，并了解邻居节点的网络地址。</p><p>2、设置到它的每个邻居的成本度量metric。</p><p>3、构造【DD数据库描述分组】，向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。</p><p>4、如果DD分组中的摘要自己都有，则邻站不做处理；如果有没有的或者是更新的，则发送【LSR链路状态请求分组】请求自己没有的和比自己更新的信息。</p><p>5、收到邻站的LSR分组后，发送【LSU链路状态更新分组】进行更新。</p><p>6、更新完毕后，邻站返回一个【LSAck链路状态确认分组】进行确认。</p><p>只要一个路由器的链路状态发生变化:</p><p>5、泛洪发送【LSU链路状态更新分组】进行更新。</p><p>6、更新完毕后，其他站返回一个【LSAck链路状态确认分组】进行确认。</p><p>7、使用Dijkstra根据自己的链路状态数据库构造到其他节点间的最短路径。</p><hr><ul><li><u><strong>OSPF的区域</strong></u></li></ul><p>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若个更小的范围，叫做区域。</p><p>每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。</p><p>区域也不能太大，在一个区域内的路由器最好不超过 200 个。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-22-06.png" alt=""></p><hr><ul><li><u><strong>OSPF分组</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-24-21.png" alt=""></p><p>OSPF直接用<strong>IP数据报</strong>传送。</p><p>【考纲】：OSPF是<strong>网络层协议</strong>。</p><hr><ul><li><u><strong>OSPF其他特点</strong></u></li></ul><p>1、每隔<strong>30min</strong>，要刷新一次数据库中的链路状态。</p><p>2、由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此当<strong>互联网规模很大</strong>时，OSPF 协议要比距离向量协议 RIP 好得多。</p><p>3、OSPF不存在坏消息传的慢的问题，它的<strong>收敛速度很快</strong>。</p><hr><h3 id="17、BGP协议">17、BGP协议</h3><ul><li><u><strong>BGP协议</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-44-20.png" alt=""></p><p><strong>和谁交换?</strong><br>与其他AS的邻站BGP发言人交换信息。</p><p><strong>交换什么?</strong><br>交换的网络可达性的信息，即要到达某个网络所要经过的一系列AS。</p><p><strong>多久交换?</strong><br>发生变化时更新有变化的部分。</p><hr><ul><li><u><strong>BGP协议交换信息的过程</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-46-57.png" alt=""></p><p>BGP所交换的网络可达性的信息就是要<strong>到达某个网络所要经过的一系列AS</strong>。当BGP 发言人互相交换了网络可达性的信息后，各 BGP 发言人就根据所采用的策略从收到的路由信息中找出到达各AS的较好路由。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-52-27.png" alt=""></p><p>BGP发言人交换<strong>路径向量</strong>:</p><p>自治系统<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">AS_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的 BGP 发言人通知主干网<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">AS_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的BGP 发言人：“要到达网络<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">N_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">N_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">AS_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>主干网还可发出通知：“要到达网络 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">N_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">N_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">N_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可沿路径(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">AS_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">AS_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。</p><hr><ul><li><u><strong>BGP协议报文格式</strong></u></li></ul><p>一个BGP发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要<strong>先建立TCP 连接</strong>，即通过TCP传送，然后在此连接上交换 BGP 报文以建立 BGP 会话(session)，利用 BGP 会话交换路由信息。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_10-55-03.png" alt=""></p><p>BGP是<strong>应用层协议</strong>，借助<strong>TCP</strong>传送</p><hr><ul><li><u><strong>BGP协议特点</strong></u></li></ul><p>BGP支持<strong>CIDR</strong>。因此BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</p><p>在BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表。但以后只需要在<strong>发生变化时更新有变化的部分</strong>。这样做对节省网络带宽和减少路由器的处理开销都有好处。</p><hr><ul><li><u><strong>BGP-4的四种报文</strong></u></li></ul><p>1、<strong>OPEN(打开)报文</strong>：用来与相邻的另一个BGP发言人建立关系，并认证发送方。</p><p>2、<strong>UPDATE(更新) 报文</strong>：通告新路径或撤销原路径。</p><p>3、<strong>KEEPALIVE(保活)报文</strong>：在无UPDATE时，周期性证实邻站的连通性:也作为OPEN的确认。</p><p>4、<strong>NOTIFICATION(通知) 报文</strong>：报告先前报文的差错:也被用于关闭连接。</p><hr><ul><li><u><strong>三种路由协议比较</strong></u></li></ul><p><strong>RIP</strong>是一种分布式的基于距离向量的内部网关路由选择协议，通过广播<strong>UDP</strong>报文来交换路由信息。</p><p><strong>OSPF</strong>是一个内部网关协议，要交换的信息量较大，应使报文的长度尽量短，所以不使用传输层协议(如UDP或TCP)，而是直接采用<strong>IP</strong>。</p><p><strong>BGP</strong>是一个外部网关协议，在不同的自治系统之间交换路由信息，由于网络环境复杂，需要保证可靠传输，所以采用<strong>TCP</strong>。</p><table><thead><tr><th style="text-align:center">协议</th><th style="text-align:center">RIP</th><th style="text-align:center">OSPF</th><th style="text-align:center">BGP</th></tr></thead><tbody><tr><td style="text-align:center">类型</td><td style="text-align:center">内部</td><td style="text-align:center">内部</td><td style="text-align:center">外部</td></tr><tr><td style="text-align:center">路由算法</td><td style="text-align:center">距离-向量</td><td style="text-align:center">链路状态</td><td style="text-align:center">路径-向量</td></tr><tr><td style="text-align:center">传递协议</td><td style="text-align:center">UDP</td><td style="text-align:center">IP</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">路径选择</td><td style="text-align:center">跳数最少</td><td style="text-align:center">代价最低</td><td style="text-align:center">较好、非最佳</td></tr><tr><td style="text-align:center">交换节点</td><td style="text-align:center">和本结点相邻的路由器</td><td style="text-align:center">网络中的所有路由器</td><td style="text-align:center">和本结点相邻的路由器</td></tr><tr><td style="text-align:center">交换内容</td><td style="text-align:center">当前本路由器知道的全部信息，即自己的路由表</td><td style="text-align:center">与本路由器相邻的所有路由器的链路状态</td><td style="text-align:center">首次，整个路由表<br/>非首次，有变化的部分</td></tr></tbody></table><hr><h3 id="18、IP组播">18、IP组播</h3><ul><li><u><strong>IP数据报的三种传输方式</strong></u></li></ul><p><strong>单播</strong></p><p>单播用于发送数据包到单个目的地，且每发送一份单播报文都使用一个单播IP地址作为目的地址。是一种<strong>点对点</strong>传输方式。<br>在发送者和每一接收者之间需要<strong>单独的数据信道</strong>。</p><p><strong>广播</strong></p><p>广播是指发送数据包到同一广播域或子网内的所有设备的一种数据传输方式，是一种<strong>点对多点</strong>传输方式。</p><p><strong>组播（多播）</strong></p><p>当网络中的某些用户需要特定数据时组播数据发送者仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发，是一种<strong>点对多点</strong>传输方式。<br>组播提高了数据传送效率。减少了主干网出现拥塞的可能性。组播组中的主机可以是在同一个物理网络，也可以来自不同的物理网络 (如果有组播路由器的支持)。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 运行组播协议的路由器</p><hr><ul><li><u><strong>IP组播地址</strong></u></li></ul><p>IP组播地址让源设备能够将分组发送给一组设备。属于多播组的设备将被分配一个<strong>组播组IP地址</strong>(一群共同需求主机的相同标识)。<br>组播地址范围为<strong>224.0.0.0~239.255.255.255(D类地址)</strong> ，一个D类地址表示一个组播组。只能用作分组的<strong>目标地址</strong>。源地址总是为<strong>单播地址</strong>。</p><p>1.组播数据报也是“尽最大努力交付”，不提供可靠交付，应用于<strong>UDP</strong>。</p><p>2.对组播数据报不产生ICMP差错报文。</p><p>3.并非所有D类地址都可以作为组播地址。</p><p>又分为：因特网范围内组播、硬件组播。</p><hr><ul><li><u><strong>硬件组播</strong></u></li></ul><p>同单播地址一样，组播IP地址也需要相应的组播MAC地址在本地网络中实际传送帧。组播MAC地址以十六进制值<strong>01-00-5E</strong>打头，余下的6个十六进制位是根据IP组播组地址的最后23位转换得到的</p><p>TCP/IP 协议使用的以太网多播地址的范围是:<br> 从<strong>01-00-5E-00-00-00</strong>到<strong>01-00-5E-7F-FF-FF</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_13-39-21.png" alt=""></p><p>若多个IP组播地址最后23位相同：收到多播数据报的主机，还要在IP层利用软件进行过滤，把不是本主机要接收的数据报丢弃。</p><hr><ul><li><u><strong>IGMP协议与组播路由选择协议</strong></u></li></ul><p>因特网范围内组播：</p><p>IGMP协议</p><p>组播路由选择协议</p><hr><ul><li><u><strong>网际管理协议</strong></u></li></ul><p>IGMP协议让路由器知道本局域网上<strong>是否有主机(的进程)参加或退出了某个组播组</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_14-03-58.png" alt=""></p><hr><ul><li><u><strong>IGMP工作的两个阶段</strong></u></li></ul><p><strong>ROUND 1</strong>:</p><p>某主机要加入组播组时，该主机向组播组的组播地址发送一个IGMP报文，声明自己要称为该组的成员本地组播路由器收到IGMP报文后，要利用组播路由选择协议把这组成员关系发给因特网上的其他组播路由器。</p><p><strong>ROUND 2</strong>:</p><p>本地组播路由器周期性探询本地局域网上的主机，以便知道这些主机是否还是组播组的成员。</p><p>只要有一个主机对某个组响应，那么组播路由器就认为这个组是活跃的:如果经过几次探询后没有一个主机响应，组播路由器就认为本网络上的没有此组播组的主机，因此就不再把这组的成员关系发给其他的组播路由器。</p><p><strong>组播路由器知道的成员关系只是所连接的局域网中有无组播组的成员，不知道多少个</strong>。</p><hr><ul><li><u><strong>组播路由转发协议</strong></u></li></ul><p>组播路由选择协议目的是找出以源主机为根节点的<strong>组播转发树</strong>。</p><p>构造树可以避免在路由器之间兜圈子。</p><p>对不同的多播组对应于不同的多播转发树；同一个多播组，对不同的源点也会有不同的多播转发树</p><p>组播路由选择协议常使用的三种算法:</p><p><strong>基于链路状态的路由选择</strong></p><p><strong>基于距离-向量的路由选择</strong></p><p><strong>协议无关的组播(稀疏/密集)</strong></p><hr><h3 id="19、移动IP">19、移动IP</h3><ul><li><u><strong>移动IP的相关术语</strong></u></li></ul><p>移动IP技术是移动结点(计算机/服务器等)以<strong>固定的网络IP地址</strong>，实现跨越不同网段的<strong>漫游</strong>功能，并保证了基于网络IP的网络权限在漫游过程中不发生任何改变。</p><p><strong>移动结点</strong>  具有永久IP地址的移动设备</p><p><strong>归属代理(本地代理)</strong>  一个移动结点拥有的就“居所”称为<strong>归属网络</strong>，在归属网络中代表移动节点执行移动管理功能的实体叫做<strong>归属代理</strong>。</p><p><strong>外部代理(外地代理)</strong>  在外部网络中帮助移动节点完成移动管理功能的实体称为外部代理。</p><p><strong>永久地址 (归属地址/主地址 )</strong>  移动站点在归属网络中的原始地址。</p><p><strong>转交地址 (辅地址)</strong>  移动站点在外部网络使用的临时地址。</p><hr><ul><li><u><strong>移动IP通信过程</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_14-22-40.png" alt=""></p><p><strong>A刚进入外部网络</strong>:</p><ol><li>在外部代理登记获得一个转交地址，离开时注销。</li><li>外地代理向本地代理登记转交地址。</li></ol><p><strong>B给A发送数据报</strong>:</p><ol><li>本地代理截获数据报。</li><li>本地代理再封装数据报，新的数据报目的地址是转交地址，发给外部代理(隧道)。</li><li>外部代理拆封数据报并发给A。</li></ol><p><strong>A给B发送数据报</strong>:</p><p> A用自己的主地址作为数据报源地址，用B的IP地址作为数据报的目的地址。（不需要在经过代理）</p><p><strong>A移动到了下一个网络</strong>：</p><ol><li>在新外部代理登记注册一个转交地址。</li><li>新外部代理给本地代理发送新的转交地址覆盖旧的)。</li><li>通信。</li></ol><p><strong>A回到了归属网络</strong>:</p><ol><li>A向本地代理注销转交地址。</li><li>按原始方式通信。</li></ol><hr><h3 id="20、网络层设备">20、网络层设备</h3><ul><li><u><strong>路由器</strong></u></li></ul><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_14-35-53.png" alt=""></p><p>根据所选定的路由选择协议<strong>构造出路由表</strong>，同时经常或定期地和相邻路由器交换路由信息而不断地<strong>更新和维护路由表</strong>。</p><p>交换结构：根据转发表(路由表得来)对分组进行转发。</p><p>转发VS路由选择：转发：输入端口到输出端口；路由选择：路由器。</p><p>若收到RIP/OSPF分组等，则把分组送往路由选择处理机；若收到数据分组，则查找转发表并输出。</p><hr><ul><li><u><strong>输入端口对线路上收到的分组的处理</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_14-42-48.png" alt=""></p><p>输入端口中的<strong>查找和转发</strong>功能在路由器的交换功能中是最重要的。</p><hr><ul><li><u><strong>输出端口将交换结构传送来的分组发送到线路</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_14-43-02.png" alt=""></p><p>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。<br><strong>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因</strong>。</p><hr><ul><li><u><strong>三层设备的区别</strong></u></li></ul><p><strong>路由器</strong>  可以互联两个不同网络层协议的网段。</p><p><strong>网桥</strong>  可以互联两个物理层和链路层不同的网段。</p><p><strong>集线器</strong>  不能互联两个物理层不同的网段。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">能否隔离冲突域</th><th style="text-align:center">能否隔离广播域</th></tr></thead><tbody><tr><td style="text-align:center">物理层设备【傻瓜】<br />(中器、集线器)</td><td style="text-align:center">不能</td><td style="text-align:center">不能</td></tr><tr><td style="text-align:center">链路层设备【路人】<br />(网桥、交换机)</td><td style="text-align:center">能</td><td style="text-align:center">不能</td></tr><tr><td style="text-align:center">网络层设备【大佬】<br />(路由器)</td><td style="text-align:center">能</td><td style="text-align:center">能</td></tr></tbody></table><hr><ul><li><u><strong>路由表与路由转发</strong></u></li></ul><p>路由表根据<strong>路由选择算法</strong>得出的，主要用途是路由选择，总用软件来实现。</p><p>路由表</p><table><thead><tr><th style="text-align:center">目的网络IP地址</th><th style="text-align:center">子网掩码</th><th style="text-align:center">下一跳IP地址</th><th style="text-align:center">接口</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">0.0.0.0(默认路由)</td><td style="text-align:center">0.0.0.0</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 转发表</p><p>转发表由<strong>路由表</strong>得来，可以用软件实现，也可以用特殊的硬件来实现。转发表必须包含完成转发功能所必需的信息，在转发表的每一行必须包含从要到达的目的网络到输出端口和某些MAC地址信息的映射。】</p><hr><h2 id="第五章、传输层">第五章、传输层</h2><h3 id="1、传输层概述">1、传输层概述</h3><ul><li><p><u><strong>传输层</strong></u></p><p>只有主机才有的层次。</p></li></ul><p>传输层的功能：</p><ol><li>传输层提供<strong>进程和进程</strong>之间的逻辑通信。<br>网络层提供<strong>主机之间</strong>的逻辑通信。</li><li>复用和分用。</li><li>传输层对收到的报文进行差错检测。</li><li>传输层的两种协议。</li></ol><hr><ul><li><u><strong>传输层的两个协议</strong></u></li></ul><p>传输层有两个好兄弟;</p><p>大哥TCP和二弟UDPl</p><p>大哥靠谱，二弟不靠谱。</p><p><strong>VS</strong>:</p><p><strong>面向连接的传输控制协议TCP</strong>：<br>传送数据之前必须建立连接，数据传送结束后要释放连接。不提供广播或多播服务。由于TCP要提供可靠的面向连接的传输服务，因此不可避免增加了许多开销：确认、流量控制、计时器及连接管理等。<br><strong>可靠，面向连接，时延大，适用于大文件</strong>。</p><p><strong>无连接的用户数据报协议UDP</strong>：<br>传送数据之前不需要建立连接，收到UDP报文后也不需要给出任何确认。<br><strong>不可靠，无连接，时延小，适用千小文件</strong>。</p><hr><ul><li><u><strong>传输层的寻址与端口</strong></u></li></ul><p>复用：应用层所有的应用进程都可以通过传输层再传输到网络层。<br>分用：传输层从网络层收到数据后交付指明的应用进程。</p><p><strong>端口（逻辑端口/软件端口）</strong>：是传输层的SAP(访问服务点)，标识主机中的应用进程。</p><p>端口号只有本地意义，在因特网中不同计算机的相同端口是没有联系的。</p><p>端口号长度为<strong>16bit</strong>，能表示65536个不同的端口号。</p><p>端口号（按范围分）：</p><ul><li><p><strong>服务端</strong>使用的端口号</p><ul><li>熟知端口号（0~1023）：给TCP/IP最重要的一些应用程序，让所有用户都知道。</li><li>登记端口号（1024~49151）：为没有熟知端口号的应用程序使用的。</li></ul></li><li><p><strong>客户端</strong>使用的端口号（49152 ~ 65535）:</p><p>仅在客户进程运行时才动态选择。</p></li></ul><table><thead><tr><th style="text-align:center">应用程序</th><th style="text-align:center">FTP</th><th style="text-align:center">TELNET</th><th style="text-align:center">SMTP</th><th style="text-align:center">DNS</th><th style="text-align:center">TFTP</th><th style="text-align:center">HTTP</th><th style="text-align:center">SNMP</th></tr></thead><tbody><tr><td style="text-align:center">熟知端口号</td><td style="text-align:center">21</td><td style="text-align:center">23</td><td style="text-align:center">25</td><td style="text-align:center">53</td><td style="text-align:center">69</td><td style="text-align:center">80</td><td style="text-align:center">161</td></tr></tbody></table><p>在网络中采用发送方和接收方的套接字组合来识别端点，<strong>套接字</strong>唯一标识了网络中的一个主机和它上面的一个进程。<br><strong>套接字socket = (主机IP地址，端口号)</strong></p><hr><h3 id="2、UDP协议">2、UDP协议</h3><ul><li><u><strong>用户数据报UDP概述</strong></u></li></ul><p>UDP只在IP数据报服务之上增加了很少功能，即复用分用和差错检测功能。</p><p>UDP的主要特点:</p><ol><li><p>UDP是<strong>无连接</strong>的，减少开销和发送数据之前的时延。</p></li><li><p>UDP使用最大努力交付，即<strong>不保证可靠交付</strong>。</p></li><li><p>UDP是<strong>面向报文</strong>的，适合一次性传输少量数据的网络应用。</p><p>应用层给UDP多长的报文，UDP就照样发送，即一次发一个完整报文。</p></li><li><p>UDP<strong>无拥塞控制</strong>，适合很多实时应用</p></li><li><p>UDP<strong>首部开销小</strong>，<strong>8B</strong>，TCP：20B</p></li></ol><hr><ul><li><u><strong>UDP首部格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_18-22-32.png" alt=""></p><p><strong>UDP长度</strong>：UDP用户数据报的<strong>整个</strong>长度。<br><strong>16位UDP检验和</strong>：检测整个UDP数据报是否有错，错就丢弃。</p><p>另一种出错情况：分用时，找不到对应的目的端口号，就丢弃报文，并给发送方发送ICMP“端口不可达”差错报告报文。</p><hr><ul><li><u><strong>UDP校验</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_18-26-49.png" alt=""></p><p>伪首部只有在计算检验和时才出现，不向下传送也不向上递交。<br>17：封装UDP报文的IP数据报首部协议字段是17。<br>UDP长度：UDP首部8B+数据部分长度(不包括伪首部)。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_18-30-46.png" alt=""></p><p>在<strong>发送端</strong>:</p><ol><li>填上伪首部。</li><li>全0填充检验和字段。</li><li>全0填充数据部分(UDP数据报要看成许多4B的字串接起来)</li><li>伪首部+首部+数据部分采用二进制反码求和。</li><li>把和求反码填入检验和字段。</li><li>去掉伪首部，发送。</li></ol><p>在<strong>接收端</strong>:</p><ol><li>填上伪首部。</li><li>伪首部+首部+数据部分采用二进制反码求和。</li><li>结果全为1则无差错，否则丢弃数据报/交给应用层附上出差错的警告。</li></ol><hr><h3 id="3、TCP协议特点和TCP报文段格式">3、TCP协议特点和TCP报文段格式</h3><ul><li><u><strong>TCP协议的特点</strong></u></li></ul><p>1、TCP是面向连接(虚连接) 的传输层协议。</p><p>2、每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。</p><p>3、TCP提供可靠交付的服务，无差错、不丢失、不重复、按序到达。<strong>可靠有序，不丢不重</strong></p><p>4、TCP提供全双工通信。</p><p> <strong>发送缓存</strong> 准备发送的数据 &amp; 已发送但尚未收到确认的数据</p><p> <strong>接收缓存</strong> 按序到达但尚未被接受应用程序读取的数据 &amp; 不按序到达的数据</p><p>5、TCP面向字节流。</p><p> TCP把应用程序交下来的数据看成仅仅是一连串的<strong>无结构的字节流</strong>。</p><p> 流：流入到进程或从进程流出的字节序列。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-06-37.png" alt=""></p><hr><ul><li><u><strong>TCP报文段首部格式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-08-05.png" alt=""></p><p><strong>序号</strong>：在一个TCP连接中传送的字节流中的每一个字节都按顺序编号，本字段表示本报文段所发送数据的<strong>第一个字节的序号</strong>。<br><strong>确认号</strong>：<strong>期望</strong>收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则证明到序号N-1为止的所有数据都已正确收到。<br><strong>数据偏移(首部长度)</strong> ：TCP报文段的数据起始处距离TCP报文段的起始处有多远以<strong>4B</strong>位单位，即1个数值是4B。</p><p>6个控制位：</p><ol><li><strong>紧急位URG</strong>：URG=1时，标明此报文段中有紧急数据，是高优先级的数据，应尽快传送，不用在缓存里排队，配合紧急指针字段使用。</li><li><strong>确认位ACK</strong>：ACK=1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li><li>推送位PSH（几乎不考）：PSH=1时，接收方尽快交付接收应用进程，不再等到缓存填满再向上交付。</li><li>复位RST（几乎不考）：RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立传输链接。</li><li><strong>同步位SYN</strong>：SYN=1时，表明是一个连接请求/连接接受报文。</li><li><strong>终止位FIN</strong>：FIN=1时，表明此报文段发送方数据已发完，要求释放连接。</li></ol><p><strong>窗口</strong>：指的是发送本报文段的一方的接收窗口，即现在允许对方发送的数据量。<br><strong>检验和</strong>：检验首部+数据，检验时要加上12B伪首部，第四个字段为6。<br><strong>紧急指针</strong>：URG=1时才有意义，指出本报文段中紧急数据的字节数。<br><strong>选项</strong>：最大报文段长度MSS、窗口扩大、时间戳、选择确认…</p><hr><h3 id="4、TCP连接管理">4、TCP连接管理</h3><ul><li><u><strong>TCP连接管理</strong></u></li></ul><p>TCP连接的三个阶段：连接建立 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 数据传送 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 连接释放</p><p>TCP连接的建立采用<strong>客户服务器方式</strong>，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器。</p><hr><ul><li><u><strong>TCP的连接建立(三次握手)</strong></u></li></ul><p>假设运行在一台主机(客户)上的一个进程想与另一台主机(服务器)上的一个进程建立一条连接，客户应用进程首先通知客户TCP，他想建立一个与服务器上某个进程之间的连接，客户中的TCP会用以下步骤与服务器中的TCP建立一条TCP连接:</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-40-48.png" alt=""></p><p><strong>ROUND 1</strong>:<br>客户端发送连接请求报文段，无应用层数据。<br>SYN=1，seq=x(随机)（seq就是上一节的<strong>序号</strong>）</p><p><strong>ROUND 2</strong>:<br>服务器端为该TCP连接分配缓存和变量，并向客户端返回确认报文段，允许连接，无应用层数据。<br>SYN=1，ACK=1，seq=y(随机)，ack=x+1（ack就是上一节的<strong>确认号</strong>）</p><p><strong>ROUND 3</strong>:<br>客户端为该TCP连接分配缓存和变量，并向服务器端返回确认的确认，可以携带数据。<br>SYN=0，ACK=1，seg=x+1，ack=y+1</p><hr><ul><li><u><strong>SYN洪范攻击</strong></u></li></ul><p>SYN洪泛攻击发生在OSI第四层，这种方式利用<strong>TCP</strong>协议的特性，就是三次握手。攻击者发送TCP SYN，SYN是TCP三次握手中的<strong>第一个数据包</strong>，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送非常大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了。</p><hr><ul><li><u><strong>TCP的连接释放(四次握手)</strong></u></li></ul><p>参与一条TCP连接的两个进程中的任何一个都能终止该连接，连接结束后，主机中的“资源”(缓存和变量)将被释放。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-41-21.png" alt=""></p><p><strong>ROUND 1</strong>:<br>客户端发送连接释放报文段，停止发送数据，主动关闭TCP连接。<br>FIN=1，seq=u</p><p><strong>ROUND 2</strong>:<br>服务器端回送一个确认报文段，客户到服务器这个方向的连接就释放了一一半关闭状态。<br>ACK=1，seq=v，ack=u+1</p><p><strong>ROUND 3</strong>:<br>服务器端发完数据，就发出连接释放报文段，主动关闭TCP连接。<br>FIN=1，ACK=1，seq=w，ack=u+1</p><p><strong>ROUND 4</strong>:<br>客户端回送一个确认报文段，再等到时间等传+时器设置的<strong>2MSL(最长报文段寿命)</strong> 后，连接底关闭。</p><hr><h3 id="5、TCP可靠传输">5、TCP可靠传输</h3><ul><li><u><strong>TCP可靠传输</strong></u></li></ul><p>传输层：使用TCP实现可靠传输。<br>网络层：提供尽最大努力交付，不可靠传输。</p><p><strong>可靠：保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的</strong>。</p><p>TCP实现可靠传输的机制：</p><ol><li><p><strong>校验</strong></p><p>与UDP校验一样，增加伪首部</p></li><li><p><strong>序号</strong></p></li><li><p><strong>确认</strong></p></li><li><p><strong>重传</strong></p></li></ol><hr><ul><li><u><strong>序号</strong></u></li></ul><p>一个字节占一个序号。<br><strong>序号字段</strong>指的是一个报文段第一个字节的序号。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-59-07.png" alt=""></p><hr><ul><li><u><strong>确认</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_20-58-38.png" alt=""></p><hr><ul><li><u><strong>重传</strong></u></li></ul><p>确认重传不分家，TCP的发送方在 <strong>规定的时间(重传时间)</strong> 内<strong>没有收到确认</strong>就要重传已发送的报文段。<strong>超时重传</strong></p><p>TCP采用自适应算法，动态改变重传时间<strong>RTTs</strong>(加权平均往返时间)</p><p>觉得重传时间太久了！<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 冗余ACK</p><p><strong>冗余ACK (冗余确认)</strong><br>每当比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。</p><p>举例：发送方已发送1，2，3，4，5报文段。<br>接收方收到1，返回给1的确认(确认号为2的第一个字节)；<br>接收方收到3，仍返回给1的确认 (确认号为2的第一个字节)；<br>接收方收到4，仍返回给1的确认 (确认号为2的第一个字节)；<br>接收方收到5，仍返回给1的确认(确认号为2的第一个字节)；<br>发送方收到3个对于报文段1的冗余ACK <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 认为2报文段丢失，重传2号报文段。<strong>快速重传</strong></p><hr><h3 id="6、TCP流量控制">6、TCP流量控制</h3><ul><li><u><strong>TCP流量控制</strong></u></li></ul><p>流量控制：让发送方慢点，要让接收方来得及接收。</p><p>TCP利用<strong>滑动窗口</strong>机制实现流量控制。</p><p>在通信过程中，接收方根据自己<strong>接收缓存的大小</strong>，动态地调整发送方的发送窗口大小，即接收窗口rwnd (接收方设置确认报文段的<strong>窗口字段</strong>来将rwnd通知给发送方)，发送方的<strong>发送窗口取决于接收窗口rwnd和拥塞窗口cwnd的最小值</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_21-23-06.png" alt=""></p><p><strong>发送窗口大小可以动态变化</strong></p><p><strong>举例</strong>：</p><p>A向B发送数据，连接建立时，B告诉A：“我的rwnd=400(字节)”，设每一个报文段100B，报文段序号初始值为1。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_21-24-17.png" alt=""></p><p>TCP为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。</p><p>若持续计时器设置的时间到期，就发送一个零窗口<strong>探测报文段</strong>。接收方收到探测报文段时给出现在的窗口值。</p><p>若窗口仍然是0，那么发送方就重新设置持续计时器。</p><hr><h3 id="7、TCP拥塞控制">7、TCP拥塞控制</h3><ul><li><u><strong>TCP拥塞控制</strong></u></li></ul><p>出现拥塞的条件:<br>对资源需求的总和 &gt; 可用资源<br>网络中有许多资源同时呈现供应不足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 网络性能变坏 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 网络吞吐量将随输入负荷增大而下降</p><p>拥塞控制:<br>防止过多的数据注入到网络中。 <strong>全局性</strong></p><p>拥塞控制 &amp; 流量控制：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_21-56-20.png" alt=""></p><hr><ul><li><u><strong>拥塞控制四种算法</strong></u></li></ul><p><strong>慢开始  拥塞避免</strong><br><strong>快重传  快恢复</strong></p><p>假定:</p><ol><li><p>数据单方向传送，而另一个方向只传送确认。</p></li><li><p>接收方总是有足够大的缓存空间，因而发送窗口大小取决于拥塞程度。</p><p>从前面知道：发送窗口=Min(接收窗口rwnd，拥塞窗口cwnd}</p></li></ol><p>接收窗口  <strong>接收方</strong>根据接受缓存设置的值，并告知给发送方，反映接收方容量。</p><p>拥塞窗口  <strong>发送方</strong>根据自己估算的网络拥塞程度而设置的窗口值，反映网络当前容量。</p><hr><ul><li><u><strong>慢开始和拥塞避免</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_22-07-18.png" alt=""></p><p>一个<strong>传输轮次</strong>：<br>发送了一批报文段并收到它们的确认的时间。<br>也表示：一个往返时延RTT。<br>还可以是：开始发送一批拥塞窗口内的报文段到开始发送下一批拥塞窗口内的报文段的时间。</p><p>ssthresh：慢重传门限（slow start thresh）</p><p>乘法减小：拥塞时的cwmd/2。</p><hr><ul><li><u><strong>快重传和快回复</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_22-07-29.png" alt=""></p><p>乘法减小：除 2.</p><p>TCP Reno版本考试会考。</p><p>TCP Tahoe版本可以不做了解。</p><hr><h2 id="第六章、应用层">第六章、应用层</h2><h3 id="1、网络应用模型">1、网络应用模型</h3><ul><li><u><strong>应用层概述</strong></u></li></ul><p>应用层对应用程序的通信提供服务。</p><p><strong>应用层协议定义</strong>：</p><p>应用进程交换的报文类型，请求还是响应？<br>各种报文类型的语法，如报文中的各个字段及其详细描述。<br>字段的语义，即包含在字段中的信息的含义。<br>进程何时、如何发送报文，以及对报文进行响应的规则。</p><p>应用层的<strong>功能</strong>：<br>文件传输、访问和管理<br>电子邮件<br>虚拟终端<br>查询服务和远程作业登录</p><p>应用层的重要<strong>协议</strong>：<br>FTP<br>SMTP、POP3<br>HTTP<br>DNS</p><hr><ul><li><u><strong>网络应用模型</strong></u><ul><li>客户端/服务器模型（Client/Server）</li><li>P2P模型（Peer-to-Peer）</li></ul></li></ul><hr><ul><li><u><strong>客户/服务器（C/S）模型</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_22-44-32.png" alt=""></p><p><strong>服务器</strong>：<strong>提供计算服务</strong>的设备。</p><ol><li>永久提供服务</li><li>永久性访问地址/域名</li></ol><p><strong>客户机</strong>：<strong>请求计算服务</strong>的主机。</p><ol><li><p>与服务器通信，使用服务器提供的服务</p></li><li><p>间歇性接入网络</p></li><li><p>可能使用动态IP地址</p></li><li><p>不与其他客户机直接通信</p></li></ol><p>应用：Web，文件传输FTP，远程登录，电子邮件</p><hr><ul><li><u><strong>P2P模型</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_22-43-56.png" alt=""></p><p>不存在永远在线的服务器</p><p>每个主机既可以<strong>提供服务</strong>，也可以<strong>请求服务</strong></p><p>任意端系统/节点之间可以<strong>直接通讯</strong></p><p>节点间歇性接入网络</p><p>节点可能改变IP地址</p><p>可扩展性好</p><p>网络健壮性强</p><hr><h3 id="2、DNS系统">2、DNS系统</h3><ul><li><u><strong>DNS系统</strong></u></li></ul><p>IP地址难记忆？ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 域名</p><p>DNS系统：IP地址 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 域名</p><p>访问域名 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> DNS服务器将域名解析成IP地址，通过IP地址就可以访问了。</p><hr><ul><li><u><strong>域名</strong></u></li></ul><p><strong>根</strong></p><p><strong>顶级域名</strong></p><p>国家顶级域名 cn（中国），us（美国），uk（英国）</p><p>通用顶级域名 com（公司、企业），net（网络服务机构），org（非盈利性组织），gov（政府），int（国际组织），aero（航空传输企业），museum（博物馆），travel（旅游业）</p><p>基础结构域名/反向域名  arpa</p><p><strong>二级域名</strong></p><p>类别域名 ac（科研机构），com，edu（教育行业），gov，mil（中国国防机构），net，org</p><p>行政区域名 用于我国各省、自治区、直辖市 bj（北京），js（江苏）</p><p>自己注册的 注意要全球唯一</p><p><strong>三级域名</strong></p><p><strong>四级域名</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_23-19-33.png" alt=""></p><hr><ul><li><u><strong>域名服务器</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_23-22-26.png" alt=""></p><p>根域名服务器</p><p>顶级域名服务器 （管理该顶级域名服务 器注册的所有二级域名）</p><p>权限域名服务器 （负责一个区的域名服 务器）</p><p>本地域名服务器：当一个主机发出DNS查询请求时，这个查询请求报文就发给本地域名服务器。</p><hr><ul><li><u><strong>域名解析过程</strong></u><ul><li>递归解析</li><li>迭代解析</li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_23-23-57.png" alt=""></p><hr><h3 id="3、文件传输协议FTP">3、文件传输协议FTP</h3><ul><li><p><u><strong>文件传输协议</strong></u></p><ul><li><p>文件传送协议FTP（File Transfer Protocol）</p><p>提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力。</p></li><li><p>简单文件传送协议TFTP（Trivial File Transfer Protocol）</p></li></ul></li></ul><hr><ul><li><u><strong>FTP服务器和用户端</strong></u></li></ul><p>FTP是基于客户/服务器（C/S）的协议。</p><p>用户通过一个客户机程序连接至在远程计算机上运行的服务器程序。</p><p>依照 FTP 协议提供服务，进行文件传送的计算机就是 <strong>FTP 服务器</strong>。</p><p>连接 FTP 服务器，遵循FTP协议与服务器传送文件的电脑就是 <strong>FTP 客户端</strong>。</p><p>应用：FTP客户端软件、Windows自 带FTP命令</p><hr><ul><li><u><strong>FTP工作原理</strong></u></li></ul><p>登录：ftp地址 用户名&amp;密码</p><p>匿名登录：互连网中有很大一部分 FTP 服务器被称为“匿名”（Anonymous）FTP 服 务器。这类服务器的目的是向公众提供文件拷贝服务，不要求用户事先在 该服务器进行登记注册，也不用取得FTP服务器的授权。 Anonymous（匿名文件传输）能够使用户与远程主机建立连接并以匿名身 份从远程主机上拷贝文件，而不必是该远程主机的注册用户。用户使用特 殊的用户名“anonymous”登录FTP服务，就可访问远程主机上公开的文件。</p><p>FTP使用TCP实现可靠传输。</p><p>FTP服务器服务进程：</p><ol><li>1个主进程</li><li>n个从属进程</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-02_23-43-34.png" alt=""></p><p><strong>控制</strong>连接<strong>始终</strong>保持</p><p><strong>数据</strong>连接保持一会</p><p>是否使用TCP 20端口建立数据 连接与传输模式有关。<strong>主动</strong>方式使用TCP 20端口；<strong>被动</strong>方式由服务器和客户端自行协商决定（端口&gt;1024）</p><p><strong>FTP传输模式</strong><br>​文本模式：ASCII模式，以文本序列传输数据；<br>​二进制模式：Binary模式，以二进制序列传输数据。</p><hr><h3 id="4、电子邮件">4、电子邮件</h3><ul><li><u><strong>电子邮件系统概述—电子邮件的信息格式</strong></u></li></ul><p>电子邮件</p><ul><li><p>信封 <code>abc@163.com</code></p></li><li><p>内容</p><ul><li><p>首部</p><p>To：<code>abc@163.com</code></p><p>Subject：Hello！</p></li><li><p>主体</p></li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span></p><table><thead><tr><th>From：111@163.com <br />To：abc@163.com <br />Subject：Hello！ <br />Date：2018-8-8</th></tr></thead><tbody><tr><td>Blabla…</td></tr></tbody></table></li></ul><hr><ul><li><u><strong>电子邮件系统概述—组成结构</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_07-42-20.png" alt=""></p><p>客户端软件（Foxmail、Outlook）功能：1.撰写 2.显示 3.处理 4.通信<br>邮件服务器功能：1.发送&amp;接收邮件 2.向发件人报告邮件传送结果（C/S模式）</p><hr><ul><li><u><strong>简单邮件传送协议SMTP</strong></u></li></ul><p>SMTP规定了在两个相互通信的<strong>SMTP进程</strong>之间应如何交换信息。<br>负责发送邮件的SMTP进程就是<strong>SMTP客户</strong>，负责接收邮件的进程就是<strong>SMTP服务器</strong>。<br>SMTP规定了14条命令（几个字母）和21种应答信息（三位数字代码+简单文字说明）。</p><p>SMTP建立在TCP连接之上，使用端口号25，C/S模式。</p><p>STMP通信的三个阶段：连接建立 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 邮件传送 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 连接释放</p><p><strong>1、连接建立</strong></p><p>发送方写好邮件，放到发送服务器的邮件缓存里面；<br>发送方邮件服务器每隔一定时间扫描缓存，有邮件则与接收方邮件服务器建立TCP连接（发：端口号25）；<br>接收方邮件服务器发出应答信息：22 Service ready；<br>发送方邮件服务器在发出：HELLO命令；<br>发送方邮件服务器若有能力接收邮件，回答“250 OK” 否则，回答“421 Service not available”。</p><p><strong>2、邮件传送</strong></p><p>A : MAIL FROM：<br>B : 250 OK / B : 451（452、500…） SMTP服务器是否已经准备好接收邮件<br>A : RCPT TO：&lt;<code>mooc@163\com</code>&gt;  可以有多个RCPT命令<br>B : 250 OK / B : 550 No such user here  SMTP服务器确定是否有这个用户<br>A : DATA 要开始传输邮件的内容了<br>B : 354 start mail input; end with  &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt; SMTP服务器同意传输<br>A : Date…. 开始传输邮件内容<br>B : 250 OK 接收结束</p><p><strong>3、连接释放</strong></p><p>邮件发完，SMTP客户发送QUIT命令，SMTP服务器返回“221”，表示同意释放TCP连接。</p><hr><ul><li><u><strong>MIME</strong></u></li></ul><p><strong>STMP的缺点</strong>：<br>1.SMTP不能传送可执行文件或者其他二进制对象。<br>2.SMTP仅限于传送7位ASCII码，不能传送其他非英语国家的文字。<br>3.SMTP服务器会拒绝超过一定长度的邮件。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <strong>通用因特网邮件扩充MIME</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_08-04-05.png" alt=""></p><p><strong>使得传输内容丰富多彩</strong><br>使电子邮件系统可以支 持声音、图像、视频、 多种国家语言等等。</p><hr><ul><li><u><strong>邮局协议POP3</strong></u></li></ul><p>POP3建立在TCP连接之上，使用端口号25，C/S模式。</p><p>POP3工作方式</p><ul><li>下载并保留（在服务器）</li><li>下载并删除</li></ul><hr><ul><li><u><strong>网际报文存取协议IMAP</strong></u></li></ul><p>IMAP协议比POP协议复杂。当用户Pc上的IMAP客户程序打开IMAP服务器的邮箱时，用户可以看到邮箱的首部， 若用户需要打开某个邮件，该邮件才上传到用户的计算机上。<br>IMAP可以让用户在不同的地方使用不同的计算机随时上网阅读处理邮件，还允许只读取邮件中的某一个部分 （先看正文，有WiFi的时候再下载附件）。</p><hr><ul><li><u><strong>基于万维网的电子邮件</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_08-09-03.png" alt=""></p><hr><h3 id="5、万维网和HTTP协议">5、万维网和HTTP协议</h3><ul><li><u><strong>万维网概述</strong></u></li></ul><p>万维网WWW（World Wide Web）是一个大规模的、联机式的信息储藏所/<strong>资料空间</strong>，是无数个网络站点和网页的集合。<br><strong>统一资源定位符URL</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>唯一标识</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{唯一标识}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">唯一标识</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> <strong>资源</strong>（文字、视频、音频…）</p><p>URL一般形式：（<strong>URL不区分大小写</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 例如：http://www.pku.edu.cn</span><br><span class="line"> http    域名</span><br><span class="line"> ftp    IP地址</span><br></pre></td></tr></table></figure><p>用户通过点击超链接（<a href="http://www.baidu.com">http://www.baidu.com</a>）获取资源，这些资源通过超文本传输协议（<strong>HTTP</strong>）传送给使用者。<br>万维网以<strong>客户/服务器</strong>方式工作，用户使用的浏览器就是万维网客户程序，万维网文档所驻留的主机运行服务器程序。<br>万维网使用超文本标记语言<strong>HTML</strong>，使得万维网页面设计者可以很方便地从一个界面的链接转到另一个界面，并能 够在自己的屏幕上显示出来。</p><hr><ul><li><u><strong>超文本传输协议HTTP</strong></u></li></ul><p>HTTP协议定义了浏览器（万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给 浏览器。</p><p>用户浏览页面方法：</p><ol><li>输入URL</li><li>点击超链接</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_08-29-52.png" alt=""></p><p>具体过程：</p><ol><li>浏览器分析URL</li><li>浏览器向DNS请求解析IP地址</li><li>DNS解析出IP地址</li><li>浏览器与服务器建立TCP连接</li><li>浏览器发出取文件命令</li><li>服务器响应</li><li>释放TCP连接</li><li>浏览器显示</li></ol><p>注：浏览器可以只下载文本部分。</p><hr><ul><li><u><strong>HTTP协议的特点</strong></u></li></ul><p>HTTP协议是<strong>无状态</strong>的（没有记忆的）。</p><p>但是在实际工作中，一些万维网站点常常希望能够识别用户。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> Cookie</p><p>Cookie是存储在用户主机中的文本文件，记录一段时间内某用户（使用识别码识别，如“123456”）的访问记录。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 提供个性化服务</p><p>HTTP采用<strong>TCP</strong>作为运输层协议，但HTTP协议<strong>本身是无连接的</strong>（通信双方在交换HTTP报文之前不需要先建立HTTP连接）。</p><hr><ul><li><u><strong>HTTP协议的连接方式</strong></u><ul><li>持久连接 Keep-alive<ul><li>非流水线</li><li>流水线</li></ul></li><li>非持久连接 Close</li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_08-37-42.png" alt=""></p><hr><ul><li><u><strong>超文本传输协议HTTP——报文结构</strong></u></li></ul><p>HTTP报文：请求报文 和 响应报文</p><p>HTTP报文是<strong>面向文本</strong>的，因此在报文中的每一个字段都是一些ASCII码串。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/cn/Snipaste_2023-02-03_08-40-59.png" alt=""></p><p>状态码：<br>1xx表示通知信息的，如请求收到了或正在处理。<br>2xx表示成功，如接受或知道了。 <strong>220 Accepted</strong><br>3xx表示重定向，如要完成请求还必须采取进一步的行动。 <strong>301 Moved</strong><br>4xx表示客户的差错，如请求中有错误的语法或不能完成。 <strong>Permanently</strong><br>5xx表示服务器的差错，如服务器失效无法完成请求。<strong>404 Not Found</strong></p><p>例如：某浏览器发出的请求报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: www.test.edu.cn</span><br><span class="line">Connection: Close</span><br><span class="line">Cookie: 123456</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道操作系统</title>
      <link href="/2023/05/03/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/05/03/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1YE411D7nH?t=3.0&amp;p=2">【王道考研操作系统】</a></p><h1>第一章 计算机系统概述</h1><h2 id="1-1-1-操作系统的概念、功能">1.1.1 操作系统的概念、功能</h2><ul><li><strong><u>大家都熟悉的操作系统</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_18-59-48.jpg" alt=""></p><hr><ul><li><u><strong>操作系统的概念（定义）</strong></u></li></ul><p>一台电脑的诞生~<br>Step 1：厂家组装一台裸机（裸机是没有配置操作系统和其他软件的电子计算机）<br>Step 2：出售前安装操作系统<br>Step 3：用户安装应用程序（eg：QQ）<br>Step 4：使用 QQ 聊天</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-16-00.jpg" alt=""></p><p><strong>操作系统</strong>（Operating System， OS）</p><ul><li>是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件</strong>（<u>①操作系统是系统资源的管理者</u>）资源，并合理地组织调度计算机的工作和资源的分配；</li><li>以<strong>提供给用户和其他软件方便的接口和环境</strong>（<u>②向上层提供方便易用的服务</u>）；</li><li>它是计算机系统中最基本的<strong>系统软件</strong>（<u>③是最接近硬件的一层软件</u>）。</li></ul><p>直观的例子：打开 Windows 操作系统的“任务管理器”（快捷键：Ctrl+Alt+Del）</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-25-08.jpg" alt=""></p><hr><ul><li><u><strong>操作系统的功能和目标——作为系统资源的管理者</strong></u><ul><li>提供的功能：<ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li>目标：<ul><li>安全、高效</li></ul></li></ul></li></ul><p>补充知识：执行一个程序前需要将该程序放到内存中，才能被CPU处理。</p><p>用QQ和朋友视频聊天的过程：<br>Step 1：在各个文件夹中找到 QQ 安装的位置（如 D:/Tencent/QQ/Bin）【逐层打开文件夹，找到QQ.exe 这个程序（可执行文件）的存放位置】<br>Step 2：双击打开 QQ.exe 【需要把该程序相关数据放入内存】<br>Step 3：QQ 程序正常运行 【对应的进程被处理机（CPU）处理】<br>Step 4：开始和朋友视频聊天 【需要将摄像头设备分配给进程】</p><hr><ul><li><u><strong>操作系统的功能和目标——向上层提供方便易用的服务</strong></u></li></ul><p><strong>封装思想</strong>：操作系统把一些丑陋的硬件功能封装成简单易用的服务，使用户能更方便地使用计算机，用户无需关心底层硬件的原理，只需要对操作系统发出命令即可。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-35-16.jpg" alt=""></p><p><strong>GUI</strong>：图形化用户接口（Graphical User Interface） 【很多现代操作系统都提供GUI】<br>用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数。<br>例子：在 Windows 操作系统中，删除一个文件只需要把文件“拖拽”到回收站即可。</p><p><strong>联机命令接口</strong>实例（Windows系统） 联机命令接口=<strong>交互式</strong>命令接口<br>Step 1：win键+R<br>Step 2：输入cmd，按回车，打开命令解释器<br>Step 3：尝试使用 time 命令<br>【特点：用户说一句， 系统跟着做一句】</p><p><strong>脱机命令接口</strong>实例（Windows系统） 脱机命令接口=<strong>批处理</strong>命令接口<br>使用windows系统的搜索功能，搜索C盘中的 *.bat文件，用记事本任意打开一个。<br>【特点：用户说一堆， 系统跟着做一堆】<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-40-45.jpg" alt=""></p><p>程序接口：可以在程序中进行<strong>系统调用</strong>来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码<strong>间接</strong>使用。<br>如：写C语言“Hello world”程序时，在 printf 函数的底层就使用到了操作系统提供的显式相关的“系统调用”。<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-45-43.jpg" alt=""><br>系统调用类似于函数调用，是应用程 序请求操作系统服务的唯一方式。<strong>在有的教材中： 系统调用=广义指令</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_19-50-22.jpg" alt=""><br>【有的教材中把命令接口和程序接口统称为“用户接口”，意思就是说狭义的用户接口不包括GUI。】</p><hr><ul><li><u><strong>操作系统的功能和目标——作为最接近硬件的层次</strong></u></li></ul><p>需要实现<strong>对硬件机器的拓展</strong>；<br>没有任何软件支持的计算机成为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能 更强、使用更方便的机器；<br>通常把覆盖了软件的机器成为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>。</p><p>类比汽车： 发动机——只会转；轮胎——只会滚；<br>在原始的硬件机器上覆盖一层传动系统——让发动机带着轮子转——使原始的硬件机器得到拓展</p><p>操作系统对硬件机器的拓展：将CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能普通用户无需关心这些硬件在底层是怎么组织起来工作的，只需直接使用操作系统提供的接口即可</p><hr><h2 id="1-1-2-操作系统的特征">1.1.2 操作系统的特征</h2><blockquote><ul><li>并发</li><li>共享</li></ul><p>并发和共享是两个最基本的特征，二者互为存在条件。</p><ul><li>虚拟</li><li>异步</li></ul><p>重要考点：<br>理解并发和并行的区别<br>并发和共享互为存在条件<br>没有并发和共享，就谈不上虚拟和异步，因此并发和共享是操作系统的两个最基本的特征</p></blockquote><ul><li><u><strong>操作系统的特征——并发</strong></u></li></ul><p><strong>并发</strong>：指两个或多个事件在同一时间间隔内发生。这些事件<strong>宏观上是同时发生</strong>的，但<strong>微观上是交替发生</strong>的。<br>常考易混概念——<strong>并行</strong>：指两个或多个事件在同一时刻同时发生。</p><p>并发 VS 并行：<br>eg：假设小渣和老渣每人有两个女朋友。任务1：和一号约会；任务2：和二号约会…<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_20-10-44.jpg" alt=""></p><p><strong>操作系统的并发性</strong>指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。<br>操作系统就是伴随着“多道程序技术”（后面介绍）而出现的。因此，<strong>操作系统和程序并发是一起诞生的</strong></p><p>注意（<strong>重要考点</strong>）：<br><strong>单核CPU</strong>同一时刻只能执行<strong>一个程序</strong>，各个程序只能<strong>并发</strong>地执行<br><strong>多核CPU</strong>同一时刻可以同时执行<strong>多个程序</strong>，多个程序可以<strong>并行</strong>地执行<br>比如Intel 的第八代 i3 处理器就是 <strong>4 核CPU</strong>，意味着可以<strong>并行地执行4个程序</strong>；【即使是对于4核CPU来说，只要有4个以 上的程序需要“同时”运行，那么并发性依然是必不可少的，因此<strong>并发性是操作系统一个最基本的特性</strong>】</p><hr><ul><li><u><strong>操作系统的特征——共享</strong></u></li></ul><p><strong>共享</strong>即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><ul><li><p><strong>两种资源共享方式</strong></p><ul><li><p><strong>互斥共享方式</strong>：<br>系统中的某些资源，虽然可以提供给多个进程使用，但<strong>一个时间段内只允许一个进程访问该资源</strong></p></li><li><p><strong>同时共享方式</strong>：</p><p>系统中的某些资源，<strong>允许一个时间段内由多个进程“同时”对它们进行访问</strong></p></li></ul></li></ul><p>所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的（即分时共享）</p><p>生活实例：<br>互斥共享方式：使用QQ和微信视频。同一时间段内摄像头只能分配给其中一个进程。<br>同时共享方式：使用QQ发送文件A，同时使用微信发送文件B。宏观上看，两边都在同时读取并发送文件， 说明两个进程都在访问硬盘资源，从中读取数据。微观上看，两个进程是交替着访问硬盘的。</p><hr><ul><li><u><strong>操作系统的特征——并发和共享的关系</strong></u></li></ul><p><strong>并发性</strong>指计算机系统中同时存在着多个运行着的程序。<br><strong>共享性</strong>是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p>通过上述例子来看并发与共享的关系：<br>使用QQ发送文件A，同时使用微信发送文件B。<br>1.两个进程正在并发执行（并发性） 【如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义】<br>2.需要共享地访问硬盘资源（共享性）【如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发】</p><p><strong>二者互为存在条件。</strong></p><hr><ul><li><strong><u>操作系统的特征——虚拟</u></strong></li></ul><p><strong>虚拟</strong>是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。</p><p>Yo~用一个例子来理解<br>背景知识：一个程序<strong>需要放入内存</strong>并给它<strong>分配CPU</strong>才能执行</p><p>GTA5需要4GB的运行内存，<br>QQ 需要256MB的内存，<br>迅雷需要256MB的内存，<br>网易云音乐需要256MB的内存……<br>我的电脑：4GB内存<br>问题：这些程序同时运行需要的内存远大于4GB，那么为什么它们还可以在我的电脑上同时运行呢？<br>答：这是虚拟存储器技术。实际只有4GB的内存，在用户看来似乎远远大于4GB。<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 虚拟技术中的“<strong>空分复用技术</strong>” 。</p><p>某单核CPU的计算机中，用户打开了以下软件。。。<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_21-18-58.jpg" alt=""><br>问题：既然一个程序需要被分配CPU才能正常执行，那么为什么单核CPU 的电脑中能同时运行这么多个程序呢？ 答：这是虚拟处理器技术。实际上只有一个单核CPU，在用户看来似乎有 6个CPU在同时为自己服务。<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 虚拟技术中的“<strong>时分复用技术</strong>” 。微观上处理机在各个微小的时间段内交替着为各个进程服务。</p><ul><li><strong>虚拟技术</strong><ul><li><strong>空分复用技术</strong>（如虚拟存储技术）</li><li><strong>时分复用技术</strong>（如虚拟处理器）</li></ul></li></ul><p>显然，如果失去了并发性，则一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了。因此，<strong>没有并发性，就谈不上虚拟性</strong>。</p><hr><ul><li><u><strong>操作系统的特征——异步</strong></u></li></ul><p><strong>异步</strong>是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p><p>老渣要和两个女孩并发约会：</p><ul><li>第一道程序：<ul><li>一号的指令1：老渣陪我吃饭</li><li>一号的指令2：老渣把心给我</li></ul></li><li>第二道程序：<ul><li>二号的指令1：老渣把心给我</li><li>二号的指令2：老渣陪我吃饭</li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-03_21-37-13.jpg" alt=""><br>与一、二号的约会 = 两道并发执行的程序 老渣的心 = 有限的系统资源</p><p>由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进</p><p>如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底。<strong>只有系统拥有并发性，才有可能导致异步性</strong>。</p><hr><h2 id="1-2-操作系统的发展与分类">1.2 操作系统的发展与分类</h2><ul><li><strong><u>手工操作阶段</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_08-40-24.jpg" alt=""></p><hr><ul><li><strong><u>批处理阶段——单道批处理系统</u></strong></li></ul><p>引入<strong>脱机输入/输出技术</strong>（用外围机+磁带完成），并由<strong>监督程序</strong>（操作系统的雏形）负责控制作业的输入、输出</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_08-43-53.jpg" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_08-48-41.jpg" alt=""></p><p>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。<br>主要缺点：<strong>内存中仅能有一道程序运行</strong>，只有该程序运行结束之后才 能调入下一道程序。<strong>CPU有大量的时间是在空闲等待I/O完成</strong>。资源利用率依然很低。</p><hr><ul><li><strong><u>批处理阶段——多道批处理系统</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_09-03-04.jpg" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_09-03-54.jpg" alt=""></p><p>主要优点：多道程序<strong>并发</strong>执行，<strong>共享</strong>计算机资源。<strong>资源利用率大幅提升</strong>，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。<br>主要缺点：用户响应时间长，<strong>没有人机交互功能</strong>（用户提交自己的作业之后就只能等待 计算机处理完成，中间不能控制自己的作业 执行。eg：无法调试程序/无法在程序运行过 程中输入一些参数）</p><hr><ul><li><strong><u>分时操作系统</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_09-14-13.jpg" alt=""></p><p>分时操作系统：计算机以<strong>时间片</strong>为单位<strong>轮流为各个用户/作业服务</strong>，各个用户可通过终端与计算机进行交互。<br>主要优点：用户请求可以被即时响应，<strong>解决了人机交互问题</strong>。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。<br>主要缺点：<strong>不能优先处理一些紧急任务</strong>。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性</p><hr><ul><li><strong><u>实时操作系统</u></strong><ul><li>硬实时系统<br>必须在绝对严格的规定时间内完成处理<br>如：导弹控制系统、自动驾驶系统</li><li>软实时系统<br>能接受偶尔违反时间规定<br>如：12306火车订票系统</li></ul></li></ul><p>实时操作系统： 主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。<br>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且<strong>要在严格的时限内处理完事件</strong>。实时操作系统的主要特点是<strong>及时性和可靠性</strong></p><hr><ul><li><strong><u>其他几种操作系统</u></strong></li></ul><p>网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，<strong>实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信</strong>。（如：Windows NT 就是一种典型的网络操作系统，网站服务器就可以使用）</p><p>分布式操作系统：主要特点是<strong>分布性和并行性</strong>。系统中的各台计算机地位相同，<strong>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</strong>。</p><p>个人计算机操作系统：如 Windows XP、MacOS，方便个人使用。</p><hr><h2 id="1-3-1-操作系统的运行机制">1.3.1 操作系统的运行机制</h2><blockquote><p>Tips：</p><ol><li>都是高频考点，很重要</li><li>初学者不完全理解没关系， 放心大胆地往后学，随着后面章节的学习，理解会逐渐加深</li></ol></blockquote><ul><li><strong><u>预备知识：程序是如何运行的？</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_10-19-00.jpg" alt=""></p><p>程序运行的过程其实就 是CPU执行一条一条的机器指令的过程</p><p>“指令”就是处理器（CPU）能识别、执行的最基本命令</p><p>注：很多人习惯把 Linux、Windows、MacOS 的“小黑框”中使用的命令也 称为“指令”，其实这是“交互式命令接口”，注意与本节的“指令”区别 开。本节中的“指令”指二进制机器指令</p><hr><ul><li><strong><u>内核程序 v.s. 应用程序</u></strong></li></ul><p>我们普通程序员写的程序就是“<strong>应用程序</strong>”</p><p>微软、苹果有一帮人负责实现操作系统，他们写的是“<strong>内核程序</strong>”<br>由很多内核程序组成了“<strong>操作系统内核</strong>”，或简称“<strong>内核（Kernel）</strong> ” 内核是操作系统最重要最核心的部分，也是<strong>最接近硬件的部分</strong>甚至可以说，一个操作系统只要有内核就够了（eg：Docker—&gt;仅需Linux内核） 操作系统的功能未必都在内核中，如图形化用户界面 GUI</p><hr><ul><li><strong><u>特权指令 v.s. 非特权指令</u></strong></li></ul><p>在<strong>CPU设计和生产的时候就划分了特权指令和非特权指令</strong>，因此CPU 执行一条指令前就能判断出其类型</p><p>应用程序只能使用“非特权指令”，如： 加法指令、减法指令等</p><p>操作系统内核作为 “管理者”，有时会让CPU执行一些“特权指令”，如：内存清零指令。这些指令影响重大，只允许“管理者”——即操作系统内核来使用</p><hr><ul><li><strong><u>内核态 v.s. 用户态</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_10-25-21.jpg" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 问题：如何实现CPU状态的切换？</p><p>CPU 有两种状态，“<strong>内核态</strong>”和“<strong>用户态</strong>”<br>处于<strong>内核态时</strong>，说明此时正在<strong>运行的是内核程序</strong>，此时<strong>可以执行特权指令</strong><br>处于<strong>用户态时</strong>，说明此时正在<strong>运行的是应用程序</strong>，此时<strong>只能执行非特权指令</strong></p><p>拓展：CPU 中有一个寄存器叫<strong>程序状态字寄存器（PSW）</strong> ，其中有个二进制位，1表示 “内核态”，0表示“用户态”</p><p><strong>别名</strong>：内核态=核心态=<strong>管态</strong>；用户态=<strong>目态</strong></p><hr><ul><li><strong><u>内核态、用户态 的切换</u></strong></li></ul><table>    <tr>        <td>            一个故事：</br>    ① 刚开机时，CPU 为“<b>内核态</b>”，操作系统内核程序先上CPU运行</br>② 开机完成后，用户可以启动某个应用程序</br> ③ 操作系统内核程序在合适的时候主动让出 CPU，让该应用程序上CPU运行</br>【操作系统内核在让出CPU之前，会<b>用一条特权指令把 PSW 的标志位设置为“用户态”</b>】</br>④ 应用程序运行在“用户态”</br> ⑤ 此时，一位猥琐黑客在应用程序中植入了一条特权指令，企图破坏系统…</br> ⑥ CPU发现接下来要执行的这条指令是特权指令，但是自己又处于“用户态”</br> ⑦ 这个非法事件会引发一个<b>中断信号</b></br>【<b>CPU检测到中断信号后</b>，会立即<b>变为“核心态”</b>，并停止运行当前的应用程序，转而运行处理中断信号的内核程序】</br> ⑧ “中断”使操作系统再次夺回CPU的控制权</br> ⑨ 操作系统会对引发中断的事件进行处理，处理完了再把CPU使用权交给别的应用程序</br>        </td>    </tr>    </table>**内核态** $\to$ **用户态**：**执行一条特权指令**——**修改PSW**的标志位为“用户态”，这个动作意味着操作系统 将主动让出CPU使用权 **用户态** $\to$ **内核态**：由“**中断**”引发，**硬件自动完成变态过程**，触发中断信号意味着操作系统将强行夺回CPU的使用权【除了非法使用特权指令之外，还有很多事件 会触发中断信号。一个共性是，**但凡需要操作系统介入的地方，都会触发中断信号**】<hr><h2 id="1-3-2-中断和异常">1.3.2 中断和异常</h2><ul><li><strong><u>中断的作用</u></strong><br>“中断”会使CPU由用户态变为内核态，使操作系统重新夺回对CPU的控制权</li></ul><p>CPU 上会运行两种程序，一种是<strong>操作系统内核程序</strong>（是整个系统的管理者），一种是<strong>应用程序</strong></p><p>在合适的情况下，操作系统内核会把CPU的使用权主动让给应用程序（第二章进程管理相关内容）</p><p>“中断”是<strong>让操作系统内核夺回CPU使用权</strong>的唯一途径</p><p>如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序<br>没有中断机制，就不可能实现操作系统，不可能实现程序并发</p><hr><ul><li><strong><u>中断的类型</u></strong><ul><li><strong>内中断</strong><br>与当前执行的指令有关， 中断信号来源于CPU内部</li><li><strong>外中断</strong><br>与当前执行的指令无关， 中断信号来源于CPU外部</li></ul></li></ul><hr><ul><li><u><strong>内中断的例子</strong></u></li></ul><p>例子 1：试图在用户态下执行特权指令<br>例子 2：执行除法指令时发现除数为 0<br>【若当前执行的指令是非法的，则会引发一个中断信号】</p><p>例子 3：有时候应用程序想请求操作系统内核的服务，此时会执行<strong>一条特殊的指令——陷入指令</strong>，该指令会引发一个内部中断信号<br>【执行“陷入指令”，意味着应用程序主动地将CPU控制权还给操作系统内核。 “<strong>系统调用”就是通过陷入指令完成的</strong>】</p><hr><ul><li><strong><u>外中断的例子</u></strong></li></ul><p>例子1：时钟中断——由时钟部件发来的中断信号</p><p>例子2：I/O中断——由输入/输出设备发来的中断信号</p><hr><ul><li><strong><u>中断的分类</u></strong>【广义的中断】<ul><li>内中断（也称<strong>异常</strong>、例外）<ul><li>陷阱、陷入（trap）【由陷入指令引发，是应用程序故意引发的】</li><li>故障（fault）【由错误条件引起的，可能被 内核程序修复。内核程序修 复故障后会把 CPU使用权还 给应用程序，让它继续执行 下去。如：缺页故障。】</li><li>终止（abort）【由致命错误引起，内核程序无法 修复该错误，因此一般不再将CPU 使用权还给引发终止的应用程序， 而是直接终止该应用程序。如： 整数除0、非法使用特权指令】</li></ul></li><li>外中断（也称中断）【狭义的中断】<ul><li>时钟中断</li><li>I/O中断</li></ul></li></ul></li></ul><p>大多数的教材、试卷中，“中断”特指狭义的中断，即外中断。而内中断一般称为“异常“</p><hr><ul><li><u><strong>中断机制的基本原理</strong></u></li></ul><p>检测中断信号：</p><ul><li>内中断：CPU在<strong>执行指令时</strong>会检查是否有异常发生</li><li>外中断：<strong>每个指令周期末尾</strong>，CPU都会检查是否有外中断信号需要处理</li></ul><p><strong>不同的中断信号，需要用不同的中断处理程序来处理</strong>。当CPU检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-07-58.jpg" alt=""><br>显然，中断处理程序一定是内核程序，需要运行在“内核态”</p><hr><h2 id="1-3-3-系统调用">1.3.3 系统调用</h2><ul><li><strong><u>什么是系统调用，有何作用？</u></strong></li></ul><p>知识点回顾：<br>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组系统调用组成。</p><p>“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong></p><hr><ul><li><strong><u>系统调用与库函数的区别</u></strong></li></ul><table>    <tr>        <td>普通应用程序</td>        <td>可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用，有的不涉及</td>    </tr>    <tr>        <td>编程语言</td>        <td>向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便。</td>    </tr>    <tr>        <td>操作系统</td>        <td>向上提供系统调用，使得上层程序能请求内核的服务</td>    </tr>    <tr>        <td>裸机</td>        <td></td>    </tr></table><p>不涉及系统调用的库函数：如的“取绝对值”的函数 涉及系统调用的库函数：如“创建一个新文件”的函数</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-21-42.jpg" alt=""></p><hr><ul><li><strong><u>小例子：为什么系统调用是必须的？</u></strong></li></ul><p>生活场景：去学校打印店打印论文，你按下了 WPS 的“打印”选项，打印机开 始工作。<br>你的论文打印到一半时，另一位同学按下了 Word 的“打印”按钮，开始打印他自己的论文。</p><p>思考：如果两个进程可以随意地、并发地共享打印机资源，会发生什么情况？</p><p>两个进程并发运行，打印机设备交替地收到 WPS 和 Word 两个进程发来的打印请求，结果两篇论文的内容混杂在一起了…</p><p>解决方法：由操作系统内核对共享资源进行统一的管理，并向上提供“系统调用” ，用户进程想要使用打印机这种共享资源，只能通过系统调用向操作系统内核发出请求。内核会对各个请求进行协调处理。</p><hr><ul><li><strong><u>什么功能要用到系统调用？</u></strong></li></ul><p>应用程序通过<strong>系统调用</strong>请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此<strong>凡是与共享资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。这样<strong>可以保证系统的稳定性和安全性</strong>，防止用户进行非法操作。</p><ul><li><strong>系统调用（按功能分类）</strong><ul><li><strong>设备管理</strong>：完成设备的 <strong>请求/释放/启动</strong> 等功能</li><li><strong>文件管理</strong>：完成文件的 <strong>读/写/创建/删除</strong> 等功能</li><li><strong>进程管理</strong>：完成进程的 <strong>创建/撤销/阻塞/唤醒</strong> 等功能</li><li><strong>进程通信</strong>：完成进程之间的 <strong>消息传递/信号传递</strong> 等功能</li><li><strong>内存管理</strong>：完成内存的 <strong>分配/回收</strong> 等功能</li></ul></li></ul><p>拓展：感兴趣的同学可以搜索“Linux 系统调用”，了解 Linux 操作系统提供了哪些系统调用</p><hr><ul><li><strong><u>系统调用的过程</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-36-59.png" alt=""></p><p>传递系统调用参数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 执行陷入指令（<strong>用户态</strong>，陷入指令是非特权指令） <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>  执行相应的内请求核程序处理系统调用（<strong>核心态</strong>） <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 返回 应用程序<br>注意：<br>1.陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，使CPU进入核心态<br>2.发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行</p><p>注意别名： 陷入指令 = trap 指令 = 访管指令</p><hr><h2 id="1-4-1-操作系统的体系结构（上）">1.4.1 操作系统的体系结构（上）</h2><ul><li><strong><u>操作系统的内核</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-43-27.png" alt="">·</p><p><strong>内核</strong>是计算机上配置的底层<strong>软件</strong>，是操作系统最基本、最核心的部分。<br>实现操作系统内核功能的那些程序就是<strong>内核程序</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-45-33.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-46-56.png" alt=""></p><p>注意：<br>操作系统<strong>内核</strong>需要运行在<strong>内核态</strong><br>操作系统的<strong>非内核</strong>功能运行在<strong>用户态</strong></p><p>一个故事：现在，应用程序想要请求操作系统的服务，这个服务的处理同时涉及到进程管理、存储管理、设备管理</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_11-58-30.png" alt=""></p><p>注意：变态的过程是有成本的，要消耗不少时间，频繁地变态会降低系统性能<br>【注意：“变态”在这里是口头表述，考试应该正规表述，例如“状态改变”】</p><hr><ul><li><strong><u>操作系统的体系结构</u></strong><ul><li>大内核<ul><li>将操作系统的主要功能模块作为系统内核，运行在核心态</li><li>优点：高性能</li><li>缺点：内核代码庞大，结构混乱，难以维护</li></ul></li><li>微内核<ul><li>只把最基本功能保留在内核</li><li>优点：内核功能少，结构清晰，方便维护</li><li>缺点：需要频繁地在核心态和用户态之间切换，性能低</li></ul></li></ul></li></ul><p>典型的大内核/宏内核/单内核 操作系统： Linux、UNIX<br>典型的 微内核 操作系统： Windows NT</p><p>类比：<br>操作系统的体系结构问题与企业的管理问题很相似。<br><strong>内核</strong>就是企业的<strong>管理层</strong>，负责一些重要的工作。只有管理层才能执行<strong>特权指令</strong>，普通员工只能执行<strong>非特权指令</strong>。<strong>用户态</strong>、<strong>核心态</strong>之间的切换相当于普通员工和管理层之间的工作交接<br><strong>大内核</strong>：企业初创时体量不大，管理层的人会负责大部分的事情。优点是效率高；缺点是组织结构混乱，难以维护。<br><strong>微内核</strong>：随着企业体量越来越大，管理层只负责最核心的一些工作。优点是组织结构清晰，方便维护；缺点是效率低。</p><hr><h2 id="1-4-2-操作系统的体系结构（下）">1.4.2 操作系统的体系结构（下）</h2><blockquote><ul><li>大内核（又名：宏内核/单内核）</li><li>微内核</li><li>分层结构（新增）</li><li>模块化（新增）</li><li>外核（新增）</li></ul><p>Tips: 一定是<strong>考简单的选择题</strong>，了解各种体系结构的<strong>特性</strong>，了解各自的<strong>优缺点</strong></p></blockquote><ul><li><strong><u>操作系统结构</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_15-55-43.png" alt=""></p><p>【注：加星号是作者认为更容易考的，红色星号是全新的内容，黄色星号的是老内容（大内核、微内核）】</p><hr><ul><li><strong><u>操作系统结构——分层结构</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-00-31.png" alt=""></p><p>最底层是硬件，最高层是用户接口<br>每层可调用更低一层【不能跨层调用】</p><hr><ul><li><strong><u>操作系统结构——模块化</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-04-57.png" alt=""></p><p><strong>模块化</strong>是将操作系统按功能划分为若干个具有一定独立性的模块。每个模块具有某方面的管理功能，并规定好各模块间的接口，使各模块之间能通过接口进行通信。还可以进一步将各模块细分为若干个具有一定功能的子模块，同样也规定好各子模块之间的接口。把这种设计方法称为<strong>模块-接口法</strong>，上图所示为由模块、子模块等组成的模块化操作系统结构。</p><hr><ul><li><strong><u>操作系统结构——外核（exokernel）</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-11-27.png" alt=""></p><hr><h2 id="1-5-操作系统的引导">1.5 操作系统的引导</h2><blockquote><p>操作系统引导(boot)–开机的时候怎么让操作系统运行起来?</p></blockquote><ul><li><strong><u>一个刚买来的磁盘（硬盘）</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-25-17.png" alt=""></p><hr><ul><li><strong><u>安装操作系统后，操作系统引导（开机过程）</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-33-54.png" alt=""></p><p>【注释】<br>根目录：顾名思义，双击C盘看到的那些东西<br>分区表：实际上是一个数据结构，记录每个盘每个分区多大、地址范围这些信息<br>BIOS：Basic Input/Output System<br>ROM引导程序：ROM boot 程序</p><p><strong>操作系统引导</strong>:<br>① CPU从一个特定主存地址开始，取指令，执行ROM中的引导程序 (先进行硬件自检，再开机)<br>② 将磁盘的第一块–主引导记录 读入内存，执行磁盘引导程序，扫描分区表<br>③ 从活动分区 (又称主分区，即安装了操作系统的分区)读入分区引导记录，执行其中的程序<br>④ 从根目录下找到完整的操作系统初始化程序(即启动管理器)并执行，完成“开机”的一系列动作</p><hr><ul><li><strong><u>例: windows 操作系统的初始化程序</u></strong></li></ul><p>注：完整的操作系统初始化程序 (即 启动管理器) 可在根目录下找到<br>Eg：windows操作系统完整的开机初始化程序在“根目录/Windows/Boot”下</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-38-37.png" alt=""></p><hr><h2 id="1-6-虚拟机">1.6 虚拟机</h2><ul><li><strong><u>传统计算机</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-42-34.png" alt=""></p><hr><ul><li><strong><u>虚拟机</u></strong></li></ul><p>虚拟机：使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器(Virtual Machine,VM)，每个虚拟机器都可以独立运行一个操作系统</p><p>同义术语：虚拟机管理程序/虚拟机监控程序/Virtual Machine Monitor（VMM）/Hypervisor</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_16-53-47.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_17-02-17.png" alt=""></p><hr><ul><li><strong><u>两类虚拟机管理程序（VMM）的对比</u></strong></li></ul><table><thead><tr><th style="text-align:left"></th><th>第一类VMM</th><th>第二类VMM</th></tr></thead><tbody><tr><td style="text-align:left">对物理资源的控制权</td><td>直接运行在硬件上，能直接控制和分配物理资源</td><td>运行在Host OS之上，依赖Host OS为其分配物理资源</td></tr><tr><td style="text-align:left">资源分配方式</td><td>在安装Guest OS时，VMM要在原本的硬盘上自行分配存储空间，类似于“外核”的分配方式，分配未经抽象的物理硬件</td><td>Guest OS拥有自己的虚拟磁盘，该盘实际上是Host OS文件系统中的一个大文件。Guest OS分配到的内存是虚拟内存</td></tr><tr><td style="text-align:left">性能</td><td>性能更好</td><td>性能更差，需要Host OS作为“中介”</td></tr><tr><td style="text-align:left">可支持虚拟机的数量</td><td>更多，不需要和Host OS竞争资源，相同的硬件资源可以支持更多的虚拟机</td><td>更少，Host OS本身也需要使用物力资源，Host OS上运行的其他进程也需要物理资源</td></tr><tr><td style="text-align:left">虚拟机的可迁移性</td><td>更差</td><td>更好，只需要导出虚拟机镜像文件即可迁移到另一台Host OS上，商业化应用更广泛</td></tr><tr><td style="text-align:left">运行模式</td><td>第一类VMM运行在最高权限级（Ring 0），可以执行最高权限指令</td><td>第二类VMM部分运行在用户态，部分运行在内核态。Guest OS发出的系统调用会被VMM截获，并转化为VMM对Host OS的系统调用</td></tr></tbody></table><hr><h1>第二章 进程与线程</h1><h2 id="2-1-1-进程的概念、组成、特征">2.1.1 进程的概念、组成、特征</h2><ul><li><strong><u>进程的概念</u></strong></li></ul><p>程序：是<strong>静态的</strong>，就是个存放在磁盘里的 可执行文件，就是一系列的指令集合。<br>进程（Process）：是<strong>动态的</strong>，是程序的一 次执行过程 同一个程序多 次执行会对应 多个进程</p><hr><ul><li><strong><u>进程的组成——PCB</u></strong></li></ul><p>思考：操作系统是这些进程的管理者，它要怎么区分各个进程？<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> 当进程被创建时，操作系统会为该进程分配一个<strong>唯一的</strong>、<strong>不重复</strong>的“身份证号”—— <strong>PID</strong>（Process ID，进程ID）</p><ol><li>操作系统要记录PID、进程所属用户ID（UID）<br>【基本的进程描述信息，可以让操作系统区分各个进程】</li><li>还要记录给进程分配了哪些资源（如：分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件）<br>【可用于实现操作系统对资源的管理】</li><li>还要记录进程的运行情况（如：CPU使用时间、磁盘使用情况、网络流量使用情况等）<br>【可用于实现操作系统对进程的控制、调度】</li><li>这些信息都被保存在一个数据结构<strong>PCB</strong> （Process Control Block）中，即<strong>进程控制块</strong><br>操作系统需要对各个并发运行的进程进行管理，<strong>但凡管理时所需要的信息，都会被放在PCB中</strong></li></ol><p>【总结】：</p><ul><li><strong>进程控制块（PCB）</strong> ：PCB是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收其PCB。<ul><li><strong>进程描述信息</strong><ul><li>进程标识符PID</li><li>用户标识符UID</li></ul></li><li><strong>进程控制和管理信息</strong><ul><li>CPU、磁盘、网络流量使用情况统计…</li><li>进程当前状态：就绪态 / 阻塞态 / 运行态…</li></ul></li><li><strong>资源分配清单</strong><ul><li>正在使用哪些文件</li><li>正在使用哪些内存区域</li><li>正在使用哪些I/O设备</li></ul></li><li><strong>处理机相关信息</strong><ul><li>如PSW，PC等等各种寄存器的值（用于实现进程切换）</li></ul></li></ul></li></ul><p>操作系统对进程进行管理工作所需的信息都存在PCB中</p><hr><ul><li><u><strong>进程的组成——程序段、数据段</strong></u><ul><li><strong>PCB</strong><ul><li>进程描述信息</li><li>进程控制和管理信息</li><li>资源分配清单</li><li>处理机相关信息</li></ul></li><li><strong>程序段</strong><ul><li>程序的代码（指令序列）</li></ul></li><li><strong>数据段</strong><ul><li>运行过程中产生的各种数据（如：程序中定义的变量）</li></ul></li></ul></li></ul><p><strong>PCB</strong> 是<strong>给操作系统用的</strong>。<br><strong>程序段、数据段</strong>是<strong>给进程自己用的</strong>。</p><hr><ul><li><strong><u>知识滚雪球：程序是如何运行的？</u></strong></li></ul><p>一条高级语言的代码翻译过来可能会对应多条机器指令<br>程序运行的过程其实就是CPU执行一条一条的机器指令的过程</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_21-07-33.png" alt=""></p><p>一个<strong>进程实体（进程映像）</strong> 由<strong>PCB</strong>、<strong>程序段</strong>、<strong>数据段</strong>组成。 <strong>进程</strong>是<strong>动态</strong>的，<strong>进程实体（进程映像）</strong> 是<strong>静态</strong>的。 进程实体反应了进程在某一时刻的状态（如：x++后，x=2）</p><hr><ul><li><u><strong>进程的组成</strong></u>【更确切的说，应该 是“进程实体(进程 映像)的组成”】<ul><li><strong>PCB</strong>【PCB 是给操作系统用的】<ul><li>进程描述信息</li><li>进程控制和管理信息</li><li>资源分配清单</li><li>处理机相关信息</li></ul></li><li><strong>程序段</strong><ul><li>程序的代码（指令序列）</li></ul></li><li><strong>数据段</strong><ul><li>运行过程中产生的各种数据（如：程序中定义的变量）</li></ul></li></ul></li></ul><p>【程序段、数据段是给进程自己用的， 与进程自身的运行逻辑有关】<br>【同时挂三个QQ号，会对应三个QQ进程，它们的PCB、数据段各不相同，但程序段的内容都是相同的 （都是运行着相同的QQ程序）】</p><p><strong>程序段、数据段、PCB</strong>三部分组成了<strong>进程实体（进程映像）</strong> 引入进程实体的概念后，<br>可把<strong>进程定义为</strong>： 进程是进程实体的<strong>运行过程</strong>，是系统进行<strong>资源分配和调度</strong>的一个独立单位。<br>【一个进程被“调度”，就是指操作系统决定让这个进程上CPU运行】</p><p>注意：PCB是进程存在的唯一标志！</p><hr><ul><li><strong><u>进程的特征</u></strong></li></ul><p>程序是静态的，进程是动态的，相比于程序，进程拥有以下特征：</p><ol><li><strong>动态性</strong>【动态性是进程最基本的特征】<br>进程是程序的一次执行过程，是动态地产生、变化和消亡的</li><li><strong>并发性</strong><br>内存中有多个实体进程，各进程可并发执行</li><li><strong>独立性</strong><br>进程是能独立运行、独立获得资源、独立接受调度的基本单位</li><li><strong>异步性</strong><br>各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题</li><li><strong>结构性</strong><br>每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成</li></ol><hr><h2 id="2-1-2-进程的状态与转换、进程的组织">2.1.2 进程的状态与转换、进程的组织</h2><ul><li><u><strong>进程的状态——创建态、就绪态</strong></u></li></ul><p>进程正在被创建时，它的状态是“<strong>创建态</strong>”，在这个阶段操作系统会为进程分配资源、初始化PCB</p><p>当进程创建完成后，便进入“<strong>就绪态</strong>”， 处于就绪态的进程已经具备运行条件， 但由于没有空闲CPU，就暂时不能运行</p><hr><ul><li><strong><u>进程的状态——运行态</u></strong></li></ul><p>系统中可能会有很多个进程都处于就绪态；</p><p>当CPU空闲时，操作系统就会选择一个就绪进程， 让它上处理机运行；</p><p>如果一个进程此时在CPU上运行，那么这个进程处于“<strong>运行态</strong>”。 CPU会执行该进程对应的程序（执行指令序列）</p><hr><ul><li><strong><u>进程的状态——阻塞态</u></strong></li></ul><p>在进程运行的过程中，可能会<strong>请求等待某个事件的发生</strong>（如等待某种系统资源的分配，或者等待其他进程的响应）。</p><p>在这个事件发生之前，进程无法继续往下执行，此时操作系统会 让这个进程下CPU，并让它进入“<strong>阻塞态</strong>”</p><p>当CPU空闲时，又会选择另一个“就绪态”进程上CPU运行</p><hr><ul><li><u><strong>进程的状态——终止态</strong></u></li></ul><p>一个进程可以执行 exit 系统调用，请求操作系统终止该进程。</p><p>此时该进程会进入“<strong>终止态</strong>”，操作系统会让该进程下CPU， 并回收内存空间等资源，最后还要回收该进程的PCB。</p><p>当终止进程的工作完成之后，这个进程就彻底消失了。</p><hr><ul><li><strong><u>进程状态的转换</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_21-37-42.png" alt=""></p><p><strong>注意：不能由阻塞态直接转换为运行态， 也不能由就绪态直接转换为阻塞态</strong>（因为 进入阻塞态是进程主动请求的，必然需要 进程在运行时才能发出这种请求）</p><hr><ul><li><strong><u>进程的状态</u></strong><ul><li><strong>三种基本状态</strong>【进程的整个生命周期 中，大部分时间都处 于三种基本状态】<ul><li>运行态（Running）【单CPU情况下，同一时刻只会有一 个进程处于运行态，多核CPU情况 下，可能有多个进程处于运行态】<br>占有CPU，并在CPU上运行</li><li>就绪态（Ready）<br>已经具备运行条件，但由于没有空闲CPU，而暂时不能运行</li><li>阻塞态（Waiting / Blocked，又称：等待态）<br>因等待某一事件而暂时不能运行</li></ul></li><li>另外两种状态<ul><li>创建态（New，又称：新建态）<br>进程正在被创建，操作系统为进程分配资源、初始化PCB</li><li>终止态（Terminated，又称：结束态）<br>进程正在从系统中撤销，操作系统会回收进程拥有的资源、撤销PCB</li></ul></li></ul></li></ul><p><strong>进程PCB中，会有一个变量 state 来表示进程的当前状态</strong>。如：1表示创建态、2表示就绪态、3表示运行态… 为了对同一个状态下的各个进程进行统一的管理，操作系统会将各个进程的PCB组织起来。</p><hr><ul><li><strong><u>进程的组织——链接方式</u></strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-03-39.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-04-35.png" alt=""></p><hr><ul><li><u><strong>进程的组织——索引方式</strong></u></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-05-33.png" alt=""></p><hr><ul><li><strong><u>进程的组织</u></strong><ul><li><strong>链接方式</strong><ul><li>按照进程状态将PCB分为多个队列</li><li>操作系统持有指向各个队列的指针</li></ul></li><li><strong>索引方式</strong><ul><li>根据进程状态不同，建立几张索引表</li><li>操作系统持有指向各个索引表的指针</li></ul></li></ul></li></ul><p>大多数操作系统使用链接方式【</p><hr><h2 id="2-1-3-进程控制">2.1.3 进程控制</h2><ul><li><strong><u>什么是进程控制？</u></strong></li></ul><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</p><p>简化理解：反正进程控制就是要实现进程状态转换</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-15-07.png" alt=""></p><hr><ul><li><strong><u>如何实现进程控制？</u></strong></li></ul><p>用“原语”实现【第一章提到了】</p><p>原语的执行具有“原子性”，一气呵成</p><p>思考：为何进程控制（状态转 换）的过程要“一气呵成”？<br>如果不能“一气呵成”，就有可能导致操作系统中的某些关键数据结构信息不统一的情况， 这会影响操作系统进行别的管理工作</p><p>Eg：假设PCB中的变量 state 表示进程当前所处状态，1表示就绪态，2表示阻塞态…<br>假设此时进程2等待的事件发生，则操作系统中，负责进程控制的内核程序至少需要做这样两件事：<br>①将PCB2的 state 设为 1<br>②将PCB2从阻塞队列放到就绪队列</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-22-47.png" alt=""></p><p>但是完成了第一步后收到中断信号，CPU处理中断去了，那么这个时候PCB2 的state=1，但是它却还在阻塞队列里。</p><hr><ul><li><strong><u>如何实现原语的“原子性”？</u></strong></li></ul><p><strong>原语</strong>的执行具有<strong>原子性</strong>，即执行过程只能一气呵成，期间<strong>不允许被中断</strong>。<br>可以用 “<strong>关中断指令</strong>”和“<strong>开中断指令</strong>”这两个<strong>特权指令</strong>实现<strong>原子性</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/courses/os/Snipaste_2023-05-04_23-28-05.png" alt=""></p><p>如上图：<br>CPU执行了关中断指令之后，就不再例行检查中断信号，直到执行开中断指令之后才会恢复检查。</p><p>这样，关中断、开中断 之间的这些指令序列就是不可被中断的，这就实现了“原子 性”</p><p>思考：如果这两个特权指令允许用户程序使用的话，会发生什么情况？<br>假设用户直接在程序开头设置关中断，在程序尾设置开中断，那么这个程序执行时将不能被打断，一直霸占资源，这是不合理的。</p><hr><ul><li><strong><u>进程控制相关的原语</u></strong></li></ul><ol><li><strong>进程的创建</strong><ul><li><strong>创建原语</strong>【操作系统创建一个进程时使用的原语】<ul><li>申请空白PCB</li><li>为新的进程分配资源</li><li>初始化PCB</li><li>将PCB插入就绪队列【创建态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 就绪态】</li></ul></li><li>引起进程创建的事件<ul><li>用户登录<br>分时系统中，用户登录成功，系统会为其创建一个新的进程</li><li>作业调度<br>多道批处理系统中，有新的作业放入内存时，会为其建立一个新的进程</li><li>提供服务<br>用户向操作系统提出某些请求时，会新建一个进程处理该请求</li><li>应用请求<br>由用户进程主动请求创建一个子进程</li></ul></li></ul></li><li><strong>进程的终止</strong><ul><li><strong>撤销原语</strong>【就绪态/阻塞态/运行态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 终止态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 无】<ul><li>从PCB集合中找到终止进程的PCB</li><li>若进程正在运行，立即剥夺CPU，将CPU分配给其他进程</li><li>终止其所有子进程【进程间的关系是树形结构】</li><li>将该进程拥有的所有资源归还给父进程或操作系统</li><li>删除PCB</li></ul></li><li>引起进程终止的事件<ul><li>正常结束【进程自己请求终止（exit系统调用）】</li><li>异常结束【整数除以0、非法使用特权指令， 然后被操作系统强行杀掉】</li><li>外界干预【Ctrl+Alt+delete，用户选择杀掉进程】</li></ul></li></ul></li></ol><p>3.阻塞原语、4.唤醒原语必须成对使用</p><ol start="3"><li><strong>进程的阻塞</strong><ul><li><strong>阻塞原语</strong>【运行态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 阻塞态】<ul><li>找到要阻塞的进程对应的PCB</li><li><strong>保护进程运行现场</strong>，将PCB状态信息设置为“阻塞态”，暂时停止进程运行</li><li>将PCB插入相应事件的等待队列</li></ul></li><li>引起进程阻塞的事件<ul><li>需要等待系统分配某种资源</li><li>需要等待相互合作的其他进程完成工作</li></ul></li></ul></li><li><strong>进程的唤醒</strong><ul><li><strong>唤醒原语</strong>【阻塞态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 就绪态】<ul><li>在事件等待队列找到PCB</li><li>将PCB从等待队列移除，设置进程为就绪态</li><li>将PCB插入就绪队列，等待被调度</li></ul></li><li>引起进程唤醒的事件<ul><li>等待的事件发生【因何事阻塞，就应由何事唤醒】</li></ul></li></ul></li><li><strong>进程的切换</strong><ul><li><strong>切换原语</strong>【运行态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 就绪态、就绪态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 运行态】<ul><li>将<strong>运行环境信息</strong>【进程上下文（Context ）】存入PCB</li><li>PCB移入相应队列</li><li>选择另一个进程执行，并更新其PCB</li><li>根据PCB恢复<strong>新进程所需的运行环境</strong></li></ul></li><li>引起进程切换的事件<ul><li>当前进程时间片到</li><li>有更高优先级的进程到达</li><li>当前进程主动阻塞</li><li>当前进程终止</li></ul></li></ul></li></ol><h1>第三章 内存管理</h1><h1>第四章 内存管理</h1><h1>第五章 输入/输出（I/O）管理</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树学习笔记</title>
      <link href="/2023/04/12/%E4%BA%8C%E5%8F%89%E6%A0%91x/"/>
      <url>/2023/04/12/%E4%BA%8C%E5%8F%89%E6%A0%91x/</url>
      
        <content type="html"><![CDATA[<h1>二叉树</h1><p>内容来源于<a href="https://www.programmercarl.com/">代码随想录</a></p><h2 id="二叉树的递归遍历">二叉树的递归遍历</h2><h3 id="递归推理的三个思考点">递归推理的三个思考点</h3><ul><li>确定递归的参数和返回值：哪些参数是递归过程需要考虑的</li><li>确定终止条件：操作系统使用一个栈结构来保存每一层递归的信息</li><li>确定单层递归的逻辑</li></ul><p>二叉树的深度搜索三个方法：前序、中序、后序就是使用递归遍历：</p><p>首先是二叉树的创建：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/aandds/snipaste20230128_112429.jpg" alt=""></p><p>输入样例：1 5 8 0 0 0 6 0 0</p><p>这个采用的是先根遍历的方式创建的：首先读入根节点，然后一路向左创建新的节点，再向左搜索直至没有左节点，接着回溯至上一根节点寻找右节点，若无结束当层节点的递归，再返回上一个节点。这边要特别注意记得返回的是当前节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">t-&gt;val = num;</span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, t-&gt;val);</span></span><br><span class="line">t-&gt;left = create_tree(t-&gt;left);</span><br><span class="line">t-&gt;right = create_tree(t-&gt;right); </span><br><span class="line">&#125;<span class="keyword">return</span> t;</span><br></pre></td></tr></table></figure><p><code>return t</code> 特别注意</p><p>接下来就是根据先根中跟后跟的口诀来依次递归：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span> * <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span> * <span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">treenode</span>* <span class="title">root</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">struct</span> treenode * <span class="title function_">create</span><span class="params">(<span class="keyword">struct</span> treenode * root)</span>&#123;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span> * <span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d)!= EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">node = (<span class="keyword">struct</span> treenode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> treenode));</span><br><span class="line">node-&gt;data = d;</span><br><span class="line">node-&gt;left = create(node-&gt;left);</span><br><span class="line">node-&gt;right = create(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">void</span> <span class="title function_">travel_first</span><span class="params">(<span class="keyword">struct</span> treenode *node)</span>&#123;<span class="comment">//先根</span></span><br><span class="line">       <span class="keyword">if</span>(node == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;data);</span><br><span class="line">   travel_first(node-&gt;left);</span><br><span class="line">   travel_first(node-&gt;right);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">travel_second</span><span class="params">(<span class="keyword">struct</span> treenode *node)</span>&#123;<span class="comment">//中跟</span></span><br><span class="line">       <span class="keyword">if</span>(node ==<span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">   travel_second(node-&gt;left);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;data);</span><br><span class="line">   travel_second(node-&gt;right);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">travel_third</span><span class="params">(<span class="keyword">struct</span> treenode *node)</span>&#123;<span class="comment">//后根</span></span><br><span class="line">       <span class="keyword">if</span>(node ==<span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">   travel_third(node-&gt;left);</span><br><span class="line">   </span><br><span class="line">   travel_third(node-&gt;right);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;data);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">treenode</span>* <span class="title">r</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">     r = create(r);</span><br><span class="line">     travel_first(r);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     travel_second(r);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     travel_third(r);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的非递归遍历">二叉树的非递归遍历</h2><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><p>为了方便说明，先附上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">travel_first</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">stack</span>[100];</span></span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>[++top] = r;</span><br><span class="line">    <span class="keyword">while</span>(top != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">tmp</span>;</span></span><br><span class="line">    tmp = <span class="built_in">stack</span>[top];</span><br><span class="line">    <span class="built_in">stack</span>[top]=<span class="literal">NULL</span>;</span><br><span class="line">    top--;</span><br><span class="line">    result[++toper] = tmp-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(tmp-&gt;right != <span class="literal">NULL</span>)<span class="built_in">stack</span>[++top] = tmp-&gt;right;</span><br><span class="line">    <span class="keyword">if</span>(tmp-&gt;left != <span class="literal">NULL</span>)<span class="built_in">stack</span>[++top] = tmp-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先建立一个树节点的临时栈，将根节点压入栈中，然后再将值压入结果栈中，再先压右子树进入栈中，后压左子树（这点非常的重要），再打印result数组。</p><p>强调：临时栈弹出后一定要清空！然后打印数组时一定要打印到top指向的位置而不是前一位！</p><p>后根遍历改变压栈顺序先左后右然后逆序输出result数组即可，这边不再强调。</p><ul><li><strong>中根遍历</strong></li></ul><ol><li><strong>处理：将元素放进result数组中</strong></li><li><strong>访问：遍历节点</strong></li></ol><p>这个时候需要一个指针用来存储临时遍历的节点，直至遍历到左子树最下面的一个叶子节点：我们常常把对根节点的处理作为递归出口，然后使用临时栈来判断循环条件。</p><p>这边要特别注意不能直接将临时栈中的数据直接取出来存入结果数组中，因为这样子树的链表连接就直接断开了，在这一步和上面相同的是要更新这个临时节点指向的数据，将其更新为栈顶元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">travel_first</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">stack</span>[100];</span></span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">temp</span> =</span> r;</span><br><span class="line">    <span class="keyword">while</span>(top != <span class="number">0</span>||temp != <span class="literal">NULL</span>)&#123;<span class="comment">//根节点为空、栈为空 </span></span><br><span class="line">       <span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;<span class="comment">//temp代表的是一路向左的指针，有可能本身为空，不要写成temp-&gt;left </span></span><br><span class="line">       <span class="built_in">stack</span>[++top] = temp;</span><br><span class="line">       temp = temp-&gt;left;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;<span class="comment">//这个地方特别注意这个节点的传递</span></span><br><span class="line">   temp = <span class="built_in">stack</span>[top]; </span><br><span class="line">   <span class="built_in">stack</span>[top] = <span class="literal">NULL</span>;</span><br><span class="line">     top--;</span><br><span class="line">     result[++toper] = temp-&gt;val;</span><br><span class="line">     temp = temp-&gt;right;</span><br><span class="line">   &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一迭代法">统一迭代法</h3><p>统一迭代法使用一个空指针作为标记，用以区分访问过的节点和决定弹出的顺序；根后面跟着一个空指针，然后压入顺序记得颠倒：</p><p>中序遍历：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">travel_first</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">stack</span>[100];</span></span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>[++top] = root;<span class="comment">//将根节点放入栈中，不放会是空栈，死循环 </span></span><br><span class="line">    <span class="keyword">while</span>(top != <span class="number">0</span>)&#123;<span class="comment">//根节点为空、栈为空 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">temp</span> =</span> <span class="built_in">stack</span>[top];<span class="comment">//统一迭代法中的临时节点实际上是指针，谁访问的节点由谁决定 </span></span><br><span class="line">       <span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;<span class="comment">//temp不为空的时候代表一种标记，不必弹栈</span></span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="literal">NULL</span>;</span><br><span class="line">        top--;<span class="comment">//弹栈</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;right != <span class="literal">NULL</span>)<span class="built_in">stack</span>[++top] = temp-&gt;right;</span><br><span class="line"><span class="built_in">stack</span>[++top] = temp; </span><br><span class="line">       <span class="built_in">stack</span>[++top] = <span class="literal">NULL</span>;<span class="comment">//根节点后做标记</span></span><br><span class="line">       <span class="keyword">if</span>(temp-&gt;left != <span class="literal">NULL</span>)<span class="built_in">stack</span>[++top] = temp-&gt;left;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;<span class="comment">//遇到NULL则弹栈</span></span><br><span class="line">   top--;<span class="comment">//开始弹出节点</span></span><br><span class="line">   temp = <span class="built_in">stack</span>[top]; </span><br><span class="line">   <span class="built_in">stack</span>[top] = <span class="literal">NULL</span>;</span><br><span class="line">     top--;</span><br><span class="line">     result[++toper] = temp-&gt;val;</span><br><span class="line">   &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前序和后序改变两个if语句的顺序即可。</p><h2 id="二叉树的层序遍历">二叉树的层序遍历</h2><h3 id="广度优先搜索">广度优先搜索</h3><p>利用辅助队列，每层节点按顺序进入队列，接着分别判断左右节点是否为空，若不为空则分别进入队列，再按顺序依次弹出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">leverOrder</span><span class="params">(<span class="keyword">struct</span> node * r)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">queue</span>[100];</span></span><br><span class="line"><span class="type">int</span> front= <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(r != <span class="literal">NULL</span>)<span class="built_in">queue</span>[++rear] = r;</span><br><span class="line"><span class="comment">//front = rear;</span></span><br><span class="line"><span class="keyword">while</span>(front != rear)&#123;</span><br><span class="line"><span class="type">int</span> size = rear-front;<span class="comment">//size实际上是每层节点的数目 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">tmp</span> =</span> <span class="built_in">queue</span>[front+<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//这边要注意出队的时候我们记录的是front+1 </span></span><br><span class="line">result[++toper] = tmp-&gt;val;</span><br><span class="line">            front++;</span><br><span class="line">    <span class="keyword">if</span>(tmp-&gt;left != <span class="literal">NULL</span>)<span class="built_in">queue</span>[++rear] = tmp-&gt;left;</span><br><span class="line">    <span class="keyword">if</span>(tmp-&gt;right != <span class="literal">NULL</span>)<span class="built_in">queue</span>[++rear] = tmp-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="二叉树的深度-max-min">二叉树的深度(max,min)</h2><p>本题可以使用前序（中左右），也可以使用后序遍历（左右中），<u>使用<strong>前序</strong>求的就是<strong>深度</strong>，使用<strong>后序</strong>求的是<strong>高度</strong>。</u></p><ul><li>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数或者节点数</li><li>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数后者节点数</li></ul><p>注意：使用递归求取最大深度，（后序遍历）分别对左子树和右子树求，然后再返回左右子树中深度最大的。不可直接返回左右子树求出来的那个值：原因不详。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">depth</span><span class="params">(<span class="keyword">struct</span> node * r)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> leftdepth = depth(r-&gt;left);</span><br><span class="line"><span class="type">int</span> rightdepth = depth(r-&gt;right);</span><br><span class="line"><span class="type">int</span> max = leftdepth &gt; rightdepth ?leftdepth:rightdepth;</span><br><span class="line"><span class="keyword">return</span> max+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有两种解决办法：通过先序遍历来求解深度（回溯）以及通过层次遍历来求解：层次遍历思路较为简单，详情参见上面层次遍历的模板，在计算每层节点数时顺便让深度depth+1即可。</p><p>先度遍历：先检测根节点，再监测左子树，不为空就加一，回溯到底则让深度把借过来的一还回去，接着再求解最大值，此处先暂时省略（我有时间一定敲）QAQ</p><h2 id="二叉树的高度（平衡二叉树判断）">二叉树的高度（平衡二叉树判断）</h2><p>本题采用后序遍历，仍然是采用递归的三个思想，应该传入什么参数（我个人觉得刷到现在都是传入根的节点）</p><p>1.明确递归函数的参数和返回值</p><p>参数：当前传入节点。<br>返回值：以当前传入节点为根节点的树的高度。</p><p>2.明确终止条件</p><p>递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0</p><p>3.明确单层递归逻辑</p><p>如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。</p><p>分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_height</span><span class="params">(<span class="keyword">struct</span> node * r)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> leftheight = get_height(r-&gt;left);<span class="comment">//这边不需要判断该节点的左子树 是否为空 </span></span><br><span class="line"><span class="keyword">if</span>(leftheight == <span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> rightheight = get_height(r-&gt;right);</span><br><span class="line"><span class="keyword">if</span>(rightheight == <span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(leftheight-rightheight) &gt;<span class="number">1</span>? <span class="number">-1</span>:<span class="number">1</span>+max(leftheight,rightheight);<span class="comment">//这个语句的语法最好还是记一下挺常见的 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的所有路径">二叉树的所有路径</h2><p>dfs+回溯（本题我并没有看懂这个网站的解法，所以自己思考加上参考别人的思路最终敲出来的代码）</p><p>注意：1.本题真正的终止条件是访问到的节点是个叶子节点，在这个时候递归与回溯是配套的，所以我们要使用一个配套的存储数组stack，来<strong>暂时保存该条路径所有访问过的节点</strong>。</p><p>​           2.本题第二个麻烦的是输出路径必然为char数组，鉴于动态分配我实在是没学会，我就还是选择将数组开大一点然后一次存储路径。</p><p>​           3.本题采用的是先根序列的方式，前面我们提到一般求深度的时候首选先根，所有路径的起点均为根，所以我们还是选择了先根序列。</p><p>​           4.单层递归思路，往左一直走，走到没有路了将这条路记录给stack，这边要注意的是stack是个int 整型而我们需要一个临时字符串数组来存储，这边借助了别人的方法来使用sprintf函数，值得一提的是，它的头文件正是<code>include&lt;stdio.h&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="built_in">stack</span>[<span class="number">1001</span>];<span class="comment">//存储单条路径访问过的节点 </span></span><br><span class="line"><span class="type">int</span> top;    </span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="keyword">struct</span> node* root,<span class="type">char</span> result[][<span class="number">101</span>],<span class="type">int</span>* <span class="built_in">stack</span>, <span class="type">int</span> top)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> tmp[<span class="number">101</span>];<span class="comment">//tmp最终记录当前叶子节点对应得路径 </span></span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; top; i++) <span class="comment">//将栈中所有暂存的点全部输出出来 </span></span><br><span class="line">        &#123;<span class="comment">//按照顺序输出节点 </span></span><br><span class="line">            len += <span class="built_in">sprintf</span>(tmp + len, <span class="string">&quot;%d-&gt;&quot;</span>, <span class="built_in">stack</span>[i]);<span class="comment">//sprintf返回的是该字符串的长度，len是这个路径字符串的长度，</span></span><br><span class="line"><span class="comment">//tmp是字符串的指针，要向后移动多少长度才能把stack中包括箭头加入进来 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp + len, <span class="string">&quot;%d&quot;</span>, root-&gt;val);<span class="comment">//记得加入最后一个节点 </span></span><br><span class="line">        <span class="built_in">strcpy</span>(result[count++],tmp);  <span class="comment">// 把路径加入到答案中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">stack</span>[top++] = root-&gt;val;  <span class="comment">// 当前节点不是叶子节点，继续递归遍历</span></span><br><span class="line">        dfs(root-&gt;left, result, <span class="built_in">stack</span>, top);</span><br><span class="line">        dfs(root-&gt;right, result, <span class="built_in">stack</span>, top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>for(int i = 0;i &lt; count;i++)printf(&quot;%s\n&quot;, result[i]);</code></p><h2 id="二叉树的路径和">二叉树的路径和</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>这道题还是常规的回溯，但是它是依次减去根节点的数值，从而来判断是否符合给出的目标值。</p><p>注意：本题给出的解答并未将根节点的数值进行录入，如果考虑输入输出情况需要在主函数中判断根节点是否为空，如果不为空将目标值减去根节点的数值然后再进行求解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">sum_tree</span><span class="params">(<span class="keyword">struct</span> node *r, <span class="type">int</span> target)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;left == <span class="literal">NULL</span> &amp;&amp; r-&gt;right == <span class="literal">NULL</span> &amp;&amp; target == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//符合路径和 </span></span><br><span class="line"><span class="keyword">if</span>(r-&gt;left == <span class="literal">NULL</span> &amp;&amp; r-&gt;right == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//遇到叶子节点直接返回 </span></span><br><span class="line"><span class="keyword">if</span>(r-&gt;left)&#123;</span><br><span class="line">target -= r-&gt;left-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(sum_tree(r-&gt;left,target))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">target+=r-&gt;left-&gt;val; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;right)&#123;</span><br><span class="line">target -= r-&gt;right-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(sum_tree(r-&gt;right,target))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">target += r-&gt;right-&gt;val; <span class="comment">//记得每次回溯要加回去，才能去检测下一条路径 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//所有路径走完均没有找到符合条件的值，返回false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树线索化">二叉树线索化</h2><p>介个是我们老师课内拓展的内容–为了强化记忆我特意还原了老师pdf内的算法。首先结构体内会多出两部分内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="type">int</span> Lthread;</span><br><span class="line"><span class="type">int</span> Rthread;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">right</span>;</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/aandds/snipaste20230129_214705.jpg" alt=""></p><p>先描述如何将一个二叉树线索化：首先它的基本思路就是中序遍历：在中序遍历的基础上进行修改。访问完左子树后，对左子树进行判断，为空进行线索化，此时我们需要借助一个父节点用来实时更新左子树指向的位置。同理对于右子树，我们利用了pre这一节点来进行判断是否需要线索化，当满足pre不为空且右子树为空（这边一开始错了改了半个点QAQ）从而来实现线索化，最后尤其注意更新pre的位置，将其变化为下一个节点，再递归进行右子树。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">travel_second</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">travel_second(r-&gt;left);</span><br><span class="line"><span class="keyword">if</span>(r-&gt;left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">r-&gt;Lthread = <span class="number">1</span>;</span><br><span class="line">r-&gt;left = pre;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> r-&gt;Lthread = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;right == <span class="literal">NULL</span>)&#123;<span class="comment">//</span></span><br><span class="line">    pre-&gt;Rthread = <span class="number">1</span>;</span><br><span class="line">    pre-&gt;right = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pre != <span class="literal">NULL</span>)pre-&gt;Rthread = <span class="number">0</span>;</span><br><span class="line">pre = r;</span><br><span class="line">travel_second(r-&gt;right);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>接下来关于中序线索二叉树的遍历，我主要描述利用找首个节点和下一节点的方法，对于找最后节点和前一节点，将左子树改为右子树即可，不再详细赘述。</p><p>首个节点：一路向左，直至没有左子树返回</p><p>下个节点：当Rthread=1时，意味着它的右指针指向下个节点，直接返回</p><p>​                    否则，则返回它右子树的第一个节点。</p><p>那么利用上述两个函数，我们最终写出了遍历的算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> node* <span class="title function_">first_order</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;Lthread == <span class="number">0</span>)&#123;</span><br><span class="line">r = r-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> node* <span class="title function_">next_order</span><span class="params">(<span class="keyword">struct</span> node *t)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;Rthread ==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> t-&gt;right;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;,t-&gt;right-&gt;val);</span></span><br><span class="line"><span class="keyword">return</span> first_order(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">inorder</span><span class="params">(<span class="keyword">struct</span> node *r)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">tmp</span> =</span> r;</span><br><span class="line">tmp = first_order(r);</span><br><span class="line"><span class="keyword">while</span>(tmp!= <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tmp-&gt;val);</span><br><span class="line">tmp = next_order(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的公共祖先">二叉树的公共祖先</h2><p><strong>归纳三点</strong>：</p><ol><li>求最小公共祖先，需要从底向上遍历，那么二叉树，只能通过后序遍历（即：回溯）实现从底向上的遍历方式。</li><li>在回溯的过程中，必然要遍历整棵二叉树，即使已经找到结果了，<strong>依然要把其他节点遍历完</strong>，因为要使用递归函数的返回值（也就是代码中的left和right）做逻辑判断。</li><li>要理解如果返回值left为空，right不为空为什么要返回right，为什么可以用返回right传给上一层结果</li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/aandds/snipaste20230130_221716.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeNode* <span class="title function_">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//根节点为空直接返回空</span></span><br><span class="line">    <span class="keyword">if</span>(root==p || root == q)<span class="keyword">return</span> root;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span> =</span>lowestCommonAncestor (root-&gt;left,p,q);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span> =</span> lowestCommonAncestor(root-&gt;right,p,q);</span><br><span class="line">    <span class="keyword">if</span>(left == <span class="literal">NULL</span>)<span class="keyword">return</span> right;<span class="comment">//可以看上图中2和4，</span></span><br><span class="line">    <span class="comment">//在5这一层递归时left == NULL,于是在右侧查找，找到2时返回right,而这个时候返回的值为3这一层的左值</span></span><br><span class="line">    <span class="keyword">if</span>(right == <span class="literal">NULL</span>)<span class="keyword">return</span> left;<span class="comment">//同理可得</span></span><br><span class="line">    <span class="keyword">return</span> root;<span class="comment">//左右子树同时不为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树">二叉搜索树</h2><p>概念：二叉查找树中任一结点P，其左子树中结点的关键词都小于P的关键词，右子树中结点的关键词都大于P的关键词，且结点P左右子树也都是二叉查找树。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/aandds/snipaste20230131_102811.jpg" alt=""></p><h3 id="查找算法：">查找算法：</h3><p>要强调的就是返回值的问题，如果发现不需要记录沿途的路径值，就直接返回它查找得到的节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeNode* <span class="title function_">searchBST</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="keyword">return</span> root;<span class="comment">//这个地方要返回的是root，而不是NULL会出现野指针</span></span><br><span class="line">         <span class="keyword">if</span>(root-&gt;val == val)<span class="keyword">return</span> root;</span><br><span class="line">         <span class="keyword">if</span>(root-&gt;val &gt; val)<span class="keyword">return</span> searchBST(root-&gt;left,val);</span><br><span class="line">         <span class="keyword">if</span>(root-&gt;val &lt; val)<span class="keyword">return</span> searchBST(root-&gt;right,val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入算法：">插入算法：</h3><p>一个是递归终点的判断错误，不是找到叶子节点就结束，而是找到叶子结点下一位并对此新分配新的空间。</p><p>还有就是递归返回的判断错误：这边是要返回当前节点左子树和右子树的位置，也没有判断正确。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeNode* <span class="title function_">insertIntoBST</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">             <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">tmp</span> =</span>(<span class="keyword">struct</span> TreeNode* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> TreeNode));</span><br><span class="line">             tmp-&gt;val = val;</span><br><span class="line">             tmp-&gt;left = tmp-&gt;right = <span class="literal">NULL</span>;<span class="comment">//没有对左右指针赋值会出现问题在力扣</span></span><br><span class="line">             <span class="keyword">return</span> tmp;<span class="comment">//回溯，层层上交</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(root-&gt;val &lt; val)&#123;</span><br><span class="line">             root-&gt;right =  insertIntoBST(root-&gt;right, val);<span class="comment">//只有让root的位置一直在才能回溯</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &gt;val)</span><br><span class="line">             root-&gt;left = insertIntoBST(root-&gt;left, val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除算法：">删除算法：</h3><p>删除算法整体逻辑不变，就是找到后记得分五种情况处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> TreeNode* <span class="title function_">deleteNode</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="keyword">return</span> root;<span class="comment">//大框架还是找到了，比它大比它小</span></span><br><span class="line">          <span class="keyword">if</span>(root-&gt;val == key)&#123;<span class="comment">//这里是在找到这个节点下要删除的四种情况</span></span><br><span class="line">              <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span>)<span class="keyword">return</span> root-&gt;right;</span><br><span class="line">              <span class="comment">//左子树为空，右子树可空可不空，直接返回右子树</span></span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right == <span class="literal">NULL</span>)<span class="keyword">return</span> root-&gt;left;<span class="comment">//右子树为空返回左子树</span></span><br><span class="line">              <span class="keyword">else</span>&#123;<span class="comment">//最复杂的是左右子树都不为空，这个时候我们要先找到这个点右子树最小的点，就是最左边</span></span><br><span class="line">              <span class="comment">//然后将根的左子树变为这个点的左子树</span></span><br><span class="line">              <span class="comment">//临时记录根的位置，然后让根删除</span></span><br><span class="line">                  <span class="keyword">struct</span> TreeNode * cur = root-&gt;right;</span><br><span class="line">                  <span class="keyword">while</span>(cur-&gt;left != <span class="literal">NULL</span>) cur = cur-&gt;left;</span><br><span class="line">                  cur-&gt;left = root-&gt;left;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">tmp</span> =</span> root;</span><br><span class="line">                root = root-&gt;right;<span class="comment">//此时这个已经失去左子树，只剩右子树，让右子树的根覆盖它即可</span></span><br><span class="line">                <span class="built_in">free</span>(tmp);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; key) root-&gt;left = deleteNode(root-&gt;left, key);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; key) root-&gt;right = deleteNode(root-&gt;right, key);</span><br><span class="line">          <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录刷题代码</title>
      <link href="/2023/04/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
      <url>/2023/04/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>【<a href="https://www.programmercarl.com/">代码随想录</a>】</p><h1>一、数组</h1><h2 id="704-二分查找">704.二分查找</h2><p><a href="https://leetcode.cn/problems/binary-search/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> center = <span class="number">0</span>;    <span class="comment">// 二分位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            center = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[center] == target) <span class="keyword">return</span> center;</span><br><span class="line">            <span class="keyword">if</span> (nums[center] &gt; target) right = center - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[center] &lt; target) left = center + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --查找失败--</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)<br>分析：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>x</mi></msup><mo>=</mo><mi>n</mi><mo>→</mo><mi>x</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>→</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2^x = n \to x = log_2n\to O(log\,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度：O(1)<br>？怎么分析的</li></ul><h2 id="27-移除元素">27.移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/">力扣题目链接</a></p><p><strong>1、暴力解法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nowLength = nums.<span class="built_in">size</span>();  <span class="comment">// 记录现在长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nowLength; i++) &#123;</span><br><span class="line">            <span class="comment">// --逐个查找--</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                <span class="comment">// --删除元素--</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; nowLength - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// --改变上界--</span></span><br><span class="line">                nowLength--;</span><br><span class="line">                <span class="comment">// --由于数组左移，所以再次查看当前位置--</span></span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --返回删除后的长度--</span></span><br><span class="line">        <span class="keyword">return</span> nowLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><p><strong>2、快慢指针</strong>：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif" alt="27.移除元素-双指针法"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();  <span class="comment">// 执行一次</span></span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// --看n次，值为val的舍弃（即需要值不为val的选出来放到新位置（slow）上）--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; len; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="977-有序数组的平方">977.有序数组的平方</h2><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">力扣题目链接</a></p><p><strong>1、平方后排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            nums[i] = nums[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --快排--</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)</p><p><strong>2、双指针</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// --长度为len，初值为0--</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = len;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">            <span class="comment">// --前进左边--</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] * nums[i] &gt; nums[j] * nums[j]) &#123;</span><br><span class="line">                ans[--cnt] = nums[i] * nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --前进右边--</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[--cnt] = nums[j] * nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li></ul><h2 id="209-长度最小的子数组">209.长度最小的子数组</h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">力扣题目链接</a></p><p><strong>快慢指针</strong>（滑动窗口）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>;     </span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;    <span class="comment">// 总和</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">for</span> (; fast &lt;= len; fast++) &#123;</span><br><span class="line">            <span class="comment">// --和小于target，加上右边--</span></span><br><span class="line">            <span class="keyword">if</span> (fast &lt; len &amp;&amp; sum &lt; target) &#123;</span><br><span class="line">                sum += nums[fast];</span><br><span class="line">                <span class="comment">// printf(&quot;[sum:%d slow:%d, fast:%d, ans=%d]\n&quot;, sum, slow, fast, ans);</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --和大于等于target，最小值更新；减去左边，slow向前移动，fast暂时不动--</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">                ans = (fast - slow) &lt; ans ? (fast - slow) : ans;</span><br><span class="line">                sum -= nums[slow++];</span><br><span class="line">                fast--;</span><br><span class="line">                <span class="comment">// printf(&quot;[sum:%d slow:%d, fast:%d, ans=%d]\n&quot;, sum, slow, fast, ans);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; <span class="number">0x7fffffff</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="59-螺旋矩阵II">59.螺旋矩阵II</h2><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣题目链接</a></p><p><strong>1、一个一个看，走满就换方向</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;RIGHT, DOWN, LEFT, UP&#125;d;</span><br><span class="line">    <span class="comment">// --是否越界--</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isOver</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> maxX, <span class="type">int</span> maxY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= maxX || y &gt;= maxY) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --转向--</span></span><br><span class="line">    <span class="function">Direction <span class="title">changeDirection</span><span class="params">(Direction d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">            <span class="keyword">case</span> RIGHT: d = DOWN; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DOWN:  d = LEFT; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LEFT:  d = UP;   <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UP:    d = RIGHT;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>)); <span class="comment">// n*n，初值为0</span></span><br><span class="line">        d = RIGHT;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * n; i++) &#123;</span><br><span class="line">            <span class="comment">// --&#123;延伸&#125;或者&#123;转向 + 暂停一次位置&#125;</span></span><br><span class="line">            <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">                <span class="keyword">case</span> RIGHT:</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isOver</span>(x, y, n, n) &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                        ans[x][y] = i;</span><br><span class="line">                        y++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        d = <span class="built_in">changeDirection</span>(d);</span><br><span class="line">                        <span class="comment">// printf(&quot;1(%d,%d,[%d])\n&quot;, x, y, d);</span></span><br><span class="line">                        i--;</span><br><span class="line">                        <span class="comment">// --放到正确的位置上--</span></span><br><span class="line">                        y--; x++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DOWN:</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isOver</span>(x, y, n, n) &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                        ans[x][y] = i;</span><br><span class="line">                        x++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        d = <span class="built_in">changeDirection</span>(d);</span><br><span class="line">                        <span class="comment">// printf(&quot;2(%d,%d,[%d])\n&quot;, x, y, d);</span></span><br><span class="line">                        i--;</span><br><span class="line">                        <span class="comment">// --放到正确的位置上--</span></span><br><span class="line">                        x--; y--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LEFT:</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isOver</span>(x, y, n, n) &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                        ans[x][y] = i;</span><br><span class="line">                        y--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        d = <span class="built_in">changeDirection</span>(d);</span><br><span class="line">                        <span class="comment">// printf(&quot;3(%d,%d,[%d])\n&quot;, x, y, d);</span></span><br><span class="line">                        i--;</span><br><span class="line">                        <span class="comment">// --放到正确的位置上--</span></span><br><span class="line">                        y++; x--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UP:</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isOver</span>(x, y, n, n) &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                        ans[x][y] = i;</span><br><span class="line">                        x--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        d = <span class="built_in">changeDirection</span>(d);</span><br><span class="line">                        <span class="comment">// printf(&quot;4(%d,%d,[%d])\n&quot;, x, y, d);</span></span><br><span class="line">                        i--;</span><br><span class="line">                        <span class="comment">// --放到正确的位置上--</span></span><br><span class="line">                        x++; y++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li></ul><p><strong>2、分圈，一圈看四条边<a href="https://www.programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html#%E6%80%9D%E8%B7%AF">【代码随想录】</a></strong></p><h1>二、链表</h1><h2 id="203-移除链表元素">203.移除链表元素</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">力扣题目链接</a></p><p><strong>增加哨兵节点</strong>（养成删除内存的习惯）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --初值为空的情况--</span></span><br><span class="line">        <span class="keyword">if</span> (!head)  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// --增加一个哨兵节点--</span></span><br><span class="line">        ListNode* head0 = <span class="keyword">new</span> ListNode;</span><br><span class="line">        head0-&gt;next = head;</span><br><span class="line">        ListNode* tmp = head0;</span><br><span class="line">        <span class="comment">// --遍历--</span></span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            <span class="comment">// --删除--</span></span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;next &amp;&amp; tmp-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                tmp-&gt;next = tmp-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">continue</span>;   <span class="comment">// 不然会跳判</span></span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head0-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li></ul><h2 id="707-设计链表">707.设计链表</h2><p><a href="https://leetcode.cn/problems/design-linked-list/">力扣题目链接</a></p><p>遇到tmp-&gt;next，还是判一下tmp吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --单链表--</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">    &#125; *head;</span><br><span class="line">    <span class="comment">// --初始化--</span></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        <span class="comment">// --哨兵节点--</span></span><br><span class="line">        head = <span class="keyword">new</span> ListNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --获取index位置的值，不存在返回-1--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        ListNode *tmp = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --加到开头--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        newNode-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --加到结尾--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode *tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp-&gt;next) tmp = tmp-&gt;next;</span><br><span class="line">        tmp-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --加到index位置前--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode *tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (index-- &amp;&amp; tmp) tmp = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span> || !tmp) <span class="keyword">return</span>;</span><br><span class="line">        newNode-&gt;next = tmp-&gt;next;</span><br><span class="line">        tmp-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --删除index节点--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        ListNode *tmp = head;</span><br><span class="line">        <span class="comment">// --目标为tmp-&gt;next</span></span><br><span class="line">        <span class="keyword">while</span> (index-- &amp;&amp; tmp) tmp = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span> || !tmp || !tmp-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        ListNode *need2Delete = tmp-&gt;next;</span><br><span class="line">        tmp-&gt;next = tmp-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> need2Delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="206-反转链表">206.反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">力扣题目链接</a></p><p><strong>1、双指针法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// --一次记录两个节点--</span></span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        ListNode *fast = head-&gt;next;</span><br><span class="line">        ListNode *tmp = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// --第一个先指向空--</span></span><br><span class="line">        slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast) &#123;</span><br><span class="line">            <span class="comment">// --改为：后一个指向前一个--</span></span><br><span class="line">            tmp = fast-&gt;next;</span><br><span class="line">            fast-&gt;next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li></ul><p>2、递归法</p><h2 id="24-两两交换链表中的节点">24.两两交换链表中的节点</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// --添加一个哨兵节点--</span></span><br><span class="line">        <span class="comment">// --一次记录三个节点--</span></span><br><span class="line">        ListNode *head0 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode *pre = head0;</span><br><span class="line">        ListNode *key1 = head, *key2 = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// --改变结构--</span></span><br><span class="line">            pre-&gt;next = key2;</span><br><span class="line">            key1-&gt;next = key2-&gt;next;</span><br><span class="line">            key2-&gt;next = key1;</span><br><span class="line">            <span class="comment">// --准备下一次操作--</span></span><br><span class="line">            pre = key1;</span><br><span class="line">            key1 = key1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (!key1) <span class="keyword">return</span> head0-&gt;next;</span><br><span class="line">            key2 = key1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (!key2) <span class="keyword">return</span> head0-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li></ul><h2 id="19-删除链表的倒数第N个节点">19.删除链表的倒数第N个节点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></p><p><strong>1、循环两次</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --计数--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --倒数化为正数--</span></span><br><span class="line">        n = <span class="built_in">count</span>(head) - n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// --只有一个的话，n也只能为1了--</span></span><br><span class="line">        <span class="keyword">if</span> (!head-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">delete</span> head;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --增加一个哨兵节点--</span></span><br><span class="line">        ListNode *head0 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode *fast = head0, *slow = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = fast-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> fast;</span><br><span class="line">        <span class="keyword">return</span> head0-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(2n)</li></ul><p><strong>2、双指针【进阶】</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --增加一个哨兵节点--</span></span><br><span class="line">        ListNode *head0 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode *fast = head0, *slow = head0;</span><br><span class="line">        <span class="comment">// --fast比slow块n个，fast都是有效节点，slow-&gt;next是最后要删除的节点--</span></span><br><span class="line">        <span class="comment">// --fast先前进n次--</span></span><br><span class="line">        <span class="keyword">while</span> (n--) fast = fast-&gt;next;</span><br><span class="line">        <span class="comment">// --fast和slow一起前进，知道fast取到最后一个有效节点--</span></span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --删除slow-&gt;next--</span></span><br><span class="line">        ListNode *need2Delete = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> need2Delete;</span><br><span class="line">        <span class="keyword">return</span> head0-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li></ul><h2 id="面试题-02-07-链表相交">面试题 02.07. 链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">力扣题目链接</a></p><p>同：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表 - 力扣（Leetcode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --计数--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --传入的值nA &gt;= nB--</span></span><br><span class="line">    <span class="function">ListNode *<span class="title">findAnsNode</span><span class="params">(<span class="type">int</span> nA, <span class="type">int</span> nB, ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --headA先前进nA - nB个--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nA - nB; i++) headA = headA-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (headA == headB) <span class="keyword">return</span> headA;</span><br><span class="line">        <span class="keyword">while</span> (nB--) &#123;</span><br><span class="line">            <span class="comment">// --走到最后都没有相等--</span></span><br><span class="line">            <span class="keyword">if</span> (!headA-&gt;next || !headB-&gt;next) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="comment">// --目标是-&gt;next--</span></span><br><span class="line">            <span class="keyword">if</span> (headA-&gt;next == headB-&gt;next) <span class="keyword">return</span> headA-&gt;next;</span><br><span class="line">            headA = headA-&gt;next;</span><br><span class="line">            headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nA = <span class="built_in">count</span>(headA), nB = <span class="built_in">count</span>(headB);</span><br><span class="line">        <span class="keyword">if</span> (nA &gt;= nB) <span class="keyword">return</span> <span class="built_in">findAnsNode</span>(nA, nB, headA, headB);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">findAnsNode</span>(nB, nA, headB, headA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(n + m)</p></li><li><p>空间复杂度：O(1)</p></li></ul><h2 id="142-环形链表II">142.环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p><p><strong>找到相遇点</strong></p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210318165123581.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            <span class="comment">// --slow移动一步， fast移动两步--</span></span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// --相遇了--</span></span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="comment">// --x：起始点到环入口的距离--</span></span><br><span class="line">                <span class="comment">// --y：环入口到相遇点的距离--</span></span><br><span class="line">                <span class="comment">// --z：相遇点到环入口的距离--</span></span><br><span class="line">                <span class="comment">// --2(x + y) = x + y + n(y + z)-- </span></span><br><span class="line">                <span class="comment">// --x = n(y + z) - y--</span></span><br><span class="line">                <span class="comment">// --slow从起点开始，fast从相遇点开始--</span></span><br><span class="line">                slow = head; </span><br><span class="line">                <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">                    slow = slow-&gt;next;</span><br><span class="line">                    fast = fast-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --出现了终点--</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>三、哈希表</h1><h2 id="242-有效的字母异位词">242.有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">charSet</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> ns = s.<span class="built_in">size</span>(), nt = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ns; i++) &#123;</span><br><span class="line">            charSet[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nt; i++) &#123;</span><br><span class="line">            charSet[t[i] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charSet[i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="349-两个数组的交集">349.两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">力扣题目链接</a></p><p>1、哈希表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">nums1_set</span><span class="params">(nums1.begin(), nums1.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> item : nums2) &#123;</span><br><span class="line">            <span class="comment">// --在nums1中，但是不重复出现--</span></span><br><span class="line">            <span class="keyword">if</span> (nums1_set.<span class="built_in">find</span>(item) != nums1_set.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">insert</span>(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、数组做哈希表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 初始化为0</span></span><br><span class="line">        <span class="type">int</span> n1 = nums1.<span class="built_in">size</span>(), n2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            record[nums1[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (record[nums2[i]]) ans.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="202-快乐数">202.快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/">力扣题目链接</a></p><p>1、快慢指针 + 递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --计算位平方和--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --递归 + 快慢指针求解--</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> fast, <span class="type">int</span> slow)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --fast计算两次，slow计算一次--</span></span><br><span class="line">        fast = <span class="built_in">getSum</span>(<span class="built_in">getSum</span>(fast));</span><br><span class="line">        slow = <span class="built_in">getSum</span>(slow);</span><br><span class="line">        <span class="comment">// --重复出现--</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">judge</span>(fast, slow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">judge</span>(n, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、哈希表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --计算位平方和--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> n, unordered_set&lt;<span class="type">int</span>&gt;&amp; cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt.<span class="built_in">find</span>(n) != cnt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        n = <span class="built_in">getSum</span>(n);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">judge</span>(n, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --哈希表（元素不重复）--</span></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">judge</span>(n, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-两数之和">1.两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; record;</span><br><span class="line">        <span class="comment">// --查找差是否在map中--</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (record.<span class="built_in">find</span>(target - nums[i]) != record.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i, record.<span class="built_in">find</span>(target - nums[i])-&gt;second&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --不在则记到map中--</span></span><br><span class="line">            record.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(nums[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="454-四数相加II">454.四数相加II</h2><p><a href="https://leetcode.cn/problems/4sum-ii/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n1 = nums1.<span class="built_in">size</span>(), n2 = nums2.<span class="built_in">size</span>(), n3 = nums3.<span class="built_in">size</span>(), n4 = nums4.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2) &#123;</span><br><span class="line">                map[i + j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l : nums4) &#123;</span><br><span class="line">                <span class="comment">// --在map中--</span></span><br><span class="line">                <span class="keyword">if</span> (map.<span class="built_in">find</span>(<span class="number">0</span> - k - l) != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    ans += map[<span class="number">0</span> - k - l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="383-赎金信">383.赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mCnt</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;  <span class="comment">// 记录杂志字母出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : magazine)</span><br><span class="line">            mCnt[i - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : ransomNote) &#123;</span><br><span class="line">            mCnt[i - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="comment">// --单词不够了--</span></span><br><span class="line">            <span class="keyword">if</span> (mCnt[i - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和">15.三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">力扣题目链接</a></p><h2 id="18-四数之和">18.四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/">力扣题目链接</a></p><h1>四、字符串</h1><h2 id="344-反转字符串">344.反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">            left++; right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="541-反转字符串II">541.反转字符串II</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --修改了344.反转字符串的代码--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">            left++; right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();   <span class="comment">// 获取长度</span></span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;      <span class="comment">// 第几2k的起止位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="comment">// --判断一下剩余字符--</span></span><br><span class="line">            <span class="type">int</span> left = n - i;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; k) &#123;</span><br><span class="line">                <span class="built_in">reverseString</span>(s, begin, n - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (left &lt; <span class="number">2</span> * k) &#123;</span><br><span class="line">                <span class="built_in">reverseString</span>(s, begin, begin + k - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --开始翻转--</span></span><br><span class="line">            <span class="built_in">reverseString</span>(s, begin, begin + k - <span class="number">1</span>);</span><br><span class="line">            begin += <span class="number">2</span> * k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指Offer-05-替换空格">剑指Offer 05.替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">力扣题目链接</a></p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.gif" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --计算空格数--</span></span><br><span class="line">        <span class="type">int</span> oldSize = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; oldSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --扩大数组，加上所有空格的大小（本来就占用一个了）--</span></span><br><span class="line">        s.<span class="built_in">resize</span>(oldSize + cnt *<span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> newSize = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// --slow遍历，fast指向下一个存放的位置--</span></span><br><span class="line">        <span class="type">int</span> slow = oldSize - <span class="number">1</span>, fast = newSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (slow &lt; fast) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[slow] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                s[fast--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s[fast--] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s[fast--] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> s[fast--] = s[slow--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="151-翻转字符串里的单词">151.翻转字符串里的单词</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --修改了344.反转字符串的代码--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">            left++; right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --处理多余空格--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">processSpaces</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;   <span class="comment">// 1；遇到过单词</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; n; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[fast] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                s[slow++] = s[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// --前面有单词，加一个空格--</span></span><br><span class="line">                <span class="keyword">if</span> (flag) s[slow++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --最后有一个空格，或者没有--</span></span><br><span class="line">        <span class="keyword">if</span> (s[slow - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) s.<span class="built_in">resize</span>(slow - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> s.<span class="built_in">resize</span>(slow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --首先将多余空格处理完--</span></span><br><span class="line">        <span class="built_in">processSpaces</span>(s);</span><br><span class="line">        <span class="comment">// --整体翻转--</span></span><br><span class="line">        <span class="built_in">reverseString</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// --每个单词进行翻转--</span></span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (end &lt; n) &#123;</span><br><span class="line">            <span class="comment">// --区间为[begin, end - 1]--</span></span><br><span class="line">            <span class="keyword">if</span> (s[end] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">reverseString</span>(s, begin, end - <span class="number">1</span>);</span><br><span class="line">                begin = end + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --最后一个单词没被翻转，加上--</span></span><br><span class="line">        <span class="built_in">reverseString</span>(s, begin, end - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指Offer58-II-左旋转字符串">剑指Offer58-II.左旋转字符串</h2><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">力扣题目链接</a></p><p>不开辟新的空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --修改了344.反转字符串的代码--</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">            left++; right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --目的：0 ~ k移动到k + 1 ~ n - 1(这里k = n, n = size)---</span></span><br><span class="line">        <span class="comment">// --先各自翻转，再整体翻转就是答案了--</span></span><br><span class="line">        <span class="built_in">reverseString</span>(s, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverseString</span>(s, n, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverseString</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="28-实现-strStr">28.实现 strStr()</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --获取模式串s的next数组--</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNext</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(n, <span class="number">0</span>)</span></span>;  <span class="comment">// 大小和初值</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="comment">// --j + 1指向前缀的末尾，i指向后缀的末尾--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// --不匹配，j回退--</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; s[j + <span class="number">1</span>] != s[i]) &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --匹配，同时前进--</span></span><br><span class="line">            <span class="keyword">if</span> (s[j + <span class="number">1</span>] == s[i]) j++;</span><br><span class="line">            <span class="comment">// --记录next数组--</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --对于本题可以不写--</span></span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; next = <span class="built_in">getNext</span>(needle);</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// --不匹配，j回退--</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; needle[j + <span class="number">1</span>] != haystack[i]) &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --匹配，前进--</span></span><br><span class="line">            <span class="keyword">if</span> (needle[j + <span class="number">1</span>] == haystack[i]) j++;</span><br><span class="line">            <span class="comment">// --完全匹配，结束--</span></span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - needle.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="459-重复的子字符串">459.重复的子字符串</h2><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --来自28. 实现 strStr()--</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNext</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(n, <span class="number">0</span>)</span></span>;  <span class="comment">// 大小和初值</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="comment">// --j + 1指向前缀的末尾，i指向后缀的末尾--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// --不匹配，j回退--</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; s[j + <span class="number">1</span>] != s[i]) &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --匹配，同时前进--</span></span><br><span class="line">            <span class="keyword">if</span> (s[j + <span class="number">1</span>] == s[i]) j++;</span><br><span class="line">            <span class="comment">// --记录next数组--</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; next = <span class="built_in">getNext</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (next[next.<span class="built_in">size</span>() - <span class="number">1</span>] != <span class="number">-1</span> </span><br><span class="line">        &amp;&amp; s.<span class="built_in">size</span>() % (next.<span class="built_in">size</span>() - next[next.<span class="built_in">size</span>() - <span class="number">1</span>] - <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>五、双指针法（同上）</h1><h2 id="27-移除元素-2">27.移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/">力扣题目链接</a></p><h2 id="344-反转字符串-2">344.反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p><h2 id="剑指Offer-05-替换空格-2">剑指Offer 05.替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">力扣题目链接</a></p><h2 id="151-翻转字符串里的单词-2">151.翻转字符串里的单词</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">力扣题目链接</a></p><h2 id="206-反转链表-2">206.反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">力扣题目链接</a></p><h2 id="24-两两交换链表中的节点-2">24. 两两交换链表中的节点</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">力扣题目链接</a></p><h2 id="19-删除链表的倒数第N个节点-2">19.删除链表的倒数第N个节点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></p><h2 id="面试题-02-07-链表相交-2">面试题 02.07. 链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">力扣题目链接</a></p><p>同：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表 - 力扣（Leetcode）</a></p><h2 id="142-环形链表II-2">142.环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p><p>15.三数之和</p><p><a href="https://leetcode.cn/problems/3sum/">力扣题目链接</a></p><p>18.四数之和</p><p><a href="https://leetcode.cn/problems/4sum/">力扣题目链接</a></p><h1>六、栈与队列</h1><h2 id="232-用栈实现队列">232.用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// -- 输入栈、输出栈 --</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackIn;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackOut;</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        stackIn.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// -- 输出栈为空，将输入栈的元素全部取出，放入输出栈 --</span></span><br><span class="line">        <span class="keyword">if</span> (stackOut.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stackIn.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                stackOut.<span class="built_in">push</span>(stackIn.<span class="built_in">top</span>());</span><br><span class="line">                stackIn.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// -- 输出栈为空，输入栈为空，报错 --</span></span><br><span class="line">        <span class="keyword">if</span> (stackOut.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;当前没有元素\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// -- 输出栈不为空，直接输出 --</span></span><br><span class="line">        <span class="type">int</span> res = stackOut.<span class="built_in">top</span>();</span><br><span class="line">        stackOut.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --使用了自身的函数，但是pop删除了元素，需要恢复--</span></span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        stackOut.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackOut.<span class="built_in">empty</span>() &amp;&amp; stackIn.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈">225.用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">力扣题目链接</a></p><p><strong>1、两个队列</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --q1作为输入输出栈，q2作为辅助备份栈--</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q2;</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --q1为空，q2为空，报错--</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;当前没有元素\n&quot;</span>);</span><br><span class="line">        <span class="comment">// --q1所有元素放到q2，除了最后一个元素--</span></span><br><span class="line">        <span class="type">int</span> size = q1.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">            q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --最后一个元素就是栈顶--</span></span><br><span class="line">        <span class="type">int</span> res = q1.<span class="built_in">front</span>();</span><br><span class="line">        q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// --q1为空，q2不为空，q2变换为q1，q1变换为q2--</span></span><br><span class="line">        <span class="keyword">if</span> (q1.<span class="built_in">empty</span>()) <span class="built_in">swap</span>(q1, q2);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// --使用了自身的函数，但是pop删除了元素，需要恢复--</span></span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        q1.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q1.<span class="built_in">empty</span>() &amp;&amp; q2.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>2、一个队列（优化）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --把前n个重新入队，则最后一个变为第一个，删除即可--</span></span><br><span class="line">        <span class="type">int</span> res = q.<span class="built_in">back</span>();</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --调用自己的pop，将弹出的添加回去--</span></span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        q.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="20-有效的括号">20.有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            <span class="comment">// --放入对应的括号，匹配问题变成了相等问题--</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// --1、栈为空--</span></span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// --2、匹配上--</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">top</span>() == s[i]) st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// --3、不匹配--</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --4、执行完了，栈不为空--</span></span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项">1047.删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;   <span class="comment">// 指向栈顶的下一个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// --1、栈为空--</span></span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="number">0</span>) &#123;</span><br><span class="line">                s[slow++] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --2、不相同--</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[slow - <span class="number">1</span>] != s[i]) &#123;</span><br><span class="line">                s[slow++] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --3、相同--</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值">150.逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --转为整数--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">str2int</span><span class="params">(<span class="type">const</span> string str)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">// 1:负数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + i - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag ? <span class="number">0</span> - res : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --数字栈, 力扣修改了后台测试数据，需要用longlong--</span></span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (string i : tokens) &#123;</span><br><span class="line">            <span class="comment">// --是数字, 考虑负数--</span></span><br><span class="line">            <span class="keyword">if</span> (i[<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; i[<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span> || i[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; i.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">str2int</span>(i));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d压入栈\n&quot;</span>, <span class="built_in">str2int</span>(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// --是符号--</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// --弹出两个操作数，计算--</span></span><br><span class="line">                <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> key2 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> key1 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (i[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                    tmp = key1 + key2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    tmp = key1 - key2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    tmp = key1 * key2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    tmp = key1 / key2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// --压入计算结果--</span></span><br><span class="line">                st.<span class="built_in">push</span>(tmp);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %c %d = %d\n&quot;</span>, key1, i[<span class="number">0</span>], key2, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>七、二叉树</h1><h2 id="递归遍历-迭代遍历">递归遍历/迭代遍历</h2><h3 id="144-二叉树的前序遍历">144.二叉树的前序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">力扣题目链接</a></p><p><strong>1、递归遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *node, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;left, ans);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;right, ans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">traverse</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、迭代遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="145-二叉树的后序遍历">145.二叉树的后序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">力扣题目链接</a></p><p><strong>1、递归遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *node, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;left, ans);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;right, ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">traverse</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、迭代遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="comment">// --修改前序，将顺序变为中右左，最后再翻转就是答案--</span></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">            st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="94-二叉树的中序遍历">94.二叉树的中序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">力扣题目链接</a></p><p><strong>1、递归遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *node, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;left, ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;right, ans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">traverse</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、迭代遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">while</span> (root || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(root);</span><br><span class="line">                <span class="comment">// printf(&quot;%d进栈\n&quot;, root-&gt;val);</span></span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                root = st.<span class="built_in">top</span>();</span><br><span class="line">                ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// printf(&quot;%d出栈\n&quot;, root-&gt;val);</span></span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="589-N-叉树的前序遍历">589.N 叉树的前序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);   <span class="comment">// 前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; root-&gt;children.<span class="built_in">size</span>(); i++) </span><br><span class="line">            <span class="built_in">preorder</span>(root-&gt;children[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="590-N-叉树的后序遍历">590.N 叉树的后序遍历</h3><p><a href="https://leetcode.cn/problems/n-ary-tree-postorder-traversal/submissions/425568531/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; root-&gt;children.<span class="built_in">size</span>(); i++) </span><br><span class="line">            <span class="built_in">preorder</span>(root-&gt;children[i]);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);   <span class="comment">// 后</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="层序遍历">层序遍历</h2><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E6%88%91%E8%A6%81%E6%89%93%E5%8D%81%E4%B8%AA.gif" alt=""></p><h3 id="102-二叉树的层序遍历">102.二叉树的层序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; curAns;     <span class="comment">// 记录当前层答案</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                TreeNode *tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                curAns.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;left) que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;right) que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(curAns);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="107-二叉树的层序遍历-II">107.二叉树的层序遍历 II</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/submissions/425573189/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; curAns;     <span class="comment">// 记录当前层答案</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                TreeNode *tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                curAns.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;left) que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;right) que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(curAns);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());    <span class="comment">// 翻转就行了</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="199-二叉树的右视图">199. 二叉树的右视图</h3><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/submissions/425644101/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = que.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// --把每一层的最后一个记录下来后弹出，其他弹出即可--</span></span><br><span class="line">            <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>()-&gt;val);</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="637-二叉树的层平均值">637.二叉树的层平均值</h3><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">double</span> curSum = <span class="number">0</span>; <span class="comment">// 当前层数的和</span></span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                curSum += que.<span class="built_in">front</span>()-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(curSum / size);   <span class="comment">// 写入平均值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="429-N叉树的层序遍历">429.N叉树的层序遍历</h3><p><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;Node *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; curAns;     <span class="comment">// 记录当前层答案</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                Node *tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                curAns.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// --压入孩子节点--</span></span><br><span class="line">                <span class="keyword">for</span> (Node* j : tmp-&gt;children) </span><br><span class="line">                    <span class="keyword">if</span> (j) que.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(curAns);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="515-在每个树行中找最大值">515.在每个树行中找最大值</h3><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curMax = INT_MIN; <span class="comment">// 当前层的最大值</span></span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                curMax = curMax &lt; que.<span class="built_in">front</span>()-&gt;val ? que.<span class="built_in">front</span>()-&gt;val : curMax;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(curMax);   <span class="comment">// 写入答案</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="116-填充每个节点的下一个右侧节点指针">116.填充每个节点的下一个右侧节点指针</h3><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;Node *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                Node *tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// --如果是最后一个--</span></span><br><span class="line">                <span class="keyword">if</span> (i == curSize - <span class="number">1</span>) tmp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">else</span> tmp-&gt;next = que.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;left) que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;right) que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="117-填充每个节点的下一个右侧节点指针II">117.填充每个节点的下一个右侧节点指针II</h3><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;Node *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                Node *tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// --如果是最后一个--</span></span><br><span class="line">                <span class="keyword">if</span> (i == curSize - <span class="number">1</span>) tmp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">else</span> tmp-&gt;next = que.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;left) que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;right) que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="104-二叉树的最大深度">104.二叉树的最大深度</h3><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度">111.二叉树的最小深度</h3><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                <span class="comment">// --是否是叶子节点，是的话后面都没必要执行了--</span></span><br><span class="line">                <span class="keyword">if</span> (!que.<span class="built_in">front</span>()-&gt;left &amp;&amp; !que.<span class="built_in">front</span>()-&gt;right) <span class="keyword">return</span> ans;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="226-翻转二叉树">226.翻转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/">力扣题目链接</a></p><p><strong>1、递归法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、迭代法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="built_in">swap</span>(tmp-&gt;left, tmp-&gt;right);</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;right) st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;left) st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="100-相同的树">100.相同的树</h2><p><a href="https://leetcode.cn/problems/same-tree/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --1. 子树都为空--</span></span><br><span class="line">        <span class="keyword">if</span> (!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// --2. 子树有一个不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (p &amp;&amp; !q || !p &amp;&amp; q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// --3. 子树都不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;val == q-&gt;val      <span class="comment">// 自己是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left)  <span class="comment">// p左子树和q左子树是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right, q-&gt;right))  <span class="comment">// p右子树和q右子树是否相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="101-对称二叉树">101.对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">preOrdertraverse</span><span class="params">(TreeNode *t1, TreeNode *t2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --1. 子树都为空--</span></span><br><span class="line">        <span class="keyword">if</span> (!t1 &amp;&amp; !t2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// --2. 子树有一个不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (t1 &amp;&amp; !t2 || !t1 &amp;&amp; t2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// --3. 子树都不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (t1-&gt;val == t2-&gt;val      <span class="comment">// 自己是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">preOrdertraverse</span>(t1-&gt;left, t2-&gt;right)  <span class="comment">// t1左子树和t2右子树是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">preOrdertraverse</span>(t1-&gt;right, t2-&gt;left))  <span class="comment">// t1右子树和t2左子树是否相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">preOrdertraverse</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="572-另一棵树的子树">572.另一棵树的子树</h2><p><a href="https://leetcode.cn/problems/subtree-of-another-tree/description/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --来自 100.相同的树 --</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --1. 子树都为空--</span></span><br><span class="line">        <span class="keyword">if</span> (!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// --2. 子树有一个不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (p &amp;&amp; !q || !p &amp;&amp; q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// --3. 子树都不为空--</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;val == q-&gt;val      <span class="comment">// 自己是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left)  <span class="comment">// p左子树和q左子树是否相等</span></span><br><span class="line">            &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right, q-&gt;right))  <span class="comment">// p右子树和q右子树是否相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSameTree</span>(root, subRoot) </span><br><span class="line">            || <span class="built_in">isSubtree</span>(root-&gt;left, subRoot) </span><br><span class="line">            || <span class="built_in">isSubtree</span>(root-&gt;right, subRoot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="559-n叉树的最大深度">559.n叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;Node *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="type">int</span> curSize = que.<span class="built_in">size</span>();  <span class="comment">// 当前层有多少个</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node* j : que.<span class="built_in">front</span>()-&gt;children)</span><br><span class="line">                    <span class="keyword">if</span> (j) que.<span class="built_in">push</span>(j);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="222-完全二叉树的节点个数">222.完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">力扣题目链接</a></p><p><strong>1、当做普通二叉树遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            TreeNode *tmp = st.<span class="built_in">top</span>();   <span class="comment">// 中</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;right) st.<span class="built_in">push</span>(tmp-&gt;right);    <span class="comment">// 右</span></span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;left) st.<span class="built_in">push</span>(tmp-&gt;left);      <span class="comment">// 左</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><p><strong>2、完全二叉树</strong></p><p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。<br>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。<br>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        TreeNode *left = root-&gt;left;</span><br><span class="line">        TreeNode *right = root-&gt;right;</span><br><span class="line">        <span class="type">int</span> lenLeft = <span class="number">0</span>, lenRight = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// --统计左边深度--</span></span><br><span class="line">        <span class="keyword">while</span> (left) &#123;</span><br><span class="line">            lenLeft++;</span><br><span class="line">            left = left-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --统计右边深度--</span></span><br><span class="line">        <span class="keyword">while</span> (left) &#123;</span><br><span class="line">            lenRight++;</span><br><span class="line">            right = right-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --左边深度 等于 右边深度，说明这里完全二叉树是满二叉树--</span></span><br><span class="line">        <span class="keyword">if</span> (lenLeft == lenRight) <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; lenLeft) - <span class="number">1</span>;   <span class="comment">// 右移相当于*2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n × log n)</li><li>空间复杂度：O(log n)</li></ul><h2 id="110-平衡二叉树">110.平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --返回深度--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">postOrderTravese</span><span class="params">(TreeNode *t, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> depth - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> lenLeft = <span class="built_in">postOrderTravese</span>(t-&gt;left, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> lenRight = <span class="built_in">postOrderTravese</span>(t-&gt;right, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lenLeft - lenRight) &gt; <span class="number">1</span> ? <span class="number">-1</span> : <span class="built_in">max</span>(lenLeft, lenRight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">postOrderTravese</span>(root, <span class="number">1</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="257-二叉树的所有路径">257.二叉树的所有路径</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postOrderTraverse</span><span class="params">(TreeNode *t, string s, vector&lt;string&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --是叶子节点--</span></span><br><span class="line">        <span class="keyword">if</span> (!t-&gt;left &amp;&amp; !t-&gt;right) ans.<span class="built_in">push_back</span>(s);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// --左子树不为空--</span></span><br><span class="line">            <span class="keyword">if</span> (t-&gt;left) <span class="built_in">postOrderTraverse</span>(t-&gt;left, s + <span class="string">&quot;-&gt;&quot;</span> + <span class="built_in">to_string</span>(t-&gt;left-&gt;val), ans);</span><br><span class="line">            <span class="comment">// --右子树不为空--</span></span><br><span class="line">            <span class="keyword">if</span> (t-&gt;right) <span class="built_in">postOrderTraverse</span>(t-&gt;right, s + <span class="string">&quot;-&gt;&quot;</span> + <span class="built_in">to_string</span>(t-&gt;right-&gt;val), ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">postOrderTraverse</span>(root, <span class="built_in">to_string</span>(root-&gt;val), ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="404-左叶子之和">404.左叶子之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) &#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                    <span class="comment">// --是左子树，判断是否是叶子结点--</span></span><br><span class="line">                    <span class="keyword">if</span> (!que.<span class="built_in">front</span>()-&gt;left-&gt;left &amp;&amp; !que.<span class="built_in">front</span>()-&gt;left-&gt;right)</span><br><span class="line">                        ans += que.<span class="built_in">front</span>()-&gt;left-&gt;val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="513-找树左下角的值">513.找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode *&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">// --更新为这一层的第一个即可--</span></span><br><span class="line">            ans = que.<span class="built_in">front</span>()-&gt;val;</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;left) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (que.<span class="built_in">front</span>()-&gt;right) que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="112-路径总和">112.路径总和</h2><p><a href="https://leetcode.cn/problems/path-sum/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(TreeNode *t, <span class="type">int</span> targetSum, <span class="type">int</span> curSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        curSum += t-&gt;val;</span><br><span class="line">        <span class="comment">// --是叶子节点并且，curSum 为目标值</span></span><br><span class="line">        <span class="keyword">if</span> (curSum == targetSum &amp;&amp; !t-&gt;left &amp;&amp; !t-&gt;right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(t-&gt;left, targetSum, curSum) </span><br><span class="line">            || <span class="built_in">traverse</span>(t-&gt;right, targetSum, curSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(root, targetSum, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树">106.从中序与后序遍历序列构造二叉树</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --返回key的索引--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRoot</span> <span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> key, <span class="type">int</span> inbegin, <span class="type">int</span> inend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = inbegin; i &lt;= inend; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == key) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">preOrder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> inbegin, <span class="type">int</span> inend, </span></span></span><br><span class="line"><span class="params"><span class="function">                vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> postbegin, <span class="type">int</span> postend)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printf(&quot;[%d, %d], [%d, %d]\n&quot;, inbegin, inend, postbegin, postend);</span></span><br><span class="line">        <span class="comment">// --没有节点了--</span></span><br><span class="line">        <span class="keyword">if</span> (inbegin &gt; inend) <span class="keyword">return</span> <span class="literal">nullptr</span>; </span><br><span class="line">        <span class="comment">// --在中根序中找到根节点--</span></span><br><span class="line">        <span class="type">int</span> inRoot = <span class="built_in">findRoot</span>(inorder, postorder[postend], inbegin, inend);</span><br><span class="line">        <span class="comment">// --构造节点，改变区间接着递归--</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(postorder[postend], <span class="comment">// 根</span></span><br><span class="line">        <span class="built_in">preOrder</span>(inorder, inbegin, inRoot - <span class="number">1</span>, postorder, postbegin, postbegin + (inRoot - <span class="number">1</span> - inbegin)),    <span class="comment">// 左子树</span></span><br><span class="line">        <span class="built_in">preOrder</span>(inorder, inRoot + <span class="number">1</span>, inend, postorder, postend - <span class="number">1</span> - (inend - inRoot - <span class="number">1</span>) ,postend - <span class="number">1</span>));   <span class="comment">// 右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">preOrder</span>(inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>() - <span class="number">1</span>, postorder, <span class="number">0</span>, postorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="654-最大二叉树">654.最大二叉树</h2><p><a href="https://leetcode.cn/problems/maximum-binary-tree/">力扣题目地址</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// --返回最大值的索引--</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRoot</span> <span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxVal = INT_MIN, index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; i++) </span><br><span class="line">            <span class="keyword">if</span> (maxVal &lt; nums[i]) &#123;</span><br><span class="line">                maxVal = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt; end) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> indexRoot = <span class="built_in">findRoot</span>(nums, begin, end);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[indexRoot],    <span class="comment">// 根</span></span><br><span class="line">        <span class="built_in">construct</span>(nums, begin, indexRoot - <span class="number">1</span>),  <span class="comment">// 左子树</span></span><br><span class="line">        <span class="built_in">construct</span>(nums, indexRoot + <span class="number">1</span>, end));   <span class="comment">// 右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">construct</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="617-合并二叉树">617.合并二叉树</h2><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --1、两个都为空--</span></span><br><span class="line">        <span class="keyword">if</span> (!root1 &amp;&amp; !root2) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// --2、有一个为空--</span></span><br><span class="line">        <span class="keyword">if</span> (!root1 &amp;&amp; root2) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span> (root1 &amp;&amp; !root2) <span class="keyword">return</span> root1;</span><br><span class="line">        <span class="comment">// --3、都不为空--</span></span><br><span class="line">        root1-&gt;val += root2-&gt;val;</span><br><span class="line">        root1-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left, root2-&gt;left);</span><br><span class="line">        root1-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right, root2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="700-二叉搜索树中的搜索">700.二叉搜索树中的搜索</h2><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">力扣题目地址</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// --本节点是--</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        TreeNode *left = <span class="built_in">searchBST</span>(root-&gt;left, val);</span><br><span class="line">        <span class="keyword">if</span> (left) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树">98.验证二叉搜索树</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* t, vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(t-&gt;left, res);</span><br><span class="line">        res.<span class="built_in">push_back</span>(t-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(t-&gt;right, res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --将中根序放入数组中，检查是否有序即可--</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">inorder</span>(root, res);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; res.<span class="built_in">size</span>(); i++) </span><br><span class="line">            <span class="keyword">if</span> (res[i - <span class="number">1</span>] &gt;= res[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="530-二叉搜索树的最小绝对差">530.二叉搜索树的最小绝对差</h2><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* t, vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(t-&gt;left, res);</span><br><span class="line">        res.<span class="built_in">push_back</span>(t-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(t-&gt;right, res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// --将中根序放入数组中，计算最小差值即可--</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">inorder</span>(root, res);</span><br><span class="line">        <span class="type">int</span> minDiff = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = res[i] - res[i - <span class="number">1</span>];</span><br><span class="line">            minDiff = minDiff &gt; tmp ? tmp : minDiff;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDiff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="501-二叉搜索树中的众数">501.二叉搜索树中的众数</h2><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; majority; <span class="comment">// 记录当前找到的众数</span></span><br><span class="line">    <span class="type">int</span> curMSize = <span class="number">0</span>;     <span class="comment">// 记录当前找到的众数,它有多少个</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;          <span class="comment">// 记录当前重复元素</span></span><br><span class="line">    <span class="type">int</span> pre = INT_MIN;    <span class="comment">// 上一个元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inOrderTraverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inOrderTraverse</span>(root-&gt;left);</span><br><span class="line">        <span class="comment">// --与上一个元素相同，意味着重复了--</span></span><br><span class="line">        <span class="keyword">if</span> (pre == root-&gt;val) cnt++;</span><br><span class="line">        <span class="keyword">else</span> cnt = <span class="number">1</span>;</span><br><span class="line">        pre = root-&gt;val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, curMSize, cnt);</span><br><span class="line">        <span class="keyword">if</span> (curMSize == cnt) majority.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (curMSize &lt; cnt) &#123;</span><br><span class="line">            <span class="comment">// --将所有元素清空，将这个众数放入--</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(majority);</span><br><span class="line">            majority.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            curMSize = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">inOrderTraverse</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">inOrderTraverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> majority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="236-二叉树的最近公共祖先">236. 二叉树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == p || root == q || root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode *left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode *right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; !right) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">if</span> (!left &amp;&amp; right) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; right) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="701-二叉搜索树中的插入操作">701.二叉搜索树中的插入操作</h2><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">力扣题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="comment">// --看左子树--</span></span><br><span class="line">        <span class="keyword">if</span> (val &lt; root-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!root-&gt;left)</span><br><span class="line">                root-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">insertIntoBST</span>(root-&gt;left, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// --看右子树--</span></span><br><span class="line">        <span class="keyword">if</span> (val &gt; root-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!root-&gt;right) </span><br><span class="line">                root-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">insertIntoBST</span>(root-&gt;right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统原理</title>
      <link href="/2023/03/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>/2023/03/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="题型">题型</h2><h3 id="ER图">ER图</h3><p><strong>画图</strong></p><p>多值属性加上<code>&#123;属性&#125;</code><br>派生属性不存储，只是计算时需要求出来，表示为<code>属性()</code><br>复合属性加一个缩进</p><p>冗余：<br>两个实体集建立关系集时，冗余属性要删除</p><p>映射关系：<br>说明了具体几个到几个，例如：2…*, 0…*<br>就用<code>l..h</code>表示，这种方式都只需要一条直线，然后标记在直线上<br>否则就用单线，双线，箭头表示。<br>非二元关系，只允许一个箭头<br>双线表示全部参与</p><p><strong>转换为关系模式</strong></p><p>强实体集：<br>属性直接写下来，主码加下划线，复合属性拆开写，多值属性单独成表再取来原表的主码（特殊情况：如果原表只剩下一个主码，则删除原表），派生属性直接不写</p><p>弱实体集：<br>同上，在加上强实体集的主码作为外键，和自己的分辨符作为主码</p><p>联系集：<br>1-1：先取两个关系的主码，再加上联系集的关系，合成关系，再并入任意一端<br>1-n：先取两个关系的主码，再加上联系集的关系，合成关系，再并入n端<br>m-n：先取两个关系的主码，再加上联系集的关系，合成关系，单独成表</p><h3 id="范式">范式</h3><p>是否是BCNF、3NF？<br>了解：1NF：属性都不可分；2NF不存在部分依赖；3NF没有传递依赖；BCNF不存在主属性和候选码的依赖关系<br>计算：<br>BCNF：平凡依赖？超码？<br>3NF：平凡依赖？超码？依赖右部属性是否都出现在任意候选键中</p><p>范式的分解？<br>分解成3NF：1、正则覆盖，2、先求出所有候选键，3、每个函数依赖单独成表（n个关系），完全冗余的关系删除（完全包含在另一个关系中），4、再看这n个关系中是否包含由原表的一个候选键，若有则算法结束（n），没有则任意补充一个候选键作为一个关系（n+1）<br>分解成BCNF：<a href="https://www.bilibili.com/video/BV1eE411a79r?t=3.3">【视频】</a></p><p>正则覆盖？<br>1、使用合并规则，左边相同的合并<br>2、左边右边都是去掉一部分再计算闭包，没变化就是无关属性，去掉无关属性；先解决左边的，再解决右边的<br>3、重复执行，直到不再变化</p><h3 id="SQL或关系代数的增删改查">SQL或关系代数的增删改查</h3><h3 id="串行化调度">串行化调度</h3><p>都是画图，看有没有回路，没有回路再串行化</p><p>冲突可串行化：<br>写写，读写，写读次序不可变</p><p>视图可串行化<br>最开始读的要最开始读<br>最后写的要最后写<br>写读不行变，读写可以</p><h3 id="简答题">简答题</h3><p><strong>1、简述varchar与char的区别</strong><br>char是一种固定长度的类型，varchar则是一种可变长度的类型。</p><p><strong>2、什么是数据库索引？</strong><br>索引是一种数据结构。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。</p><p><strong>3、数据库索引一般采用什么结构？</strong><br>索引的实现通常使用B树及其变种B+树。</p><p><strong>4、事物的四种特性指的是什么？</strong><br>原子性，一致性，隔离性，持久性。</p><p><strong>5、在大学数据中，用SQL语句查询名字’g’的学生的学号、姓名</strong><br>Select ID, name from student where name like ‘%g%’;</p><p><strong>6、简述函数与触发器之间的异同</strong><br>函数和触发器都是存储在数据库当中的一段代码。差别是函数需要显式调用，有返回值，触发器需要有触发事件，系统自动调用，无返回值。</p><p><strong>7、distinct的作用是什么？</strong><br>删除查询结果中的重复记录。</p><p><strong>8、若关系R所有的属性都是不可分的数据项，则该关系最低满足第几范式</strong><br>第一范式</p><p><strong>9、简述用户自定义类型与域之间的差别</strong><br>类型是强类型检查，无法定义约束；域是弱类型检查，可以定义约束；</p><p><strong>10、AB-&gt;C能蕴含A-&gt;C，B-&gt;C吗？</strong><br>不能</p><p><strong>11、说明事物的ACID特征</strong><br>原子性：要么全成功，要么全失败，数据库中不能出现事务部分执行后产生的结果<br>持久性：一旦通知用户事务执行完毕，结果必须永久保存在数据库中，即使出现软件或硬件故障<br>一致性：比如：交易执行时，A和B的总和不变。事务执行过程中可能出现临时的不一致性，但是一旦事务执行成功后，数据库必须是满足一致性的<br>隔离性：虽然多个事务可以并发执行，但每个事务必须不知道其他并发执行的事务。中间事务结果必须对其他并发执行的事务隐藏</p><p><strong>12、说明视图和关系表的区别和联系</strong><br>视图是从一个或几个基本表导出的，视图本身不独立存储在数据库中，是一个虚表。即数据库只存放视图的定义而不存放视图对应的数据，这些数据仍存放在基本表中。视图在概念上与基本表等同，用户可以如同基本表那样使用视图，可以再视图的基础上再定义视图。<br>引进视图的优点：（1）视图能够简化用户的操作（2）视图能够使用户多角度的看待同一数据（3）视图对重构数据库提供一定程度的逻辑独立性（4）视图能够对机密数据提供安全和保护</p><p><strong>13、系统开发人员通过层次抽象来对用户进行屏蔽复杂性，请根据层次由低到高列出各个层次，并说明DBA(数据管理员)主要使用哪个抽象层次</strong><br>物理层、逻辑层、视图层。逻辑层</p><p><strong>14、解释一下物理数据独立性，说明数据库语言的分类以及基本用途，并说明哪种类型的语言放在数据字典中。</strong><br>物理数据独立性：应用程序如果不依赖于物理模式，它们就被称为是具有物理数据独立性，因此即使数据模式改变了，它们也无需重写。数据库语言的分类及其用途：数据库定义语言（DDL），用于定义数据库模式；数据库操纵语言（DML），用于表达数据库的查询和更新。DDL的输出放在数据字典中。</p><p><strong>15、简述空值（null）的含义</strong><br>空值表示这个值不存在或者未知，未知值可能是缺失了或者不知道。</p><p><strong>16、为什么要在数据库中引入事务的概念？</strong><br>要在数据库并发控制下保持数据库的一致性。</p><p><strong>17、为什么要数据库的调度进行可串行化判别，其实际意义是什么？</strong><br>通过保证所执行的调度的效果与没有并发执行的调度效果一样，可以确保数据库的一致性。</p><p><strong>18、若对数据库进行BCNF范式的分解，从而导致没有保持依赖，在数据库中要如何解决</strong><br>改为第三范式分解</p><p><strong>19、数据库中，实体的完整性是如何被保证的</strong><br>not null, unique, check, primary, 参照完整性(foreign key)。</p><p><strong>20、如何降低数据库中的数据的冗余度</strong><br>设计选择：更小的模式；<br>选择合适的范式</p><p><strong>21、如何标识一个弱实体集</strong><br>没有足够的属性以形成主码的实体集称作弱实体集，在E-R图中弱实体集的分辨符以虚下划线标明</p><p><strong>22、在SQL语句中，如何表示除法运算</strong><br>利用Where子句，A/B，表示为 not exists(B  except A)</p><p><strong>23、在关系代数中，与等值连接相比，自然连接的缺点是什么？</strong><br>自然连接是在笛卡尔积的基础上保留相同属性下取值相同的元组，而等值连接可以在笛卡尔积的基础上自由选择比较的属性。</p><p><strong>24、如果关系r®和s(S)中不含有任何相同属性，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∩</mo><mi>S</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">R\cap S=\empty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span>,那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi mathvariant="normal">∞</mi><mi>s</mi><mo>=</mo><mi>r</mi><mo>×</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">r ∞ s = r × s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">∞</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>.</strong><br>由于r和s的自然连接是在迪卡尔积的基础上进行相同属性的取值相同进行筛选元组，所以没有相同的属性就不用删除元组了，所以最终结果和笛卡尔积结果一样。</p><p><strong>25、某人在使用移动支付系统时，输入了正确的支付密码并提交后，发现了断网情况，导致支付失败，分析该事务经历了那几个状态？</strong><br>活动状态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 部分提交状态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 失败状态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 中止</p><p><strong>26、某学校教务管理系统为每个学院提供了固定的上课教室，系统规定不同学院的教务负责人员登录本系统后，只能有权支配各自学院的教师资源，请问需要定义哪种数据库对象实现此需求？为什么？</strong><br>学校教务管理系统首先创建每个学院单独的视图，然后将对应学院的视图的权限赋给对应的教务负责人。</p><p><strong>27、某学院教务管理系统有学生表”（学号，姓名，出生日期，学员编号）“和选课信息表（学号，课程编号，成绩）”。现有如下规定：如果某学生退学的话，则自动删除该生的所有选课记录，该如何定义此业务逻辑？</strong><br>利用触发器，触发事件是delete from 学生 where 学号=“***”；然后就删除选课信息表中学号是退学学生的学号的元组。</p><p><strong>28、数据库管理系统中DDL所能完成的操作包括哪些？</strong><br>create drop alter</p><p><strong>29、关系数据库设计中，至少应满足的规范化条件是什么？</strong><br>1NF</p><p><strong>30、判断分解后的关系模式是否合理的两个重要标志</strong><br>无损分解和保持依赖</p><p><strong>31、基于多表的视图，可以完成哪些操作，不能完成哪些操作？</strong><br>可以查询，不能更新。</p><p><strong>32、实体之间的联系有哪几种？</strong><br>一对一 多对多 一对多 多对一</p><p><strong>33、简述等值连接和自然连接的异同。</strong><br>等值连接是通过on把两个选中该属性值相等的元组合并。<br>自然连接也是合并，但是是只能遇到同名属性列进行连接，它们两个都是在笛卡尔乘积的情况下进行筛选。</p><p><strong>34、简述where子句和having子句的区别。</strong><br>都是用于进行筛选，where对一般属性，用在group by前；having 对聚集属性列进行判断，用在group by后。</p><p><strong>35、简述数据库中为何要进行并发控制？</strong><br>当多个事务在数据库中并发地执行时，数据的一致性可能不再维持，系统有必要控制各事务之间的相互作用。<br>并发控制机制存在的目的是为了获得高度的并发性，同时保证所产生的调度是冲突可串行化的或视图可串行化可恢复的，并且无级联的。</p><p><strong>36、吉林大学的BBS系统，用户可以以游客的身份游览其他人的留言贴，但是如果想要发言或者回复留言，则必须先登陆方可留言，为什么？在数据库端如何实现？</strong><br>进行了身份的验证，只有成为正式用户，才会被赋予留言的权限。在数据库端对用户赋予权限grant insert update delete on jluBBS to user</p><p><strong>37、支付宝账号通常与某一银行卡绑定，该卡不可透支，若目前卡内余额100元，假设一人在网上使用该支付宝账号付款100元的同时，另外一人使用绑定银行卡刷卡消费100元，能否支付成功？若不可以，在数据库端如何控制？</strong><br>不可以。使用串行化控制</p><p><strong>38、学校所有学生的数据都存在于同一个表中，但各个学院的教务管理人员登陆后只能看到自己学院的学生，请问，在数据库端是如何实现的。</strong><br>基于这张表创建各个学院的视图，然后对不同学院的用户分配相应权限。</p><p><strong>39、在学生表中，将学号 (ID)和姓名 (name)的组合设计为该表的主键是否合理?为什么?</strong><br>不合理。因为这种情况下，允许有多个姓名不同的学生对应相同学号的情况。</p><p><strong>40、如果张三想通过汇款的方式转给李四 200 元。张三的账户已经减掉 200美元后系统发生故障，并没有在李四账户中增加 200 美元，请问数据库出现了什么样的状态?这个问题该怎么解决?数据库通过什么手段实现该操作?</strong><br>数据库处于不一致的状态。应该进行事务回滚，即将张三账户中减掉的200元再加回来。利用日志实现。</p><p><strong>41、请用阿姆斯特朗三定律 (分解律、增强律和传递律) 证明合并律。每步骤的依据。</strong><br>分解率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi><mo separator="true">,</mo><mi>α</mi><mo>→</mo><mi>γ</mi><mo>⇒</mo><mi>α</mi><mo>→</mo><mi>β</mi><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha\to\beta,\alpha\to\gamma\Rightarrow\alpha\to\beta\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span><br>证明：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi>γ</mi><mo>→</mo><mi>β</mi><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha\gamma\to\beta\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi>α</mi><mo>→</mo><mi>α</mi><mi>γ</mi><mo separator="true">,</mo><mtext>即</mtext><mi>α</mi><mo>→</mo><mi>α</mi><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha\alpha\to\alpha\gamma, 即\alpha\to\alpha\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">αα</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">即</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span><br>所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha\to\beta\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span></p><p><strong>42、数据库中常用的完整性约束包括哪些？</strong><br>not null unique check primary key foreign key</p><p><strong>43、简述数据库系统与文件系统的主要区别。</strong><br>  这两个系统都包含了数据集合和一组程序。数据库协调数据的物理和逻辑访问，当文件系统只能协调物理访问。<br>  数据库系统通过确保所有程序都可以使用一块物理数据来减少数据重复的数量。而在文件系统中的一个程序的数据在写的时候可能无法被另一个程序所读取。<br>  数据库系统被设计允许对数据进行灵活的访问（即查询），当文件系统的设计目的是为了允许预先确定的访问（即编译程序）。<br>  数据库管理系统被设计用来协调多用户管理相同的数据，文件处理系统通常被设计成允许一个或多个程序同时访问相同的数据。文件处理系统通常被设计成一个或多个程序同时访问不同的数据文件。在文件系统中，只有当两个程序对文件操作权限都是只读的时候才可以同时访问。</p><p><strong>44、一般情况下，关系R与关系S要进行自然连接，需要满足什么条件？</strong><br>至少有一个同名属性列。</p><p><strong>45、已知视图 faculty的定义：create view faculty as select id, name,dept name from instructor;当发布 insert into faculty values(130765’,‘Green,(Music’))命令时，数据库系统如何执行？</strong><br>这个插入必须被表示为对instructor的插入，这样必须给出salary的值，为此数据库有两种执行方案<br>1.拒绝插入，并向用户返回一个错误信息。<br>2.向instructor关系插入元组（‘130765’,‘Green,(Music’),null）</p><p><strong>46、用基本关系代数表达式来表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∩</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R\cap S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></strong><br>R∩S=R−(R−S)</p><p><strong>47、关系数据库中，超码、候选码、主码有什么区别？</strong><br>超码就一个或多个属性的集合，这些属性的组合可以在一个关系中唯一地标识一个元组。如果一个超码的任意真子集都不能称为一个超码，那它就是一个候选码，候选码是最小的超码。数据库设计者从候选码中任意选取一个码，叫做主码。</p><p><strong>48、关系代数中，选择操作的功能是什么？</strong><br>选择运算选出满足给定谓词的元组。</p><p><strong>49、数据库中，调度指的是什么？</strong><br>调度指的是指令在系统中执行的时间顺序，一组事务的一个调度一定包含了这组事务的所有指令，而且必须保持指令在各个事务中出现的时间顺序。</p><p><strong>50、事务由哪几个状态组成？判断当手机支付已提交，但由于网络信号消失而导致支付失败，此时，事务处于何种状态？</strong><br>由活动的、部分提交的、失败的、中止的、提交的<br>事务处于失败状态。</p><p><strong>51、在MySQL中定义foreign key时，与标准SQL有何区别？</strong><br>主外键约束在标准SQL下体现的是一种一对多的关系，但是经过MySQL的拓展之后可以表现出“多对多”的关系。</p><p><strong>52、MySQL 中不支持 INTERSECT语句，可以用哪些语句来代替？</strong><br>有关系R S，求R INTERSECT S语句，可以这样（即R ∩ S = R − ( R − S )）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> R <span class="keyword">EXCEPT</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> R <span class="keyword">EXCEPT</span> S</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>53、什么样的调度一定能够保证数据的一致性？</strong><br>可串行化调度</p><p><strong>54、为什么事务非正常结束时会影响数据库数据的正确性，请举例说明。</strong><br>如果在A转账给B的过程中，A扣款成功了，但是此时事务非正常结束，此时B没有收到欠款，数据库处于不一致状态，这影响了数据库数据的正确性。</p><p><strong>55、两个人分别在去哪儿网和携程网上购买2017年7月2日，CZ6147次航班，从长春飞往北京，但该航班的经济舱只剩一张票，两个人同时下单，数据库中要如何控制？</strong><br>使用事务并发控制，对这两个事务进行可串行化调度。</p><p><strong>56、很多在线手机游戏都支持离线操作，即当网络不通时，可以离线玩，等联网之后再进行数据同步，在这个过程中，可能涉及数据库的哪些概念？</strong><br>涉及事务管理，补偿事务，一致性，持久性。</p><p><strong>57、用户到银行开了一个储蓄账户（account表），可以随时对该账户进行存钱、取钱等管理，分别对应数据库中的什么操作？在ATM机上取钱，当卡内余额不足时，ATM机不做任何支付，如何将此规则定义在该表上？</strong> 存取都钱对应UPDATE操作，对account的余额balance添加域约束check(balance&gt;=0);在执行扣款事务的时候，余额不足余额会小于0，这时事务会失败并回滚。</p><p><strong>58、吉林大学一卡通实现了与银行的绑定，当一卡通内余额小于某一设定的金额的时候，可以通过银行卡直接转账，请问如何实现自动转账？转账的金额在数据库端如何设定？</strong><br>创建一个触发器，当一卡通内余额被修改时启动触发器，如果修改过后余额小于设定金额，就执行转账事务。</p><p><strong>59、某银行为不同储蓄金额执行不同利率：低于10万元一年支付4.2%的利息，10万元以上（包括10万）一年支付4.5%的利息。假设储蓄账户表 account(aid（account_id）,balance, branch_name),写出与上述业务相对应的SQL语句，如何保证其执行结果的正确性？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account</span><br><span class="line"><span class="keyword">SET</span> balance<span class="operator">=</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> balance<span class="operator">&lt;</span><span class="number">100000</span> <span class="keyword">THEN</span> balance<span class="operator">*</span><span class="number">1.042</span></span><br><span class="line"><span class="keyword">ELSE</span> balance<span class="operator">*</span><span class="number">1.045</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>CASE结构的存在可以被利用来在一条UPDATE语句中执行前面的两种更新，避免前面发生的问题！这样就能保证其执行结果的正确性，如果不使用case语句，考虑到加上利息后余额可能超过10万，应该先更新大于10万的，再更新小于十万的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account</span><br><span class="line"><span class="keyword">SET</span> balance<span class="operator">=</span>balance<span class="operator">*</span><span class="number">1.045</span></span><br><span class="line"><span class="keyword">WHERE</span> balance<span class="operator">&gt;=</span><span class="number">100000</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account</span><br><span class="line"><span class="keyword">SET</span> balance<span class="operator">=</span>balance<span class="operator">*</span><span class="number">1.042</span></span><br><span class="line"><span class="keyword">WHERE</span> balance<span class="operator">&lt;</span><span class="number">100000</span>;</span><br></pre></td></tr></table></figure><p>复习，case结构一般如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span></span><br><span class="line"> <span class="keyword">when</span> pred1 <span class="keyword">then</span> result1</span><br><span class="line"> <span class="keyword">when</span> pred2 <span class="keyword">then</span> result2</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">when</span> predn <span class="keyword">then</span> resultn</span><br><span class="line"> <span class="keyword">else</span> result0</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能（东软）</title>
      <link href="/2023/02/20/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%AE%AD(%E4%B8%9C%E8%BD%AF)/"/>
      <url>/2023/02/20/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%AE%AD(%E4%B8%9C%E8%BD%AF)/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><h3 id="老师信息">老师信息</h3><p>老师：吴法春<br>学校：山大（10年毕业）<br>工作：<br>TCL c语言 单片机 2.5年 深圳<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> vetch C++开发 ARM平台 3年<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 青岛 山科智汇 java平台端 Android 3年<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 东软 java方向 python人工智能</p><hr><h3 id="学习安排">学习安排</h3><p>前置基础：python基础，python数据处理和可视化基础</p><p><strong>五天</strong></p><p><strong>第一阶段</strong>（2天）<br>机器学习，深度学习，框架（tensorflow/pytorch）</p><p><strong>第二阶段</strong>（2-2.5天）<br>项目实训（分组 3-4人）</p><p><strong>第三阶段</strong>（0.5-1天）<br>答辩（ppt，代码演示，15分钟左右）介绍，项目演示，代码演示</p><hr><h3 id="成绩">成绩</h3><p>平时成绩30%（考勤为主，有事请假）<br>项目成绩70%（项目内容为主，答辩为辅，不能来要提前说）</p><hr><h3 id="上课时间">上课时间</h3><p>上午：8-12点</p><p>下午：13-17点</p><hr><h3 id="上课方式">上课方式</h3><p>每节课都录屏发群里<br>课件发群里<br>笔记发群里<br>环境搭建也发群里</p><hr><h3 id="项目">项目</h3><p>分类任务（数据任选，模型任选）<br>回归任务（任选）<br>模式识别（数据任选）<br>其他项目</p><p>要求：<br>数据、算法、模型、训练（不能直接拿网上的结果）、效果（指标，可视化）</p><p>答辩：<br>PPT（团队介绍、项目介绍、项目说明、效果展示）<br>成果物（数据、源码、或者其他）<br>实训模板（没有要求，吉大的或者网上的）</p><p>提交：<br>以上三个，答辩完成以后，以小组为单位打包提交即可。</p><hr><h3 id="框架">框架</h3><p>以前：tensorflow<br>现在：pytorch<br>没讲，看发的资料</p><hr><h2 id="环境搭建">环境搭建</h2><p>建议在自己电脑上搭建环境<br>环境：<strong>anaconda</strong> + <strong>pycharm</strong><br>按照老师的给的文档安装</p><p><strong>anaconda</strong><br>带各种包：数据分析、机器学习等等的环境</p><p><strong>pycharm</strong><br>编辑器，社区版免费，破解版没必要（费劲）</p><hr><h2 id="机器学习">机器学习</h2><blockquote><p>主演教四个算法演示机器学习的流程</p></blockquote><h3 id="1、概述">1、概述</h3><p><strong>AI</strong>：<br>1956年第一次提出AI的概念。算力等等限制，受到打击</p><p><strong>实现核心</strong>：<br>机器学习<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 神经网络 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span> 机器学习<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 深度学习 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span> 神经网络，RNN、CNN</p><p><strong>数据</strong>：<br>清洗，筛选<br>整理结果：数据矩阵的样子</p><p><strong>算法</strong>：<br>参数</p><p><strong>模型</strong>：</p><p>输入新数据，推测结果</p><p>数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>输入</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{输入}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">输入</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 算法 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>新数据</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{新数据}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">新数据</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 模型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>推测</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{推测}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1003em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">推测</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span> 结果</p><p><strong>算法重要还是数据重要？</strong><br>曲线图（纵轴效果，横轴数据、算法）</p><p><strong>分类、回归</strong>：<br>回归：预测具体数值<br>分类：预测属于哪一类（KNN算法：判断病人的肿瘤属于良性还是恶性的）</p><hr><h3 id="1、KNN算法">1、KNN算法</h3><h4 id="1-1、简介">1.1、简介</h4><p><strong>优点</strong>：</p><ul><li>思想极度简单</li><li>应用数学知识少(近乎为零)</li><li>效果好(缺点?)</li><li>可以解释机器学习算法使用过程中的很多细节问题</li><li>更完整的刻画机器学习应用的流程</li></ul><p>原理案例介绍</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-33-35.png" alt=""></p><p>假设现在设计一个程序判断一个新的肿瘤病人是良性肿瘤还是恶性肿瘤。</p><p>先基于原有的肿瘤病人的发现时间和肿瘤大小（特征）对应的良性/恶性（值）建立了一张散点图，横坐标是肿瘤大小，纵坐标是发现时间，红色代表良性，蓝色代表恶性，现在要预测的病人的颜色为绿色。</p><ol><li><p>首先需要取一个k值（这个k值的取法后面会介绍），然后找到距离要预测的病人的点（绿点）距离最近的k个点。</p></li><li><p>然后用第一步中取到的三个点进行投票，比如本例中投票结果就是蓝：红 = 3：0 ,3&gt;0,所以判断这个新病人幻的事恶性肿瘤。</p></li><li><p><strong>本质</strong>：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p></li></ol><hr><h4 id="1-2、简单实现">1.2、简单实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 9:24</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 特征</span></span><br><span class="line">raw_data_x = [[<span class="number">3.393533211</span>,<span class="number">2.331273381</span>],    <span class="comment"># 肿瘤信息: 大小、时间</span></span><br><span class="line">             [<span class="number">2.110073483</span>,<span class="number">1.781539638</span>],</span><br><span class="line">             [<span class="number">1.343808831</span>,<span class="number">3.368360954</span>],</span><br><span class="line">             [<span class="number">3.582294042</span>,<span class="number">4.679179110</span>],</span><br><span class="line">             [<span class="number">2.280362439</span>,<span class="number">2.866990263</span>],</span><br><span class="line">             [<span class="number">7.423436942</span>,<span class="number">4.696522875</span>],</span><br><span class="line">             [<span class="number">5.745051997</span>,<span class="number">3.533989803</span>],</span><br><span class="line">             [<span class="number">9.172168622</span>,<span class="number">2.511101045</span>],</span><br><span class="line">             [<span class="number">7.792783481</span>,<span class="number">3.424088941</span>],</span><br><span class="line">             [<span class="number">7.939820817</span>,<span class="number">0.791637231</span>]</span><br><span class="line">            ]</span><br><span class="line"><span class="comment"># 所属类别</span></span><br><span class="line">raw_data_y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]      <span class="comment"># 0/1 恶性的还是良性的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成numpy数组</span></span><br><span class="line">X_train = np.array(raw_data_x)</span><br><span class="line">y_train = np.array(raw_data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要预测的点</span></span><br><span class="line">x = np.array([<span class="number">8.093607318</span>,<span class="number">3.365731514</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.scatter(X_train[y_train == <span class="number">0</span>,<span class="number">0</span>],X_train[y_train == <span class="number">0</span>,<span class="number">1</span>],color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">plt.scatter(X_train[y_train == <span class="number">1</span>,<span class="number">0</span>],X_train[y_train == <span class="number">1</span>,<span class="number">1</span>],color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter(x[<span class="number">0</span>],x[<span class="number">1</span>],color=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>欧拉距离：计算超平面两个点的距离</p><p><strong>KNN 实现过程简单编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 9:35</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 特征</span></span><br><span class="line">raw_data_x = [[<span class="number">3.393533211</span>,<span class="number">2.331273381</span>],    <span class="comment"># 肿瘤信息: 大小、时间</span></span><br><span class="line">             [<span class="number">2.110073483</span>,<span class="number">1.781539638</span>],</span><br><span class="line">             [<span class="number">1.343808831</span>,<span class="number">3.368360954</span>],</span><br><span class="line">             [<span class="number">3.582294042</span>,<span class="number">4.679179110</span>],</span><br><span class="line">             [<span class="number">2.280362439</span>,<span class="number">2.866990263</span>],</span><br><span class="line">             [<span class="number">7.423436942</span>,<span class="number">4.696522875</span>],</span><br><span class="line">             [<span class="number">5.745051997</span>,<span class="number">3.533989803</span>],</span><br><span class="line">             [<span class="number">9.172168622</span>,<span class="number">2.511101045</span>],</span><br><span class="line">             [<span class="number">7.792783481</span>,<span class="number">3.424088941</span>],</span><br><span class="line">             [<span class="number">7.939820817</span>,<span class="number">0.791637231</span>]</span><br><span class="line">            ]</span><br><span class="line"><span class="comment"># 所属类别</span></span><br><span class="line">raw_data_y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]      <span class="comment"># 0/1 恶性的还是良性的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成numpy数组</span></span><br><span class="line">X_train = np.array(raw_data_x)</span><br><span class="line">y_train = np.array(raw_data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要预测的点</span></span><br><span class="line">x = np.array([<span class="number">8.093607318</span>,<span class="number">3.365731514</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="comment"># plt.scatter(X_train[y_train == 0,0],X_train[y_train == 0,1],color=&#x27;g&#x27;)</span></span><br><span class="line"><span class="comment"># plt.scatter(X_train[y_train == 1,0],X_train[y_train == 1,1],color=&#x27;r&#x27;)</span></span><br><span class="line"><span class="comment"># plt.scatter(x[0],x[1],color=&#x27;b&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================================================================</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">distances = []  <span class="comment"># 存计算出来的距离</span></span><br><span class="line"><span class="keyword">for</span> x_train <span class="keyword">in</span> X_train:</span><br><span class="line">    <span class="comment"># 欧拉</span></span><br><span class="line">    <span class="comment"># **2 求平方</span></span><br><span class="line">    d = sqrt(np.<span class="built_in">sum</span>((x_train - x)**<span class="number">2</span>))</span><br><span class="line">    distances.append(d)</span><br><span class="line"><span class="comment"># 生成表达式</span></span><br><span class="line"><span class="comment"># distances = [sqrt(np.sum((x_train - x)**2)) for x_train in X_train]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;distances=&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(distances)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回排序后的结果的索引,也就是距离测试点距离最近的点的排序坐标数组</span></span><br><span class="line">nearset = np.argsort(distances)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nearset=&#x27;</span>)   <span class="comment"># argsort()沿着指定的轴，对输入数组的元素值进行排序，并返回排序后的元素索引数组</span></span><br><span class="line"><span class="built_in">print</span>(nearset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 投票</span></span><br><span class="line">k = <span class="number">6</span></span><br><span class="line"><span class="comment"># print(&#x27;投票结果=&#x27;)</span></span><br><span class="line"><span class="comment"># print([1 if key &gt;= k else 0 for key in nearset])</span></span><br><span class="line"><span class="comment"># 求出距离测试点最近的6个点的类别</span></span><br><span class="line">topK_y = [y_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> nearset[:k]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;topK_y=&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(topK_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># collections的Counter方法可以求出一个数组的相同元素的个数，返回一个dict【key=元素名，value=元素个数】</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># most_common方法求出最多的元素对应的那个键值对</span></span><br><span class="line">votes = Counter(topK_y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;votes=&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(votes)</span><br><span class="line"></span><br><span class="line">mc1 = votes.most_common(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mc1=&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mc1)</span><br><span class="line"><span class="comment"># mc2 = votes.most_common(2)</span></span><br><span class="line"><span class="comment"># print(&#x27;mc2=&#x27;)</span></span><br><span class="line"><span class="comment"># print(mc2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测: 最多的元素对应的那个键值对的键</span></span><br><span class="line">predict = mc1[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;predict=&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(predict)</span><br></pre></td></tr></table></figure><hr><h4 id="1-3、机器学习套路">1.3、机器学习套路</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-38-11.png" alt=""></p><p>可以说KNN是一个不需要训练过程的算法 k近邻算法是非常特殊的，可以被认为是没有模型的算法。为了和其他算法统一，可以认为训练数据集就是模型</p><hr><h4 id="1-4、判断机器学习算法的性能">1.4、判断机器学习算法的性能</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-41-02.png" alt=""></p><p><strong>训练数据集，测试数据集</strong><br>不能用训练数据集来测试，所以要划分数据集为训练数据集，测试数据集。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-41-38.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 10:55</span></span><br><span class="line"><span class="comment"># permutation(n) 给出从0到n-1的一个随机排列</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets    <span class="comment"># 导入数据集</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data[:,:<span class="number">2</span>]     <span class="comment"># 前两个特征</span></span><br><span class="line">y = iris.target</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目的：随机 拆分出 训练集 测试集</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================================&#x27;</span>)</span><br><span class="line">shuffle_indexes = np.random.permutation(<span class="built_in">len</span>(X))</span><br><span class="line"><span class="built_in">print</span>(shuffle_indexes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据集的比例</span></span><br><span class="line">test_ratio = <span class="number">0.2</span></span><br><span class="line"><span class="comment"># 获取测试数据集</span></span><br><span class="line">test_size = <span class="built_in">int</span>(<span class="built_in">len</span>(X) * test_ratio)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_indexes = shuffle_indexes[:test_size]</span><br><span class="line">train_indexes = shuffle_indexes[test_size:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================================&#x27;</span>)</span><br><span class="line">X_train = X[train_indexes]</span><br><span class="line">y_train = y[train_indexes]</span><br><span class="line"><span class="built_in">print</span>(X_train)</span><br><span class="line"><span class="built_in">print</span>(y_train)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================================&#x27;</span>)</span><br><span class="line">X_test = X[test_indexes]</span><br><span class="line">y_test = y[test_indexes]</span><br><span class="line"><span class="built_in">print</span>(X_test)</span><br><span class="line"><span class="built_in">print</span>(y_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(X_train.shape)</span><br><span class="line"><span class="built_in">print</span>(y_train.shape)</span><br><span class="line"><span class="built_in">print</span>(X_test.shape)</span><br><span class="line"><span class="built_in">print</span>(y_test.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="1-5、加载鸢尾花数据集">1.5、加载鸢尾花数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 10:38</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets    <span class="comment"># 导入数据集</span></span><br><span class="line"><span class="comment"># 代码下载150条，官网更多</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="built_in">print</span>(iris.DESCR)   <span class="comment"># 描述</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===================================================================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(iris.data)    <span class="comment"># 数据</span></span><br><span class="line"><span class="built_in">print</span>(iris.data.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===================================================================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(iris.feature_names)   <span class="comment"># 特征名称</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===================================================================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(iris.target)  <span class="comment"># 标记信息</span></span><br><span class="line"><span class="built_in">print</span>(iris.target.shape)</span><br><span class="line"><span class="built_in">print</span>(iris.target_names)    <span class="comment"># 标记名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">X = iris.data[:,:<span class="number">2</span>]     <span class="comment"># 前两个特征</span></span><br><span class="line"><span class="comment"># plt.scatter(X[:,0], X[:,1])</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">y = iris.target</span><br><span class="line"><span class="comment"># plt.scatter(X[y == 0,0], X[y == 0,1], color=&quot;red&quot;)</span></span><br><span class="line"><span class="comment"># plt.scatter(X[y == 1,0], X[y == 1,1], color=&quot;blue&quot;)</span></span><br><span class="line"><span class="comment"># plt.scatter(X[y == 2,0], X[y == 2,1], color=&quot;green&quot;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(X[y == 0,0], X[y == 0,1], color=&quot;red&quot;, marker=&quot;o&quot;)</span></span><br><span class="line"><span class="comment"># plt.scatter(X[y == 1,0], X[y == 1,1], color=&quot;blue&quot;, marker=&quot;+&quot;)</span></span><br><span class="line"><span class="comment"># plt.scatter(X[y == 2,0], X[y == 2,1], color=&quot;green&quot;, marker=&quot;x&quot;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">X = iris.data[:,<span class="number">2</span>:]     <span class="comment"># 后两个特征</span></span><br><span class="line">plt.scatter(X[y == <span class="number">0</span>,<span class="number">0</span>], X[y == <span class="number">0</span>,<span class="number">1</span>], color=<span class="string">&quot;red&quot;</span>, marker=<span class="string">&quot;o&quot;</span>)</span><br><span class="line">plt.scatter(X[y == <span class="number">1</span>,<span class="number">0</span>], X[y == <span class="number">1</span>,<span class="number">1</span>], color=<span class="string">&quot;blue&quot;</span>, marker=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">plt.scatter(X[y == <span class="number">2</span>,<span class="number">0</span>], X[y == <span class="number">2</span>,<span class="number">1</span>], color=<span class="string">&quot;green&quot;</span>, marker=<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><h4 id="1-6、手写字数据集">1.6、手写字数据集</h4><p><a href="http://xn--11-knn-nw2jt75dxjobnhclxqy7f.py">11-knn手写数字测试.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 12:48</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line"><span class="built_in">print</span>(digits.keys())</span><br><span class="line"><span class="built_in">print</span>(digits.DESCR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">X = digits.data</span><br><span class="line"><span class="built_in">print</span>(X.shape)</span><br><span class="line"><span class="built_in">print</span>(X[:<span class="number">10</span>])</span><br><span class="line">y = digits.target</span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br><span class="line"><span class="built_in">print</span>(y[:<span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">some_digit = X[<span class="number">666</span>]</span><br><span class="line">some_digit_image = some_digit.reshape(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.imshow(some_digit_image, cmap=matplotlib.cm.binary)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="keyword">from</span> playML.module_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> playML.KNN <span class="keyword">import</span> KNNClassifier</span><br><span class="line"><span class="comment"># MyKnn = __import__(&#x27;04-MyKnn&#x27;)</span></span><br><span class="line"></span><br><span class="line">X_train, y_train, X_test, y_test = train_test_split(X, y, test_radio=<span class="number">0.2</span>, seed=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">my_knn_clf = KNNClassifier(k=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># my_knn_clf = MyKnn.KNNClassifier(k=3)</span></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">my_knn_clf.fit(X_train, y_train)</span><br><span class="line">y_predict = my_knn_clf.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(y_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(y_predict == y_test) / <span class="built_in">len</span>(y_test))</span><br></pre></td></tr></table></figure><hr><h4 id="1-7、超参数和模型参数">1.7、超参数和模型参数</h4><ul><li><strong>超参数</strong>: 在算法运行前需要决定的参数</li><li><strong>模型参数</strong>: 算法过程中学习的参数</li></ul><p>kNN算法没有模型参数<br>kNN算法中的k是典型的超参数</p><ul><li><strong>寻找好的超参数</strong><ul><li>领域知识</li><li>经验数值</li><li>实验搜索</li></ul></li></ul><p><strong>寻找最好的k</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 20:00</span></span><br><span class="line"><span class="comment"># 思路，遍历1-11，分别拿每一个k去调用算法，得出分数，取得分最高的那个k</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">best_score = <span class="number">0.0</span></span><br><span class="line">best_k = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    knn_clf = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">    knn_clf.fit(X_train, y_train)</span><br><span class="line">    score = knn_clf.score(X_test, y_test)</span><br><span class="line">    <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">        best_k = k</span><br><span class="line">        best_score = score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不管警告</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_k =&quot;</span>, best_k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_score =&quot;</span>, best_score)</span><br></pre></td></tr></table></figure><ul><li><strong>kNN的另外一个超参数：距离的权重</strong></li></ul><p>一般情况下使用距离的导数作为权证</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-50-41.png" alt=""></p><p>考虑距离:红色:1蓝色: 1/3+ 1/4 =7/12红色胜</p><p><strong>考虑距离？不考虑距离</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 20:00</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">666</span>)</span><br><span class="line"><span class="comment"># =======================================================</span></span><br><span class="line">best_method = <span class="string">&quot;&quot;</span></span><br><span class="line">best_score = <span class="number">0.0</span></span><br><span class="line">best_k = -<span class="number">1</span></span><br><span class="line"><span class="comment"># 考虑距离？不考虑距离</span></span><br><span class="line"><span class="keyword">for</span> method <span class="keyword">in</span> [<span class="string">&quot;uniform&quot;</span>,<span class="string">&quot;distance&quot;</span>]:</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        knn_clf = KNeighborsClassifier(n_neighbors=k,weights=method)</span><br><span class="line">        knn_clf.fit(X_train,y_train)</span><br><span class="line">        score = knn_clf.score(X_test,y_test)</span><br><span class="line">        <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">            best_k = k</span><br><span class="line">            best_score = score</span><br><span class="line">            best_method = method</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不管警告</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_k=&quot;</span>,best_k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_score=&quot;</span>,best_score)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_method=&quot;</span>,best_method)</span><br></pre></td></tr></table></figure><p><strong>什么是距离？</strong></p><ul><li><strong>欧拉距离</strong></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{\sum^n_{i=1}(X_i^{(a)}-X_i^{(b)})^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1568em;vertical-align:-1.2777em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791em;"><span class="svg-align" style="top:-5.1168em;"><span class="pstrut" style="height:5.1168em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8391em;"><span class="pstrut" style="height:5.1168em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.1968em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='3.1968em' viewBox='0 0 400000 3196' preserveAspectRatio='xMinYMin slice'><path d='M702 80H40000040H742v3062l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>曼哈顿距离</strong></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi mathvariant="normal">∣</mi><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n|X_i^{(a)}-X_i^{(b)}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3217em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p><ul><li><strong>两种距离的整理对比</strong></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi mathvariant="normal">∣</mi><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><mi mathvariant="normal">∣</mi><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mn>1</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">(\sum_{i=1}^n|X_i^{(a)}-X_i^{(b)}|)^{\frac{1}{1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3217em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi mathvariant="normal">∣</mi><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">(\sum_{i=1}^n|X_i^{(a)}-X_i^{(b)}|^2)^{\frac{1}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3217em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi mathvariant="normal">∣</mi><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><msup><mi mathvariant="normal">∣</mi><mi>p</mi></msup><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>p</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">(\sum_{i=1}^n|X_i^{(a)}-X_i^{(b)}|^p)^{\frac{1}{p}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3217em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0368em;"><span style="top:-3.4458em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>明克夫斯基距离</strong>Minkowski Distance</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi mathvariant="normal">∣</mi><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>−</mo><msubsup><mi>X</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msubsup><msup><mi mathvariant="normal">∣</mi><mi>p</mi></msup><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>p</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">(\sum_{i=1}^n|X_i^{(a)}-X_i^{(b)}|^p)^{\frac{1}{p}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3217em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0368em;"><span style="top:-3.4458em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>到这里，我们获得了一个新的<strong>超参数 p</strong></p><p><strong>搜索明可夫斯基距离相应的p</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># 创建时间：2023-02-20 13:08</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">666</span>)</span><br><span class="line"><span class="comment"># =======================================================</span></span><br><span class="line">best_p = -<span class="number">1</span></span><br><span class="line">best_score = <span class="number">0.0</span></span><br><span class="line">best_k = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        knn_clf = KNeighborsClassifier(n_neighbors=k,weights=<span class="string">&#x27;distance&#x27;</span>,p=p)</span><br><span class="line">        knn_clf.fit(X_train,y_train)</span><br><span class="line">        <span class="comment"># 只有一个标准 score, 实际情况一定不止一个</span></span><br><span class="line">        score = knn_clf.score(X_test,y_test)</span><br><span class="line">        <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">            best_k = k</span><br><span class="line">            best_score = score</span><br><span class="line">            best_p = p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_p=&quot;</span>,best_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_k=&quot;</span>,best_k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;best_score=&quot;</span>,best_score)</span><br></pre></td></tr></table></figure><hr><h4 id="1-8、网格搜索Grid-Search">1.8、网格搜索Grid Search</h4><p>找最优参数</p><hr><h4 id="1-9、数据归一化处理">1.9、数据归一化处理</h4><p>样本间的距离被一个字段所主导</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_20-56-30.png" alt=""></p><p>解决方案 ：将所有的数据映射到同一尺度</p><ul><li><strong>最值归一化 normalization</strong>：把所有数据映射到 0-1 之间</li></ul><p>适合数值分布比较均匀，有边界的数据集</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_{scale}=\frac{x-x_{min}}{x_{max}-x_{min}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">sc</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol><li>将这个数据映射到0~Xmax-Xmin 之间</li><li>然后对于每个x相比于整个范围所占的比例</li></ol><p>适用于分布有明显边界的情况；<br>受<strong>outlier</strong>影响较大</p><ul><li><strong>均值方差归一化 standardization</strong>（常用）</li></ul><p>把所有数据归一到均值为0方差为1的分布中<br>适用于数据分布没有明显边界；有可能存在极端情况值</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></msub></mrow><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">x_{scale}=\frac{x-x_{mean}}{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">sc</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">an</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><hr><h4 id="1-10、对测试数据集如何归一化？">1.10、对测试数据集如何归一化？</h4><p>测试数据是模拟真实环境</p><ul><li>真实环境很有可能无法得到所有测试数据的均值和方差</li><li>对数据的归一化也是算法的一部分</li></ul><p>在scikit-learn中使用Scaler</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_21-00-18.png" alt=""></p><hr><h4 id="1-11、KNN的缺点">1.11、KNN的缺点</h4><p>最大的缺点：效率低下<br>如果训练集有m个样本，n个特征，则预测每一个新的数据，需要O(m*n)</p><hr><h3 id="2、线性回归算法">2、线性回归算法</h3><h4 id="2-1、简介">2.1、简介</h4><ul><li>解决回归问题</li><li>思想简单，实现容易</li><li>许多强大的非线性模型的基础</li><li>结果具有很好的可解释性</li><li>蕴含机器学习中的很多重要思想</li></ul><p>线性回归算法以一个坐标系里一个维度为结果，其他维度为特征（如二维平面坐标系中横轴为特征，纵轴为结果），无数的训练集放在坐标系中，发现他们是围绕着一条执行分布。线性回归算法的期望，就是寻找一条直线，最大程度的“拟合”样本特征和样本输出标记的关系</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_14-14-41.png" alt=""></p><h4 id="实现简单线性回归法">实现简单线性回归法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>])</span><br><span class="line">y = np.array([<span class="number">1.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">5.</span>])</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="3、梯度下降法">3、梯度下降法</h3><ul><li>不是一个机器学习算法</li><li>是一种基于<strong>搜索</strong>的最优化方法</li><li>作用：最小化一个损失函数</li><li>梯度上升法:最大化一个效用函数</li></ul><p>以下是定义了一个损失函数以后，参数theta对应的损失函数J的值对应的示例图，我们需要找到使得损失函数值J取得最小值对应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>（这里是二维平面，也就是我们的参数只有一个）</p><p>在直线方程中，导数代表斜率 在曲线方程中，导数代表切线斜率 导数代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>单位变化时，J相应的变化</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_16-19-53.png" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span>称为学习率(learning rate)；<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span>的取值影响获得最优解的速度；<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span>取值不合适，甚至得不到最优解；<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span>是梯度下降法的一个超参数。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">η</mi></mrow><annotation encoding="application/x-tex">\mathbf{\eta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><strong>取值的影响</strong>：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_16-23-13.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_16-23-33.png" alt=""></p><p><strong>其他注意事项</strong>：</p><p>并不是所有函数都有唯一的极值点</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_16-27-17.png" alt=""></p><p>解决方案：<br>多次运行，随机化初始点；<br>梯度下降法的初始点也是一个超参数。</p><p><strong>线性回归法的损失函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo stretchy="false">(</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^m(y^{(i)}-\hat{y}^{(i)})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1877em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>具有唯一的最优解</strong>。</p><h4 id="多元线性回归中的梯度下降法">多元线性回归中的梯度下降法</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/ai2023learning/Snipaste_2023-02-20_16-55-39.png" alt=""></p><p>套路</p><p>模型<br>数学推导（其他方法）损失函数或者效应函数</p><h2 id="深度学习">深度学习</h2><h3 id="1、感知机">1、感知机</h3><h3 id="2、神经网络">2、神经网络</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPARKS</title>
      <link href="/2023/02/07/SPARKS/"/>
      <url>/2023/02/07/SPARKS/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SPARKS 语言是一种<strong>算法描述语言</strong>，这种语言具有精简易懂的特点，适用于模块化程序设计过程中对于各模块的算法进行描述交流，通过使用SPARKS 语言，在模块细化的过程中，可以忽略模块的细节而将关键的算法思想表达出来。</p></blockquote><h2 id="1、基本数据类型">1、基本数据类型</h2><p>整型、实型、布尔型、字符型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">integer x,y;</span><br><span class="line"></span><br><span class="line">double z,w;</span><br><span class="line"></span><br><span class="line">boolean a,b;</span><br><span class="line"></span><br><span class="line">char c,d;</span><br></pre></td></tr></table></figure><h2 id="2、赋值语句">2、赋值语句</h2><p>将y的值赋给x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&lt;-y</span><br></pre></td></tr></table></figure><h2 id="3、两个布尔值">3、两个布尔值</h2><p><code>true   false</code></p><p>为了产生这两个布尔值，设置了<strong>逻辑运算符</strong></p><p><code>and   or   not</code></p><p>和<strong>关系运算符</strong></p><p><code>&lt;   &lt;=   =   !=   &gt;=   &gt;</code></p><h2 id="4、数组表示">4、数组表示</h2><p>一个n维的数组可以用以下形式说明:<br><code>integer A(l1:u1, l2:u2, ..., ln,un)</code><br>其<strong>下界为li</strong>，<strong>上界为ui</strong>，1&lt;= i &lt;= n。li和ui都是整数或整型变量，如果某一维的下界为1，则下界li可以不写出。</p><p>例如：<br><code>integer A(5,7:20)</code></p><h2 id="5、-条件语句">5、 条件语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if cond then</span><br><span class="line">     S1</span><br><span class="line">else</span><br><span class="line">     S2</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>其中cond是一个布尔表达式。假设布尔表达式按照“短路”方式求值。</p><p>另一种语句是<strong>case语句</strong>，此语句可以很容易地把数个选择对象区别开来，而无需使用多重if-then-else语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">     :cond1: S1</span><br><span class="line">     :cond2: S2</span><br><span class="line">     ......</span><br><span class="line">     :condn: Sn</span><br><span class="line">     :else   : Sn+1</span><br><span class="line">endcase</span><br></pre></td></tr></table></figure><p>其中else子句并不是必需的。</p><h2 id="6、循环语句">6、循环语句</h2><p><strong>while循环语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while cond do</span><br><span class="line">     S</span><br><span class="line">repeat</span><br></pre></td></tr></table></figure><p>当cond为true的时候，循环，S有可能不会被执行</p><p><strong>loop-until-repeat循环语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop</span><br><span class="line">     S</span><br><span class="line">until cond repeat</span><br></pre></td></tr></table></figure><p>当cond为false的时候循环，S至少执行一次</p><p><strong>for循环语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for vble&lt;-start to finish by increment do</span><br><span class="line">     S</span><br><span class="line">repeat</span><br></pre></td></tr></table></figure><p>其中by incerment不是必须的，<strong>默认为+1</strong>。vble是变量，start、finish、increment可以是整型、实型变量，或算术表达式。</p><p><strong>loop循环语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop</span><br><span class="line">     S</span><br><span class="line">repeat</span><br></pre></td></tr></table></figure><p>可以使用go to label退出，或使用exit退出，exit相当于C语言值的break。</p><h2 id="7、过程">7、过程</h2><p>一个完整的sparts程序是一个或多个过程的集合，第一个过程作为主程序。单个过程形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">procedure NAME(&lt;形参表&gt;)</span><br><span class="line">   &lt;说明部分&gt;</span><br><span class="line">   S</span><br><span class="line">end NAME</span><br></pre></td></tr></table></figure><p>过程可以是纯子例行程序，也可以是一个函数。函数中，返回值由放在紧接return的一对括号中的值来表示。例如<br>return (&lt;表达式&gt;)</p><h2 id="8、输入输出">8、输入输出</h2><p><code>read a,b</code></p><p>输入的数据依次送给a，b</p><p><code>print x,y</code></p><p>依次输出x，y</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伪代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2023/01/27/html/"/>
      <url>/2023/01/27/html/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV14J4114768?t=3.3">【pink老师视频yyds】</a></p><h2 id="一、HTML简介">一、HTML简介</h2><h3 id="1、网页">1、网页</h3><ul><li><strong>什么是网页</strong></li></ul><p><strong>网站</strong>是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。</p><p><strong>网页</strong>是网站中的一“页”，通常是 <strong>HTML</strong> 格式的文件，它要通过浏览器来阅读。</p><p><strong>网页是构成网站的基本元素</strong>，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页， 常见以 <strong>.htm</strong> 或 <strong>.html</strong> 后缀结尾的文件，因此将其<strong>俗称为 HTML 文件</strong>。</p><ul><li><strong>什么是 HTML</strong></li></ul><p>HTML 指的是<strong>超文本标记语言 (Hyper Text Markup Language)</strong> ，它是用来描述网页的一种语言。</p><p>HTML 不是一种编程语言，而是一种标记语言 (markup language)。</p><p>标记语言是一套标记标签 (markup tag)。</p><p><strong>所谓超文本，有 2 层含义</strong>：</p><ol><li>它可以加入图片、声音、动画、多媒体等内容（超越了文本限制 ）。</li><li>它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本 ）。</li></ol><ul><li><strong>网页的形成</strong></li></ul><p>网页是由网页元素组成的，这些元素是利用 html 标签描述出来，然后通过浏览器解析来显示给用户的。</p><p>前端人员开发代码 ----&gt; 浏览器显示代码（解析、渲染） -----&gt; 生成最后的 Web 页面</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_18-23-00.png" alt=""></p><h3 id="2、常用浏览器">2、常用浏览器</h3><blockquote><p>  浏览器是网页显示、运行的平台。常用的浏览器有 <strong>IE</strong>、<strong>火狐</strong>（Firefox）、<strong>谷歌</strong>（Chrome）、<strong>Safari</strong>和<strong>Opera</strong>等。 平时称为<strong>五大浏览器</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_18-33-19.png" alt=""></p></blockquote><ul><li>浏览器内核</li></ul><p>浏览器内核（渲染引擎）： 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p><table><thead><tr><th style="text-align:left">浏览器</th><th style="text-align:center">内核</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">IE</td><td style="text-align:center">Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td style="text-align:left">firefox</td><td style="text-align:center">Gecko</td><td>火狐浏览器内核</td></tr><tr><td style="text-align:left">Safari</td><td style="text-align:center">Webkit</td><td>苹果浏览器内核</td></tr><tr><td style="text-align:left">chrome/Opera</td><td style="text-align:center">Blink</td><td>chrome / opera浏览器内核。Blink 其实是 WebKit 的分支</td></tr></tbody></table><p>目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。</p><h3 id="3、Web-标准（重点）">3、Web 标准（重点）</h3><blockquote><p>Web 标准是由 W3C 组织和其他标准化组织制定的<strong>一系列标准的集合</strong>。<strong>W3C（万维网联盟）</strong> 是国际最著名的标准化组织。</p></blockquote><ul><li><strong>为什么需要Web标准</strong></li></ul><p>浏览器不同，它们显示页面或者排版就有些许<strong>差异</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_18-35-24.png" alt=""></p><p>遵循Web标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下<strong>优点</strong>：</p><ol><li><p>让Web的发展前景更广阔。</p></li><li><p>内容能被更广泛的设备访问。</p></li><li><p>更容易被搜寻引擎搜索。</p></li><li><p>降低网站流量费用。</p></li><li><p>使网站更易于维护。</p></li><li><p>提高页面浏览速度。</p></li></ol><ul><li><strong>Web标准的构成</strong></li></ul><p>主要包括<strong>结构</strong>（Structure）、<strong>表现</strong>（Presentation）和<strong>行为</strong>（Behavior）三个方面。</p><table><thead><tr><th style="text-align:center">标准</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">结构</td><td>结构用于对<strong>网页元素</strong>进行整理和分类，现阶段主要学的是HTML。</td></tr><tr><td style="text-align:center">表现</td><td>表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS</td></tr><tr><td style="text-align:center">行为</td><td>行为是指网页模型的定义及<strong>交互</strong>的编写，现阶段主要学的是Javascript</td></tr></tbody></table><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。</p><p>简单理解：<strong>结构写到HTML 文件中，表现写到CSS 文件中，行为写到JavaScript 文件中</strong>。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_18-42-57.png" alt=""></p><h2 id="二、HTML标签规范">二、HTML标签规范</h2><h3 id="1、基本语法概述">1、基本语法概述</h3><p>（1）HTML 标签是由<strong>尖括号包围的关键词</strong>，例如<code>&lt;html&gt;</code>。</p><p>（2）HTML 标签<strong>通常是成对出现的</strong>，例如<code>&lt;html&gt;</code>和<code>&lt;/html&gt;</code>  ，我们称为<strong>双标签</strong>。标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><p>（3）有些特殊的标签必须是单个标签（极少情况），例如<code>&lt;br /&gt;</code>，我们称为<strong>单标签</strong>。</p><h3 id="2、标签关系">2、标签关系</h3><p>双标签关系可以分为两类：<strong>包含关系</strong>和<strong>并列关系</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 并列关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、HTML-基本结构标签">3、HTML 基本结构标签</h3><ul><li><strong>一个 HTML 网页</strong></li></ul><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。</p><p>HTML页面也称为 HTML 文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello, world </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td>HTML标签</td><td>页面中最大的标签，我们 称为 <strong>根标签</strong></td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td>文档头部</td><td>注意在head标签中我们必须要设置的标签是title</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>文档标题</td><td>让页面拥有一个属于自己的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td>文档主体</td><td>元素包含文档的所有内容，页面内容 基本都是放到body里面的</td></tr></tbody></table><p>HTML 文档的的后缀名必须是 .html 或 .htm ，浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。此时，用浏览器打开这个网页，我们就可以预览我们写的第一个 HTML 文件了</p><h2 id="三、开发工具">三、开发工具</h2><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_19-51-42.png" alt=""></p><h3 id="VSCode的使用">VSCode的使用</h3><p>新建文件，文件后缀为.html</p><p>输入<code>!</code>，然后选择<code>!</code>会自动生成骨架</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_19-57-08.png" alt=""></p><p><strong>骨架中的代码说明</strong></p><ul><li><p><code>&lt;!DOCTYPE html&gt;</code></p><p>&lt;!DOCTYPE&gt; 文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</p><p><code>&lt;!DOCTYPE html&gt;</code>这句代码的意思是: <strong>当前页面采取的是HTML5版本来显示网页</strong></p><p><strong>注意</strong>:</p><ol><li><p>&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，<strong>处于&lt;html&gt;标签之前</strong>。</p></li><li><p>&lt;!DOCTYPE&gt;<strong>不是一个HTML 标签</strong>，它就是文档类型声明标签</p></li></ol></li><li><p><code>&lt;html lang=&quot;en&quot;&gt;</code></p><p>用来定义当前文档显示的语言。</p><p>(1)、<strong>en定义语言为英语</strong></p><p>(2)、<strong>zh-CN定义语言为中文</strong></p><p>简单来说,定义为en就是英文网页, 定义为zh-CN就是中文网页</p><p>其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</p><p>这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的</p></li><li><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p><p>字符集(Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。</p><p>在标签内，可以通过标签的charset属性来规定HTML 文档应该使用哪种字符编码。</p><p>charset常用的值有：<strong>GB2312</strong> 、<strong>BIG5</strong> 、<strong>GBK</strong>和<strong>UTF-8</strong>，其中UTF-8也被称为万国码，基本包含了全世界所有国家需要用到的字符。</p><p><strong>注意</strong>：上面语法是<strong>必须要写的代码</strong>，否则可能引起乱码的情况。<strong>一般情况下，统一使用“UTF-8”编码</strong>，尽量统一写成标准的&quot;UTF-8&quot;，不要写成&quot;utf8&quot; 或&quot;UTF8&quot;。</p></li></ul><h3 id="VSCode的插件">VSCode的插件</h3><table><thead><tr><th>插件</th><th>作用</th></tr></thead><tbody><tr><td>Chinese (Simplified) LanguagePack for VS Code</td><td>中文( 简体 ) 语言包</td></tr><tr><td>Open in Browser</td><td>右击选择浏览器打开html文件</td></tr><tr><td>JS-CSS-HTMLFormatter</td><td>每次保存，都会自动格式化js css和html代码</td></tr><tr><td>Auto Rename Tag</td><td>自动重命名配对的HTML/XML标签</td></tr><tr><td>CSS Peek</td><td>追踪至样式</td></tr></tbody></table><h2 id="四、HTML常用标签">四、HTML常用标签</h2><blockquote><p>学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。</p><p><strong>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰</strong>。</p></blockquote><h3 id="1、标题标签-h1-h6">1、标题标签&lt;h1&gt; ~ &lt;h6&gt;</h3><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了6 个等级的网页标题，即<code>&lt;h1&gt; ~ &lt;h6&gt;</code></p><p>单词<strong>head</strong>的缩写，意为头部、标题。</p><p><strong>标签语义</strong>：作为标题使用，并且依据重要性递减</p><p><strong>特点</strong>：</p><ol><li><p>加了标题的文字会变的加粗，字号也会依次变大。</p></li><li><p>一个标题<strong>独占一行</strong>。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>由大到小依次减，<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>从重到轻随之变。<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后，<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见。<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、段落和换行标签">2、段落和换行标签</h3><p>  在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在HTML 标签中，<code>&lt;p&gt;&lt;/p&gt;</code>标签用于定义段落，它可以将整个网页分为若干个段落。</p><p>单词<strong>paragraph</strong>[ˈpærəgræf]的缩写，意为段落。</p><p><strong>标签语义</strong>：可以把HTML 文档分割为若干段落。</p><p><strong>特点</strong>：</p><ol><li><p>文本在一个段落中会根据浏览器窗口的大小<strong>自动换行</strong>。</p></li><li><p>段落和段落之间保有<strong>空隙</strong>。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  在HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签<code>&lt;br /&gt;</code></p><p>单词<strong>break</strong>的缩写，意为打断、换行。</p><p><strong>标签语义</strong>：强制换行。</p><p><strong>特点</strong>：</p><ol><li><p>&lt;br /&gt; 是个单标签。</p></li><li><p>&lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、文本格式化标签">3、文本格式化标签</h3><p>在网页中，有时需要为文字设置<strong>粗体</strong>、<em>斜体</em>或<u>下划线</u>等效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><strong>标签语义</strong>: 突出重要性, 比普通文字更重要.</p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">标签</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>加粗</strong></td><td style="text-align:center"><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐使用<code>&lt;strong&gt;</code>标签加粗 语义更强烈</td></tr><tr><td style="text-align:center"><strong>倾斜</strong></td><td style="text-align:center"><code>&lt;em&gt;&lt;/em&gt;</code>或者 <code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>标签加粗 语义更强烈</td></tr><tr><td style="text-align:center">删除线</td><td style="text-align:center"><code>&lt;del&gt;&lt;/del&gt;</code> 或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>标签加粗 语义更强烈</td></tr><tr><td style="text-align:center">下划线</td><td style="text-align:center"><code>&lt;ins&gt;&lt;/ins&gt;</code>或者 <code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>标签加粗 语义更强烈</td></tr></tbody></table><h3 id="4、-div-和-span-标签">4、&lt;div&gt;和&lt;span&gt;标签</h3><p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>是没有语义的，它们就是一个<strong>盒子</strong>，用来装内容的。</p><p>div 是<strong>division</strong> 的缩写，表示分割、分区。</p><p>span意为跨度、跨距。</p><p><strong>特点</strong>：</p><ol><li><p>&lt;div&gt;标签用来布局，但是现在<strong>一行只能放一个</strong>。大盒子</p></li><li><p>&lt;span&gt;标签用来布局，<strong>一行上可以多个</strong>。小盒子</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、图像标签和路径">5、图像标签和路径</h3><p>在HTML 标签中，<code>&lt;img /&gt;</code>标签用于定义HTML 页面中的图像。</p><p>单词<strong>image</strong>的缩写，意为图像。</p><p><strong>src是标签的必须属性</strong>，它用于指定图像文件的路径和文件名。所谓属性：简单理解就是属于这个图像标签的特性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>src</code></td><td style="text-align:center">图片路径</td><td>必须属性</td></tr><tr><td style="text-align:center"><code>alt</code></td><td style="text-align:center">文本</td><td>替换文本。图像不能显示的文字</td></tr><tr><td style="text-align:center"><code>title</code></td><td style="text-align:center">文本</td><td>提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td style="text-align:center"><code>width</code></td><td style="text-align:center">像素</td><td>设置图像的宽度</td></tr><tr><td style="text-align:center"><code>height</code></td><td style="text-align:center">像素</td><td>设置图像的高度</td></tr><tr><td style="text-align:center"><code>border</code></td><td style="text-align:center">像素</td><td>设置图像的边框粗细</td></tr></tbody></table><p><strong>注意点</strong>：</p><ul><li><p>图像标签可以拥有<strong>多个</strong>属性，<strong>必须写在标签名的后面</strong>。</p></li><li><p>属性之间<strong>不分先后顺序</strong>，标签名与属性、属性与属性之间均以<strong>空格分开</strong>。</p></li><li><p>属性采取<strong>键值对的格式</strong>，即 key=“value&quot; 的格式，属性 =“属性值”。</p></li></ul><p>**相对路径：**以引用文件所在位置为参考基础，而建立出的目录路径。这里简单来说，<strong>图片相对于 HTML 页面的位置</strong></p><table><thead><tr><th style="text-align:center">相对路径分类</th><th style="text-align:center">符号</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">同一级路径</td><td style="text-align:center"></td><td>图像文件位于HTML文件同一级 如<code>&lt;img src=&quot;baidu.gif&quot; /&gt;</code></td></tr><tr><td style="text-align:center">下一级路径</td><td style="text-align:center"><code>/</code></td><td>图像文件位于HTML文件下一级 如<code>&lt;img src=&quot;images/baidu.gif&quot; /&gt;</code></td></tr><tr><td style="text-align:center">上一级路径</td><td style="text-align:center"><code>../</code></td><td>图像文件位于HTML文件上一级 如<code>&lt;img src=&quot;../baidu.gif&quot; /&gt;</code></td></tr></tbody></table><p>**绝对路径：**是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</p><h3 id="6、超链接标签">6、超链接标签</h3><p>在 HTML 标签中，<code>&lt;a&gt;</code>标签用于定义超链接，作用是从一个页面链接到另一个页面。</p><p>单词 <strong>anchor</strong> [ˈæŋkə®] 的缩写，意为：锚。</p><p><strong>语法格式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>href</code></td><td>用于指定链接目标的url地址， (必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td style="text-align:center"><code>target</code></td><td>用于指定链接页面的打开方式，其中<code>_self</code>为默认值，<code> _blank</code>为在新窗口中打开方式。</td></tr></tbody></table><p><strong>链接分类</strong>:</p><ol><li><p>外部链接: 例如 <code>&lt;a href=&quot;http:// www.baidu.com &quot;&gt;百度&lt;/a&gt;</code>。</p></li><li><p>内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 <code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code>。</p></li><li><p>空链接: 如果当时没有确定链接目标时，<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code> 。</p></li><li><p>下载链接: <strong>如果 href 里面地址是一个文件或者压缩包，会下载这个文件</strong>。</p></li><li><p>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.</p></li><li><p><strong>锚点链接</strong>: 点我们点击链接,可以快速定位到页面中的某个位置.</p><ul><li>在链接文本的 href 属性中，设置属性值为<code>#名字</code>的形式，如：<code>&lt;a href=&quot;#two&quot;&gt; 第2集 &lt;/a&gt;</code></li><li>找到目标位置标签，里面添加一个 <code>id 属性 = 刚才的名字</code> ，如：<code>&lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt; </code></li></ul></li></ol><h3 id="7、注释">7、注释</h3><p>如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><p>HTML中的注释以“<code>&lt;!--</code>”开头，以“<code> --&gt;</code>”结束。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是一个注释语句 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8、特殊符号">8、特殊符号</h3><p>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p><p><strong>重点记住：空格 、大于号、 小于号</strong> 这三个， 其余的使用很少，如果需要回头查阅即可</p><table><thead><tr><th style="text-align:center">特殊字符</th><th style="text-align:center">描述</th><th style="text-align:center">字符代码</th></tr></thead><tbody><tr><td style="text-align:center">&quot; &quot;</td><td style="text-align:center"><strong>空格</strong></td><td style="text-align:center">``</td></tr><tr><td style="text-align:center">“&lt;”</td><td style="text-align:center"><strong>小于号</strong></td><td style="text-align:center"><code>&amp;lt;</code></td></tr><tr><td style="text-align:center">“&gt;”</td><td style="text-align:center"><strong>大于号</strong></td><td style="text-align:center"><code>&amp;gt;</code></td></tr><tr><td style="text-align:center">“&amp;”</td><td style="text-align:center">和号</td><td style="text-align:center"><code>&amp;amp;</code></td></tr><tr><td style="text-align:center">“¥”</td><td style="text-align:center">人名币</td><td style="text-align:center"><code>&amp;yen;</code></td></tr><tr><td style="text-align:center">“©”</td><td style="text-align:center">版权</td><td style="text-align:center"><code>&amp;copy;</code></td></tr><tr><td style="text-align:center">“®”</td><td style="text-align:center">注册商标</td><td style="text-align:center"><code>&amp;reg;</code></td></tr><tr><td style="text-align:center">“°”</td><td style="text-align:center">摄氏度</td><td style="text-align:center"><code>&amp;deg;</code></td></tr><tr><td style="text-align:center">“±”</td><td style="text-align:center">正负号</td><td style="text-align:center"><code>&amp;plusmn;</code></td></tr><tr><td style="text-align:center">“×”</td><td style="text-align:center">乘号</td><td style="text-align:center"><code>&amp;times;</code></td></tr><tr><td style="text-align:center">“÷”</td><td style="text-align:center">除号</td><td style="text-align:center"><code>&amp;divide;</code></td></tr><tr><td style="text-align:center">“²”</td><td style="text-align:center">平方</td><td style="text-align:center"><code>&amp;sup2;</code></td></tr><tr><td style="text-align:center">“³”</td><td style="text-align:center">立方</td><td style="text-align:center"><code>&amp;sup3;</code></td></tr></tbody></table><h2 id="五、HTML其他常用标签">五、HTML其他常用标签</h2><h3 id="1、表格标签">1、表格标签</h3><h4 id="1-1、表格标签">1.1、表格标签</h4><p>建议：表格不是用来布局页面的,而是用来<strong>展示数据</strong>的</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         ...</span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;table&gt;&lt;/table&gt;</code>是用于定义<strong>表格</strong>的标签。</p></li><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code>标签用于定义表格中的<strong>行</strong>，必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中。</p></li><li><p><code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的<strong>单元格</strong>，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</p></li><li><p>字母 td 指表格数据（<strong>table data</strong>），即数据单元格的内容。</p></li></ol><h4 id="1-2、表头单元格标签">1.2、表头单元格标签</h4><p><strong>一般</strong>表头单元格位于表格的第一<strong>行或第一列</strong>，表头单元格里面的文本内容<strong>加粗居中显示</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         ...</span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、表格标签属性">1.3、表格标签属性</h4><p>表格标签这部分属性我们实际开发我们<strong>不常用</strong>，后面通过 CSS 来设置</p><table><thead><tr><th style="text-align:center">属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>align</code></td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td style="text-align:center"><code>border</code></td><td>1 或 “”</td><td>规定表格单元是否拥有边框，默认为””，表示没有边框</td></tr><tr><td style="text-align:center"><code>cellpadding</code></td><td>像素值</td><td>规定单元边沿与其内容之间的空白，<strong>默认1像素</strong></td></tr><tr><td style="text-align:center"><code>cellspacing</code></td><td>像素值</td><td>规定单元格之间的空白，<strong>默认2像素</strong></td></tr><tr><td style="text-align:center"><code>width</code></td><td>像素值 或 百分比</td><td>规定表格的宽度</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_21-46-02.png" alt=""></p><h4 id="1-4、表格结构标签">1.4、表格结构标签</h4><p>使用场景:因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分。</p><p>在表格标签中，分别用：<code>&lt;thead&gt;</code>标签表格的<strong>头部区域</strong>、<code>&lt;tbody&gt;</code>标签表格的<strong>主体区域</strong>. 这样可以更好的分清表格结构。</p><ol><li><p><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。<code>&lt;thead&gt;</code> 内部必须拥有 <code>&lt;tr&gt;</code> 标签。 一般是位于第一行。</p></li><li><p><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体 。</p></li><li><p>以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5、合并单元格">1.5、合并单元格</h4><ul><li><p>跨行合并：<strong>rowspan</strong>=“合并单元格的个数”，最上侧单元格为目标单元格, 写合并代码</p></li><li><p>跨列合并：<strong>colspan</strong>=“合并单元格的个数”，最左侧单元格为目标单元格, 写合并代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;3&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;7&lt;/td&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_22-03-32.png" alt=""></p><p><strong>一共三步：</strong></p><ol><li><p>先确定是跨行还是跨列合并。</p></li><li><p>找到目标单元格. 写上合并方式 = 合并的单元格数量。比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</p></li><li><p>删除多余的单元格。</p></li></ol><h3 id="2、列表标签">2、列表标签</h3><p>表格是用来显示数据的，那么<strong>列表就是用来布局的</strong>。</p><p>列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。</p><p>根据使用情景不同，列表可以分为三大类：<strong>无序列表</strong>、<strong>有序列表</strong>和<strong>自定义列表</strong>。</p><h4 id="2-1、无序列表">2.1、无序列表</h4><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使<code>&lt;li&gt;</code> 标签定义。</p><p>基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。</p></li><li><p><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</p></li><li><p><code>&lt;li&gt; 与 &lt;/li&gt;</code> 之间相当于一个容器，可以容纳所有元素。</p></li><li><p>无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS</p></li></ol><h4 id="2-2、有序列表">2.2、有序列表</h4><p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。</p><p>在 HTML 标签中，<code>&lt;ol&gt;</code> 标签用于定义有序列表，列表排序以数字来显示，并且使用 <code>&lt;li&gt;</code> 标签来定义列表项。</p><p>基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</p></li><li><p><code>&lt;li&gt; 与 &lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</p></li><li><p>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</p></li></ol><h4 id="2-3、自定义列表">2.3、自定义列表</h4><p>自定义列表的使用场景：自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p>在 HTML 标签中，<code>&lt;dl&gt;</code> 标签用于定义描述列表（或定义列表），该标签会与 <code>&lt;dt&gt;</code>（定义项目/名字）和<code>&lt;dd&gt;</code>（描述每一个项目/名字）一起使用。</p><p>基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;dl&gt;&lt;/dl&gt;</code> 里面只能包含 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>。</p></li><li><p><code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code> 对应多个<code>&lt;dd&gt;</code>。</p></li></ol><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/web/html/Snipaste_2023-01-27_22-19-09.png" alt=""></p><h3 id="3、表单标签">3、表单标签</h3><p>在 HTML 中，一个完整的表单通常由<strong>表单域</strong>、<strong>表单控件</strong>（也称为表单元素）和 <strong>提示信息</strong>3个部分构成</p><h4 id="3-1、表单域">3.1、表单域</h4><p><strong>表单域</strong>是一个包含表单元素的区域。</p><p>在 HTML 标签中， <code>&lt;form&gt;</code> 标签用于定义表单域，以实现用户信息的收集和传递。</p><p><code>&lt;form&gt;</code> <strong>会把它范围内的表单元素信息提交给服务器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>&quot;&gt;</span></span><br><span class="line">     各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>action</code></td><td style="text-align:center">url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td style="text-align:center"><code>method</code></td><td style="text-align:center">get / post</td><td>用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td style="text-align:center"><code>name</code></td><td style="text-align:center">名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><h4 id="3-2、表单控件-表单元素">3.2、表单控件(表单元素)</h4><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p><ul><li><code>&lt;input /&gt;</code></li></ul><p>在英文单词中，input 是输入的意思，而在表单元素中 <code>&lt;input&gt;</code> 标签用于收集用户信息。</p><p>在 <code>&lt;input&gt;</code> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>type属性</strong>的属性值及其描述如下：</p><table><thead><tr><th style="text-align:center">属性值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>button</code></td><td>定义可点击按钮 (多数情况下，用于通过JavaScript 启动脚本)。</td></tr><tr><td style="text-align:center"><code>checkbox</code></td><td>定义复选框。</td></tr><tr><td style="text-align:center"><code>file</code></td><td>定义输入字段和“浏览”按钮，供文件上传。</td></tr><tr><td style="text-align:center"><code>hidden</code></td><td>定义隐藏的输入字段。</td></tr><tr><td style="text-align:center"><code>image</code></td><td>定义图像形式的提交按钮。</td></tr><tr><td style="text-align:center"><code>password</code></td><td>定义密码字段。该字段中的字符被掩码。</td></tr><tr><td style="text-align:center"><code>radio</code></td><td>定义单选按钮。</td></tr><tr><td style="text-align:center"><code>reset</code></td><td>定义重置按钮。重置按钮会清除表单中的所有数据。</td></tr><tr><td style="text-align:center"><code>sumbit</code></td><td>定义提交按钮。提交按钮会把表单数据发送到服务器</td></tr><tr><td style="text-align:center"><code>text</code></td><td>定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符</td></tr></tbody></table><p>除 type 属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，<strong>其常用属性如下</strong>：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>name</code></td><td style="text-align:center">由用户自定义</td><td>定义input元素的名称</td></tr><tr><td style="text-align:center"><code>value</code></td><td style="text-align:center">由用户自定义</td><td>规定input元素的值</td></tr><tr><td style="text-align:center"><code>checked</code></td><td style="text-align:center">checked</td><td>规定此input元素首次加载时应当被选中</td></tr><tr><td style="text-align:center"><code>maxlength</code></td><td style="text-align:center">正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><ol><li><p>name 和value 是每个表单元素都有的属性值,主要给后台人员使用.</p></li><li><p>name 表单元素的名字, 要求 <strong>单选按钮和复选框要有相同的name值</strong>.</p></li><li><p><strong>checked属性主要针对于单选按钮和复选框</strong>, 主要作用一打开页面,就要可以默认选中某个表单元素.</p></li><li><p>maxlength 是用户可以在表单元素输入的最大字符数, 一般较少使用.</p></li></ol><p>页面中的表单元素很多，<strong>如何区别不同的表单元素</strong>?</p><p>答: name 属性：当前 input 表单的名字，后台可以通过这个 name 属性找到这个表单。页面中的表单很多，name 的主要作用就是用于区别不同的表单</p><ul><li><code>&lt;label&gt;</code></li></ul><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注（标签）。</p><p><code>&lt;label&gt;</code> 标签用于绑定一个表单元素, 当点击<code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>核心： <code>&lt;label&gt;</code> 标签的 <code>for</code> 属性应当与相关元素的 id 属性<strong>相同</strong>。</p><ul><li><code>&lt;select&gt;</code></li></ul><p>使用场景: 在页面中，如果有<strong>多个选项</strong>让用户选择，并且想要<strong>节约页面空间</strong>时，我们可以使用<code>&lt;select&gt;</code>标签控件定义下拉列表。</p><p>基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;select&gt;</code> 中至少包含一对<code>&lt;option&gt;</code> 。</p></li><li><p>在<code>&lt;option&gt;</code> 中定义 <code>selected =“selected&quot;</code> 时，当前项即为默认选中项。</p></li></ol><ul><li><code> &lt;textarea&gt;</code></li></ul><p>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 <code>&lt;textarea&gt;</code> 标签。</p><p>在表单元素中，<code>&lt;textarea&gt;</code> 标签是用于定义多行文本输入的控件。</p><p>使用多行文本输入控件，可以输入更多的文字，该控件常见于<strong>留言板</strong>，<strong>评论</strong>。</p><p>基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>通过 <code>&lt;textarea&gt;</code> 标签可以轻松地创建多行文本输入框。</p></li><li><p><code>cols=“每行中的字符数”</code> ，<code>rows=“显示的行数”</code>，我们在<strong>实际开发中不会使用，都是用 CSS 来改变大小</strong>。</p></li></ol><h2 id="六、HTML5新特性">六、HTML5新特性</h2><blockquote><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些<strong>新的标签、新的表单</strong>和<strong>新的表单属性</strong>等。</p><p>这些新特性都有兼容性问题，基本是 IE9+ 以上版本的浏览器才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p><p>声明：新特性增加了很多，但是本节内容专注于开发常用的新特性。</p></blockquote><h3 id="1、新增的语义化标签">1、新增的语义化标签</h3><p>背景：以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的。</p><p>新增的<strong>语义化</strong>标签：</p><ul><li><code>&lt;header&gt;</code>：头部标签</li><li><code>&lt;nav&gt;</code>：导航标签</li><li><code>&lt;article&gt;</code>：内容标签</li><li><code>&lt;section&gt;</code>：定义文档某个区域</li><li><code>&lt;aside&gt;</code>：侧边栏标签</li><li><code>&lt;footer&gt;</code>：尾部标签</li></ul><p><img src="C:/Users/GGW_2021/Desktop/%E7%AC%94%E8%AE%B0/web/html/images/Snipaste_2023-02-05_10-42-35.png" alt=""></p><p><strong>注意：</strong></p><ul><li>这种语义化标准主要是针对<strong>搜索引擎</strong>的</li><li>这些新标签页面中可以使用<strong>多次</strong></li><li>在 IE9 中，需要把这些元素转换为<strong>块级元素</strong></li><li>其实，我们移动端更喜欢使用这些标签</li><li>HTML5 还增加了很多其他标签，我们后面再慢慢学</li></ul><h3 id="2、新增的多媒体标签">2、新增的多媒体标签</h3><p>新增的多媒体标签主要包含两个：</p><ol><li><p>音频：<code>&lt;audio&gt;</code></p></li><li><p>视频：<code>&lt;video&gt; </code></p></li></ol><p>使用它们可以很方便的在页面中嵌入音频和视频，而不再去使用 flash 和其他浏览器插件。</p><h4 id="2-1、-视频-video">2.1、 视频&lt;video&gt;</h4><p>HTML5 在不使用插件的情况下，也可以原生的支持视频格式文件的播放，当然，支持的格式是有限的。</p><p>当前 <code>&lt;video&gt;</code> 元素支持三种视频格式： (尽量使用 mp4 格式)</p><table><thead><tr><th style="text-align:center">浏览器</th><th style="text-align:center">MP4</th><th style="text-align:center">WebM</th><th style="text-align:center">Ogg</th></tr></thead><tbody><tr><td style="text-align:center">Internet Explorer</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">Chrome</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">Firefox</td><td style="text-align:center">yes<br />从Firefox 21版本开始<br />Linux系统从Firefox 30开始</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">Safari</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:center">yes<br />从Opera 25版本开始</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr></tbody></table><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>兼容写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">     您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：浏览器是否支持ogg格式，不支持的话看是否支持MP4格式，都不支持显示：”您的浏览器暂不支持 <code>&lt;video&gt;</code> 标签播放视频“。</p><p><strong>常见属性</strong></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">autoplay</td><td style="text-align:center">autoplay</td><td>视频就绪自动播放 (谷歌浏览器需要添加muted来解决自动播放问题</td></tr><tr><td style="text-align:center">controls</td><td style="text-align:center">controls</td><td>向用户显示播放控件</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">pixels(像素)</td><td>设置播放器高度</td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center">loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td style="text-align:center">preload</td><td style="text-align:center">preload</td><td>规定是否预加载视频(如果有了autoplay 就忽略该属性</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">url</td><td>视频url地址</td></tr><tr><td style="text-align:center">poster</td><td style="text-align:center">imgurl</td><td>加载等待的画面图片</td></tr><tr><td style="text-align:center">muted</td><td style="text-align:center">muted</td><td>静音播放</td></tr></tbody></table><h4 id="2-2、音频-audio">2.2、音频&lt;audio&gt;</h4><p>HTML5 在不使用插件的情况下，也可以原生的支持音频格式文件的播放，当然，支持的格式是有限的。</p><p>当前 <code>&lt;audio&gt;</code> 元素支持三种音频格式：</p><table><thead><tr><th style="text-align:center">浏览器</th><th style="text-align:center">MP4</th><th style="text-align:center">WebM</th><th style="text-align:center">Ogg</th></tr></thead><tbody><tr><td style="text-align:center">Internet Explorer</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">Chrome</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">Firefox</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">Safari</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr></tbody></table><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>兼容写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：浏览器是否支持mpeg格式，不支持的话看是否支持ogg格式，都不支持显示：”您的浏览器暂不支持 <code>&lt;audio&gt;</code> 标签播放视频“。</p><p><strong>常见属性</strong></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">autoplay</td><td style="text-align:center">autoplay</td><td>如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td style="text-align:center">controls</td><td style="text-align:center">controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center">loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">url</td><td>要播放的音频的 URL</td></tr></tbody></table><p><strong>谷歌浏览器把音频和视频自动播放禁止了</strong></p><p><strong>3、多媒体标签总结</strong></p><ul><li>音频标签和视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li>谷歌浏览器把音频和视频自动播放禁止了</li><li>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li><li>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li></ul><h3 id="3、新增的-input-类型">3、新增的 input 类型</h3><p>重点记住： number tel search 这三个。</p><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">type=“<code>email</code>”</td><td style="text-align:left">限制用户输入必须为Email类型</td></tr><tr><td style="text-align:center">type=“<code>url</code>”</td><td style="text-align:left">限制用户输入必须为URL类型</td></tr><tr><td style="text-align:center">type=“<code>date</code>”</td><td style="text-align:left">限制用户输入必须为日期类型</td></tr><tr><td style="text-align:center">type=“<code>time</code>”</td><td style="text-align:left">限制用户输入必须为时间类型</td></tr><tr><td style="text-align:center">type=“<code>month</code>”</td><td style="text-align:left">限制用户输入必须为月类型</td></tr><tr><td style="text-align:center">type=“<code>week</code>”</td><td style="text-align:left">限制用户输入必须为周类型</td></tr><tr><td style="text-align:center"><strong>type=</strong>“<code>number</code>”</td><td style="text-align:left"><strong>限制用户输入必须为数字类型</strong></td></tr><tr><td style="text-align:center"><strong>type=</strong>“<code>tel</code>”</td><td style="text-align:left"><strong>手机号码</strong></td></tr><tr><td style="text-align:center"><strong>type=</strong>“<code>search</code>”</td><td style="text-align:left"><strong>搜索框</strong></td></tr><tr><td style="text-align:center">type=“<code>color</code>”</td><td style="text-align:left">生成一个颜色选择表单</td></tr></tbody></table><h3 id="4、新增的表单属性">4、新增的表单属性</h3><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">required</td><td style="text-align:center">required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td style="text-align:center"><strong>placeholder</strong></td><td style="text-align:center">提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td style="text-align:center">autofocus</td><td style="text-align:center">autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td style="text-align:center">autocomplete</td><td style="text-align:center">off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项；默认已经打开，如 autocomplete=&quot;on“，关闭 autocomplete =“off”；需要放在表单内，同时加上 name 属性，同时成功提交</td></tr><tr><td style="text-align:center"><strong>multiple</strong></td><td style="text-align:center">multiple</td><td>可以多选文件提交</td></tr></tbody></table><p><strong>可以通过以下设置方式修改placeholder里面的字体颜色：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、查阅文档">七、查阅文档</h2><p>授人以鱼不如授人以渔</p><p><a href="http://www.w3school.com.cn/">【W3C】</a></p><p><a href="https://developer.mozilla.org/zh-CN/">【MDN】</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2023/01/26/git/"/>
      <url>/2023/01/26/git/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git概述">一、Git概述</h2><blockquote><p>  Git 是一个<strong>免费的</strong>、<strong>开源的分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种 项目。</p><p>  Git 易于学习，占地面积小，性能极快。 它具有<strong>廉价的本地库</strong>，方便的暂存区域和多个工作 流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p></blockquote><p><a href="https://git-scm.com/">【官网】</a></p><h3 id="1、什么是版本控制">1、什么是版本控制</h3><blockquote><p>  版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>  版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本， 方便版本切换。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-32-13.png" alt=""></p><h3 id="2、为什么需要版本控制">2、为什么需要版本控制</h3><p>个人开发过渡到团队协作。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-33-57.png" alt=""></p><h3 id="3、版本控制工具">3、版本控制工具</h3><ul><li><strong>集中式版本控制工具</strong></li></ul><p>   CVS、<strong>SVN(Subversion)</strong> 、VSS……</p><p>  集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存 所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或 者提交更新。多年以来，这已成为版本控制系统的标准做法。</p><p>  这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什 么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要 远比在各个客户端上维护本地数据库来得轻松容易。</p><p>  事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕 机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-40-20.png" alt=""></p><ul><li><strong>分布式版本控制工具</strong></li></ul><p>  <strong>Git</strong>、Mercurial、Bazaar、Darcs……</p><p>  像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码 仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用 其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次 对整个文件仓库的完整备份。</p><p>  分布式的版本控制系统出现之后，解决了<strong>集中式版本控制系统的缺陷</strong>:</p><p>    服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</p><p>    每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-42-49.png" alt=""></p><h3 id="4、Git简史">4、Git简史</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-46-46.png" alt=""></p><h3 id="5、Git工作机制">5、Git工作机制</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_18-56-26.png" alt=""></p><h3 id="6、Git和代码托管中心">6、Git和代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为<strong>远程库</strong>。</p><p>局域网</p><ul><li>GitLab</li></ul><p>互联网</p><ul><li>GitHub（外网）</li><li>Gitee 码云（国内网站）</li></ul><h2 id="二、Git安装">二、Git安装</h2><p><a href="https://git-scm.com/">【官网下载】</a></p><p>1、查看 <strong>GNU</strong> 协议，可以直接点击下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-03-04.png" alt=""></p><p>2、选择 Git 安装位置，要求是<strong>非中文并且没有空格</strong>的目录，然后下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-04-41.png" alt=""></p><p>3、Git 选项配置，<strong>推荐默认设置</strong>，然后下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-05-43.png" alt=""></p><p>4、Git 安装目录名，<strong>不用修改</strong>，直接点击下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-06-49.png" alt=""></p><p>5、Git 的默认编辑器，<strong>建议使用默认的 Vim 编辑器</strong>，然后点击下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-07-53.png" alt=""></p><p>6、<strong>默认分支名设置</strong>，选择让 Git 决定，分支名<strong>默认为 master</strong>，下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-08-42.png" alt=""></p><p>7、修改 Git 的环境变量，选第一个，不修改环境变量，<strong>只在 Git Bash 里使用 Git</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-09-42.png" alt=""></p><p>8、选择后台客户端连接协议，<strong>选默认值 OpenSSL</strong>，然后下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-10-25.png" alt=""></p><p>9、配置 Git 文件的行末换行符，Windows 使用 CRLF，Linux 使用 LF，<strong>选择第一个自动转换</strong>，然后继续下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-11-22.png" alt=""></p><p>10、选择 Git 终端类型，选择<strong>默认的 Git Bash 终端</strong>，然后继续下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-12-17.png" alt=""></p><p>11、选择 Git pull 合并的模式，<strong>选择默认</strong>，然后下一步。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-13-03.png" alt=""></p><p>12、选择 Git 的凭据管理器，<strong>选择默认</strong>的跨平台的凭据管理器，然后下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-13-54.png" alt=""></p><p>13、其他配置，<strong>选择默认</strong>设置，然后下一步</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-14-37.png" alt=""></p><p>14、实验室功能，技术还不成熟，有已知的 bug，<strong>不要勾选</strong>，然后点击右下角的 Install 按钮，开始安装 Git。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-15-25.png" alt=""></p><p>15、点击 Finsh 按钮，<strong>Git 安装成功</strong>！</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-16-11.png" alt=""></p><p>16、右键任意位置，在右键菜单里选择 Git Bash Here 即可打开 Git Bash 命令行终端</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-18-13.png" alt=""></p><p>17、在 Git Bash 终端里输入 <code>git --version</code> 查看 git 版本，如图所示，说明 Git 安装成功。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_19-21-32.png" alt=""></p><h2 id="三、Git常用命令">三、Git常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git config --global user.name 用户名</code></td><td>设置用户签名</td></tr><tr><td><code>git config --global user.email 邮箱</code></td><td>设置用户签名</td></tr><tr><td><code>git init</code></td><td>初始化本地仓库</td></tr><tr><td><code>git status</code></td><td>查看本地仓库状态</td></tr><tr><td><code>git add</code></td><td>添加到暂存区</td></tr><tr><td><code>git commit -m &quot;日志信息&quot; 文件名</code></td><td>提交到本地库</td></tr><tr><td><code>git reflog</code></td><td>查看历史记录</td></tr><tr><td><code>git reset --hard 版本号</code></td><td>版本穿梭</td></tr></tbody></table><h3 id="1、设置或修改用户签名">1、设置或修改用户签名</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure><p>查看用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>说明：</p><p>  签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看 到，以此确认本次提交是谁做的。<strong>Git 首次安装必须设置一下用户签名，否则无法提交代码</strong>。</p><p><strong>注意</strong>：这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号<strong>没有任何关系</strong>。</p><h3 id="2、初始化本地库">2、初始化本地库</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-00-42.png" alt=""></p><h3 id="3、查看本地库状态">3、查看本地库状态</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-09-05.png" alt=""></p><h3 id="4、添加暂存区">4、添加暂存区</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-11-59.png" alt=""></p><h3 id="5、提交本地库">5、提交本地库</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;日志信息&quot;</span> 文件名</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-18-19.png" alt=""></p><h3 id="6、修改文件再查看状态">6、修改文件再查看状态</h3><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-24-17.png" alt=""></p><p>git add -&gt; git commit后，本地库状态变为 没有文件需要提交</p><h3 id="7、查看历史版本">7、查看历史版本</h3><p>基本语法</p><p>查看版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>查看版本详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-30-29.png" alt=""></p><h3 id="8、版本穿梭">8、版本穿梭</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_20-40-01.png" alt=""></p><p>Git 切换版本，底层其实是移动的 HEAD 指针，具体原理如下图所示</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_21-27-26.png" alt=""></p><h2 id="四、Git-分支操作">四、Git 分支操作</h2><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_21-33-39.png" alt=""></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git branch 分支名</code></td><td>创建分支</td></tr><tr><td><code>git branch -v</code></td><td>查看分支</td></tr><tr><td><code>git checkout 分支名</code></td><td>切换分支</td></tr><tr><td><code>git merge 分支名</code></td><td>把指定分支合并到当前分支上</td></tr></tbody></table><h3 id="1、什么是分支">1、什么是分支</h3><p>  在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独 分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时 候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是 一个单独的副本。（分支底层其实也是指针的引用）</p><p><strong>分支的好处</strong>：</p><p>  同时并行推进多个功能开发，提高开发效率。各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><h3 id="2、查看分支">2、查看分支</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_21-44-14.png" alt=""></p><h3 id="3、创建分支">3、创建分支</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_21-47-02.png" alt=""></p><h3 id="4、修改分支">4、修改分支</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_21-54-28.png" alt=""></p><h3 id="5、切换分支">5、切换分支</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-02-50.png" alt=""></p><h3 id="6、合并分支">6、合并分支</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><p><strong>案例：冲突合并</strong></p><p>冲突产生的表现：后面状态为 MERGING</p><p>冲突产生的原因： 合并分支时，两个分支在<strong>同一个文件的同一个位置有两套完全不同的修改</strong>。Git 无法替 我们决定使用哪一个。<strong>必须人为决定</strong>新代码内容。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-18-13.png" alt=""></p><p><strong>解决合并冲突</strong></p><p>1、编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><p>特殊符号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD </span><br><span class="line">当前分支的代码</span><br><span class="line">=======</span><br><span class="line">合并过来的代码 </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br></pre></td></tr></table></figure><p>2、添加到暂存区，提交到本地库，这样就完成了</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-30-49.png" alt=""></p><h3 id="7、创建分支和切换分支图解">7、创建分支和切换分支图解</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-38-16.png" alt=""></p><p>  master、dog其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针。<br>  HEAD 如果指向 master，那么我们现在就在 master 分支上。<br>  HEAD 如果执行 dog，那么我们现在就在 dog 分支上。</p><h2 id="五、团队协作机制">五、团队协作机制</h2><h3 id="1、团队内协作">1、团队内协作</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-49-12.png" alt=""></p><h3 id="2、跨团队协作">2、跨团队协作</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_22-55-05.png" alt=""></p><h2 id="六、github远程库">六、github远程库</h2><h3 id="1、创建仓库">1、创建仓库</h3><p><a href="https://github.com/">【github官网】</a></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_23-03-11.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_23-05-15.png" alt=""></p><h3 id="2、远程仓库操作">2、远程仓库操作</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git remote -V</code></td><td>查看当前所有远程库的别名</td></tr><tr><td><code>git remote add 别名 远程库地址</code></td><td>起别名</td></tr><tr><td><code>git push 别名 分支</code></td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td><code>git clone 远程库地址</code></td><td>将远程仓库的内容克隆到本地</td></tr><tr><td><code>git pull 远程库地址(或别名) 远程分支名</code></td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h3 id="3、邀请加入团队">3、邀请加入团队</h3><p>1、选择邀请合作者</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_23-13-04.png" alt=""></p><p>2、填入想要合作的人</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/git/Snipaste_2023-01-26_23-14-57.png" alt=""></p><p>3、复制地址并发送给这个人（QQ，微信）</p><p>4、这个人点击邀请的链接，接受邀请</p><p>5、这个人可以修改内容并 push 到远程仓库</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-学生学习管理系统</title>
      <link href="/2023/01/19/python-%E5%AD%A6%E6%9C%AF%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/19/python-%E5%AD%A6%E6%9C%AF%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1wD4y1o7AS?t=236.5&amp;p=135">【B站网课】</a></p><p><a href="https://github.com/ggw2021/StudentSystem">【我的项目文件】</a></p><h2 id="一、需求分析">一、需求分析</h2><p><strong>学生信息管理系统应具备的功能</strong></p><ul><li>添加学术以及添加学生的成绩信息</li><li>将学生信息保存到文件中</li><li>修改和删除学生信息</li><li>查询学生信息</li><li>根据学生成绩进行排序</li><li>统计学生的总分</li></ul><h2 id="二、系统设计">二、系统设计</h2><p><strong>系统功能的六个模块</strong></p><ul><li>1、录入学生信息模块</li><li>2、查找学生信息模块</li><li>3、删除学生信息模块</li><li>4、修改学生信息模块</li><li>5、统计学生总人数模块</li><li>6、显示全部学生信息模块</li></ul><p><strong>系统功能</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-03-41.png" alt=""></p><p><strong>业务流程</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-11-50.png" alt=""></p><p><strong>项目文件</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-20-50.png" alt=""></p><h2 id="三、主函数设计">三、主函数设计</h2><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-14-58.png" alt=""></p><p><strong>实现主函数</strong></p><table><thead><tr><th style="text-align:center">编号</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td>退出系统</td></tr><tr><td style="text-align:center">1</td><td>显示所有的学生信息，调用show()函数</td></tr><tr><td style="text-align:center">2</td><td>录入学生信息，调用insert()函数</td></tr><tr><td style="text-align:center">3</td><td>查找学生信息，调用search()函数</td></tr><tr><td style="text-align:center">4</td><td>删除学生信息，调用delete()函数</td></tr><tr><td style="text-align:center">5</td><td>修改学生信息，调用modify()函数</td></tr><tr><td style="text-align:center">6</td><td>统计学生总人数，调用total()函数</td></tr></tbody></table><h3 id="代码">代码</h3><p>在文件<strong><a href="http://studentsystem.py">studentsystem.py</a></strong>中实现</p><p>菜单函数 <strong>menu()</strong> 在infoQuery.py文件中</p><p>内容在<strong>五、信息查询</strong>中</p><h2 id="四、信息管理">四、信息管理</h2><h3 id="1、录入学生信息">1、录入学生信息</h3><p>可以一直添加再退出</p><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-34-57.png" alt=""></p><h3 id="2、删除学生信息">2、删除学生信息</h3><p>删除完成后，将显示所有学生</p><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-41-10.png" alt=""></p><h3 id="3、修改学生信息">3、修改学生信息</h3><p>所有内容均可修改</p><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-43-22.png" alt=""></p><h3 id="代码-2">代码</h3><p>在文件<strong><a href="http://infoMag.py">infoMag.py</a></strong>中实现</p><h2 id="五、信息查询">五、信息查询</h2><h3 id="1、显示所有学生信息">1、显示所有学生信息</h3><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-38-17.png" alt=""></p><h3 id="2、查找学生信息">2、查找学生信息</h3><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-49-25.png" alt=""></p><h3 id="3、统计学生总人数">3、统计学生总人数</h3><p><strong>预期结果</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/studentsMsg/Snipaste_2023-01-19_22-50-45.png" alt=""></p><h4 id="代码-3">代码</h4><p><strong>在文件infoQuery.py中实现</strong></p><h2 id="六、项目打包">六、项目打包</h2><p><strong>安装第三方模块 PyInstall</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyInstaller</span><br></pre></td></tr></table></figure><p>结果需要等待下载安装一段时间</p><p><strong>执行打包操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F 主程序文件</span><br></pre></td></tr></table></figure><p>本项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F studentsystem.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows DOS命令\批处理脚本学习(进行中)</title>
      <link href="/2023/01/14/DOS%E5%91%BD%E4%BB%A4%20%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/14/DOS%E5%91%BD%E4%BB%A4%20%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、带入">一、带入</h2><p><a href="https://www.bilibili.com/video/BV1Qv411q7bN?t=137.3">B站视频</a></p><p>由于脚本中 @ECHO 后面没有参数。而没有 参数的 ECHO, 会把当前脚本 ECHO 命令行的状态(ON/OFF)显示出来，显示出的结果也就是：ECHO is off/ECHO is on.</p><p>解决：加上<code>@echo off</code></p><p><strong>清屏</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure><h2 id="二-、批处理运算操作">二 、批处理运算操作</h2><h3 id="1、算数运算">1、算数运算</h3><p>（1）命令模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> \a 表达式</span><br></pre></td></tr></table></figure><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_00-07-26.png" alt=""></p><p>（2）文本模式</p><p>案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a var = 1 + 2</span><br><span class="line"><span class="built_in">echo</span> %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_00-29-05.png" alt=""></p><h3 id="2、重定向操作运算">2、重定向操作运算</h3><p>（1）&gt;、&gt;&gt; 效果同Linux</p><p>（2）&lt;、&lt;&lt; 效果同Linux</p><p><strong>查看文件内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> 文件</span><br></pre></td></tr></table></figure><p>案例</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_00-35-45.png" alt=""></p><h3 id="3、多命令运算">3、多命令运算</h3><p><code>&amp;&amp;</code>、<code>||</code> 效果同c语言，使用其短路的特性</p><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_00-40-20.png" alt=""></p><h3 id="4、管道运算">4、管道运算</h3><p><strong>查看当前目录下文件和目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p><code>|</code>效果同linux</p><h2 id="三、批处理基本命令">三、批处理基本命令</h2><h3 id="1、命令格式">1、命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令 子命令 参数 操作</span><br></pre></td></tr></table></figure><p>命令帮助查看<code>/?</code>、<code>/help</code></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_00-52-56.png" alt=""></p><h3 id="2、批处理文件接收参数">2、批处理文件接收参数</h3><p>同linux，格式略微不同%n（n个参数）</p><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_01-04-42.png" alt=""></p><h3 id="3、注释">3、注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rem 注释内容</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:: 注释内容</span><br></pre></td></tr></table></figure><h3 id="4、装逼命令提示符窗口">4、装逼命令提示符窗口</h3><p>没啥用</p><p><strong>颜色命令</strong></p><p>先查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color /?</span><br></pre></td></tr></table></figure><p>再自己设置成啥样，修改前景色，背景色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color 0a</span><br></pre></td></tr></table></figure><p>变成黑色背景，绿色字体啦（关掉再开就没了）</p><p><strong>修改标题命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title 标题</span><br></pre></td></tr></table></figure><h3 id="5、时间相关的命令">5、时间相关的命令</h3><p><strong>date</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> /t</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-01-14</span><br></pre></td></tr></table></figure><p><strong>time</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time /t</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01:19</span><br></pre></td></tr></table></figure><h3 id="6、启动命令">6、启动命令</h3><p><strong>start</strong></p><p>运行bat文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start .bat文件</span><br></pre></td></tr></table></figure><p>打开一个title为“hello”的cmd窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="7、调用其他bat文件">7、调用其他bat文件</h3><p>同linux，略有区别</p><p>案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a var = %1 + %2</span><br><span class="line"><span class="built_in">echo</span> %var%</span><br><span class="line">call demo.bat %1</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>结果为</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/windows/Snipaste_2023-01-14_01-42-58.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV1Qv411q7bN?t=8.4&amp;p=13">接着看</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows DOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析numpy、matplotlib、pandas（pandas还没学）</title>
      <link href="/2023/01/10/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/10/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Jt4y1h7Vt?t=1.4">【视频资源】</a></p><h2 id="一、了解数据分析以及环境安装">一、了解数据分析以及环境安装</h2><h3 id="1、流程">1、流程</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-20_16-10-05.png" alt=""></p><h3 id="2、anaconda">2、anaconda</h3><p><a href="https://www.anaconda.com/">【官网下载】</a></p><p>基本上一路next即可，需要修改的地方自己注意</p><p><strong>如果没有配置环境变量的话：</strong></p><p>经典操作：右键此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</p><p>先添加一个变量，内容是安装的目录</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-20_18-46-28.png" alt=""></p><p>然后向path变量中添加</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-20_18-47-38.png" alt=""></p><p>测试是否成功，执行结果出现版本号即为成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda -V</span><br></pre></td></tr></table></figure><h3 id="3、jupyter">3、jupyter</h3><blockquote><p>Jupyter是一个交互式的开发环境，是基于Web的代码笔记本<br>交互性、探索性的高效环境<br>每一步骤都能看到结果，很方便的查看之前的结果</p></blockquote><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>打开：（可以在自己想要的工作目录下输入，只存放相关的为文件，jupyter的根目录就是当前工作路径）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h2 id="二、介绍与安装模块">二、介绍与安装模块</h2><p>以下使用的是清华镜像源</p><ul><li><strong>numpy</strong></li></ul><p>介绍</p><blockquote><p>NumPy 是一个 Python 包。 它代表 “Numeric Python”。 它是一个由<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84&amp;spm=1001.2101.3001.7020">多维数组</a>对象和用于处理数组的例程集合组成的库。</p><p>使用NumPy，开发人员可以执行以下操作：</p><ul><li>数组的算数和逻辑运算。</li><li>傅立叶变换和用于图形操作的例程。</li><li>与线性代数有关的操作。 NumPy 拥有线性代数和随机数生成的内置函数。</li></ul><p>为什么使用NumPy?</p><ul><li>对于同样的数值计算任务，使用Numpy比直接Python代码实现，优点:<ul><li>代码更简洁: Numpy直接以数组、矩阵为粒度计算并且支撑大量的数学函数，而python需要用for循环从底层实现;</li><li>性能更高效: Numpy的数组存储效率和输入输出计算性能，比Python使用List或者嵌套List好很多;<ul><li>注: Numpy的数据存储和Python原生的List是不一样的</li><li>注: <strong>Numpy的大部分代码都是C语言实现的，这是Numpy比纯Python代码高效的原因</strong></li></ul></li></ul></li><li>Numpy是Python各种数据科学类库的基础库<ul><li>比如: Scipy，Scikit-Learn、TensorFlow，pandas等</li></ul></li></ul></blockquote><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy</span><br></pre></td></tr></table></figure><ul><li><strong>pandas</strong><br>介绍</li></ul><blockquote><p><code>pandas</code> 是对表格数据模型在python上的模拟，它有简单的像<code>SQL</code> 对数据的处理，能够方便的在python上实现。</p></blockquote><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure><ul><li><strong>matplotlib</strong></li></ul><p>介绍</p><blockquote><p>Matplotlib 是一个用于在 Python 中绘制数组的 2D 图形库。虽然它起源于模仿 MATLAB 图形命令，但它独立于 MATLAB，可以以 Pythonic 和面向对象的方式使用。虽然 Matplotlib 主要是在纯 Python 中编写的，但它大量使用 NumPy 和其他扩展代码，即使对于大型数组也能提供良好的性能。</p></blockquote><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple matplotlib</span><br></pre></td></tr></table></figure><h2 id="三、numpy">三、numpy</h2><h3 id="1、Ndarray-对象">1、Ndarray 对象</h3><blockquote><ul><li>NumPy 中定义的<strong>最重要的对象</strong>是称为 <code>ndarray</code> 的 N 维数组类型。 它描述<strong>相同类型的元素集合</strong>。 可以使用基于零的索引访问集合中的项目。</li><li><code>ndarray</code>中的每个元素在内存中使用相同大小的块。 <code>ndarray</code>中的每个元素是数据类型对象的对象（称为 <code>dtype</code>）。</li><li>从<code>ndarray</code>对象提取的任何元素（通过切片）由一个数组标量类型的 Python 对象表示。 下图显示了<code>ndarray</code>，数据类型对象（<code>dtype</code>）和数组标量类型之间的关系。<br><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/ndarray.png" alt=""></li></ul></blockquote><p><strong>创建：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>构造器参数：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>object</code></td><td style="text-align:left">任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</td></tr><tr><td style="text-align:center"><code>dtype</code></td><td style="text-align:left">数组的所需数据类型，可选。（默认自动识别）</td></tr><tr><td style="text-align:center"><code>copy</code></td><td style="text-align:left">可选，默认为<code>true</code>，对象是否被复制。</td></tr><tr><td style="text-align:center"><code>order</code></td><td style="text-align:left"><code>C</code>（按行）、<code>F</code>（按列）或 <code>A</code>（任意，默认）。</td></tr><tr><td style="text-align:center"><code>subok</code></td><td style="text-align:left">默认情况下，返回的数组被强制为基类数组。 如果为<code>true</code>，则返回子类。</td></tr><tr><td style="text-align:center"><code>ndmin</code></td><td style="text-align:left">指定返回数组的最小维数。</td></tr></tbody></table><p><strong>案例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;array1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="comment"># --- ndim ---------</span></span><br><span class="line">array2 = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ndmin=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;array2:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line">array3 = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ndmin=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;array3:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br><span class="line"><span class="comment"># --- dtype -----------</span></span><br><span class="line">array4 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=<span class="built_in">complex</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;array4:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array4)</span><br><span class="line"><span class="comment"># --- 数据类型不同的话，则都会转变成内存最大的类型 ---</span></span><br><span class="line">array5 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;array5:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array5)</span><br><span class="line"><span class="comment"># --- copy (默认为True) -------</span></span><br><span class="line">array6 = np.array(array1)</span><br><span class="line"><span class="comment"># array6 = array1.copy()    # 效果相同</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;copy的结果:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array1), <span class="built_in">id</span>(array6))</span><br><span class="line"><span class="comment"># --- subok -------</span></span><br><span class="line">mat = np.mat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])     <span class="comment"># 创建一个矩阵</span></span><br><span class="line">array7 = np.array(mat, subok=<span class="literal">False</span>)</span><br><span class="line">array8 = np.array(mat, subok=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;subok:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;为False:&#x27;</span>, <span class="built_in">type</span>(array7))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;为True:&#x27;</span>, <span class="built_in">type</span>(array8))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">array1:</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [2 3 4]]</span><br><span class="line">array2:</span><br><span class="line">[[1 2 3 4 5]]</span><br><span class="line">array3:</span><br><span class="line">[[[1 2 3 4 5]]]</span><br><span class="line">array4:</span><br><span class="line">[1.+0.j 2.+0.j 3.+0.j]</span><br><span class="line">array5:</span><br><span class="line">[&#x27;1&#x27; &#x27;2&#x27; &#x27;3&#x27;]</span><br><span class="line">copy的结果:</span><br><span class="line">2963333225808 2963506355824</span><br><span class="line">subok:</span><br><span class="line">为True: &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="line">为False: &lt;class &#x27;numpy.matrix&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="2、NumPy-数据类型">2、NumPy - 数据类型</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据类型</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>bool</code></td><td>存储为一个字节的布尔值（真或假）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>int</code></td><td>默认整数，相当于 C 的<code>long</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>intc</code></td><td>相当于 C 的<code>int</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><code>intp</code></td><td>用于索引的整数，相当于 C 的<code>size_t</code>，通常为<code>int32</code>或<code>int64</code></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>int8</code></td><td>字节（-128 ~ 127）</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><code>int16</code></td><td>16 位整数（-32768 ~ 32767）</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center"><code>int32</code></td><td>32 位整数（-2147483648 ~ 2147483647）</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center"><code>int64</code></td><td>64 位整数（-9223372036854775808 ~ 9223372036854775807）</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center"><code>uint8</code></td><td>8 位无符号整数（0 ~ 255）</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center"><code>uint16</code></td><td>16 位无符号整数（0 ~ 65535）</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center"><code>uint32</code></td><td>32 位无符号整数（0 ~ 4294967295）</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center"><code>uint64</code></td><td>64 位无符号整数（0 ~ 18446744073709551615）</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><code>float</code></td><td><code>float64</code>的简写</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center"><code>float16</code></td><td>半精度浮点：符号位，5 位指数，10 位尾数</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center"><code>float32</code></td><td>单精度浮点：符号位，8 位指数，23 位尾数</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center"><code>float64</code></td><td>双精度浮点：符号位，11 位指数，52 位尾数</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center"><code>complex</code></td><td><code>complex128</code>的简写</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center"><code>complex64</code></td><td>复数，由两个 32 位浮点表示（实部和虚部）</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center"><code>complex128</code></td><td>复数，由两个 64 位浮点表示（实部和虚部）</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center"><code>str</code></td><td>字符串类型</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center"><code>string</code></td><td>字符串类型，也就是byte类型</td></tr></tbody></table><p>NumPy 数字类型是<code>dtype</code>（数据类型）对象的实例，每个对象具有唯一的特征。 这些类型可以是<code>np.bool</code>，<code>np.float32</code>等。</p><p><strong>简写</strong></p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">对应类型</th><th style="text-align:center">字符</th><th style="text-align:center">对应类型</th><th style="text-align:center">字符</th><th style="text-align:center">对应类型</th><th style="text-align:center">字符</th><th style="text-align:center">对应类型</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">布尔值</td><td style="text-align:center">i</td><td style="text-align:center">带符号整形</td><td style="text-align:center">u</td><td style="text-align:center">无符号整形</td><td style="text-align:center">f</td><td style="text-align:center">浮点型</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">复数浮点型</td><td style="text-align:center">m</td><td style="text-align:center">时间间隔(timedelta)</td><td style="text-align:center">M</td><td style="text-align:center">日期时间(datatime)</td><td style="text-align:center">O</td><td style="text-align:center">Python对象</td></tr><tr><td style="text-align:center">S, a</td><td style="text-align:center">字符串</td><td style="text-align:center">U</td><td style="text-align:center">Unicode</td><td style="text-align:center">V</td><td style="text-align:center">原始数据类型</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>还可以将两个字符作为参数传给数据类型的构造函数。此时，第一个字符表示数据类型，第二个字符表示该类型在内存中占用的字节数（f2、f4、f8分别表示16、32、64位浮点数）<a href="https://www.bilibili.com/video/BV1Jt4y1h7Vt?t=3.9&amp;p=26">数据类型长度如何选择</a></p><h4 id="数据类型对象-dtype">数据类型对象 (dtype)</h4><blockquote><p>数据类型对象描述了对应于数组的固定内存块的解释，取决于以下方面：</p><ul><li>数据类型（整数、浮点或者 Python 对象）</li><li>数据大小</li><li>字节序（小端或大端）</li><li>在结构化类型的情况下，字段的名称，每个字段的数据类型，和每个字段占用的内存块部分。</li><li>如果数据类型是子序列，它的形状和数据类型。</li></ul><p>字节顺序取决于数据类型的前缀<code>&lt;</code>或<code>&gt;</code>。 <code>&lt;</code>意味着编码是小端（最小有效字节存储在最小地址中）。 <code>&gt;</code>意味着编码是大端（最大有效字节存储在最小地址中）。</p></blockquote><p><code>dtype</code>可由一下<strong>语法构造</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.dtype(<span class="built_in">object</span>, align, copy)</span><br></pre></td></tr></table></figure><p>参数为：</p><ul><li><code>Object</code>：被转换为数据类型的对象。</li><li><code>Align</code>：如果为<code>true</code>，则向字段添加间隔，使其类似 C 的结构体。</li><li><code>Copy</code> ： 生成<code>dtype</code>对象的新副本，如果为<code>flase</code>，结果是内建数据类型对象的引用。</li></ul><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用数组标量类型  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">dt1 = np.dtype(np.int32)</span><br><span class="line"><span class="built_in">print</span>(dt1, <span class="built_in">type</span>(dt1))</span><br><span class="line"><span class="comment"># int8，int16，int32，int64 可替换为等价的字符串 &#x27;i1&#x27;，&#x27;i2&#x27;，&#x27;i4&#x27;，以及其他。</span></span><br><span class="line">dt2 = np.dtype(<span class="string">&#x27;i4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt2, <span class="built_in">type</span>(dt2))</span><br><span class="line"><span class="comment"># 使用端记号</span></span><br><span class="line">dt3 = np.dtype(<span class="string">&#x27;&gt;i4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt3, <span class="built_in">type</span>(dt3))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int32 &lt;class &#x27;numpy.dtype[int32]&#x27;&gt;</span><br><span class="line">int32 &lt;class &#x27;numpy.dtype[int32]&#x27;&gt;</span><br><span class="line">&gt;i4 &lt;class &#x27;numpy.dtype[int32]&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><p>以下示例定义名为 <strong>student</strong> 的<strong>结构化</strong>数据类型，其中包含字符串字段<code>name</code>，<strong>整数字段</strong><code>age</code>和<strong>浮点字段</strong><code>marks</code>。 此<code>dtype</code>应用于<code>ndarray</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 就类似结构体定义</span></span><br><span class="line">student = np.dtype([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S20&#x27;</span>),  (<span class="string">&#x27;age&#x27;</span>,  <span class="string">&#x27;i1&#x27;</span>),  (<span class="string">&#x27;marks&#x27;</span>,  <span class="string">&#x27;f4&#x27;</span>)])</span><br><span class="line"><span class="built_in">print</span>(student)</span><br><span class="line">array = np.array([<span class="built_in">tuple</span>([<span class="string">&#x27;abc&#x27;</span>,  <span class="number">21</span>,  <span class="number">50</span>]),(<span class="string">&#x27;xyz&#x27;</span>,  <span class="number">18</span>,  <span class="number">75</span>)], dtype=student)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;name&#x27;, &#x27;S20&#x27;), (&#x27;age&#x27;, &#x27;i1&#x27;), (&#x27;marks&#x27;, &#x27;&lt;f4&#x27;)]</span><br><span class="line">[(b&#x27;abc&#x27;, 21, 50.) (b&#x27;xyz&#x27;, 18, 75.)]</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array(<span class="built_in">range</span>(<span class="number">10</span>), dtype=<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)   <span class="comment"># 输出为 [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">array2 = np.array(<span class="built_in">range</span>(<span class="number">10</span>), dtype=<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)   <span class="comment"># 输出为 [0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]</span></span><br></pre></td></tr></table></figure><h3 id="3、NumPy-数组属性">3、NumPy - 数组属性</h3><ul><li><code>shape</code></li></ul><p>这一数组属性返回一个包含数组维度的元组，它也可以用于调整数组大小。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(array.shape, <span class="built_in">id</span>(array))</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 调整数组</span></span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array.shape, <span class="built_in">id</span>(array))</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 没有产生新的对象</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(2, 3) 2083924122672</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">(3, 2) 2083924122672</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br></pre></td></tr></table></figure><ul><li><code>reshape()</code></li></ul><p>NumPy 也提供了<code>reshape()</code>函数来调整数组大小。</p><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">    </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) </span><br><span class="line">b = a.reshape(<span class="number">3</span>,<span class="number">2</span>)<span class="comment"># 未改变a</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2] </span><br><span class="line"> [3, 4] </span><br><span class="line"> [5, 6]]</span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维数组  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">24</span>)</span><br><span class="line"><span class="comment"># 现在调整其大小</span></span><br><span class="line">b = a.reshape(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)    <span class="comment"># b 现在拥有三个维度</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[[ 0  1  2]</span><br><span class="line">  [ 3  4  5]</span><br><span class="line">  [ 6  7  8]</span><br><span class="line">  [ 9 10 11]]</span><br><span class="line"></span><br><span class="line"> [[12 13 14]</span><br><span class="line">  [15 16 17]</span><br><span class="line">  [18 19 20]</span><br><span class="line">  [21 22 23]]]</span><br></pre></td></tr></table></figure><ul><li><p><code>ndarray.ndim</code></p><p>这一数组属性返回数组的维数。</p></li><li><p><code>numpy.itemsize</code></p><p>这一数组属性返回数组中每个元素的字节单位长度。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]], dtype=<span class="string">&#x27;i4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.ndim, array.itemsize)   <span class="comment"># 输出为 2 4</span></span><br></pre></td></tr></table></figure><ul><li><p><code>numpy.size</code></p><p>元素总个数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(array.size)<span class="comment"># 输出为 6</span></span><br></pre></td></tr></table></figure><ul><li><p><code>numpy.dtype</code></p><p>元素类型</p></li><li><p><code>numpy.astype()</code></p><p>numpy数据类型转换，返回数据类型修改后的数据，但是原数据类型不变</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayA = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(arrayA.dtype)                 <span class="comment"># 输出为 int32</span></span><br><span class="line">arrayB = arrayA.astype(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayA.dtype, arrayB.dtype)   <span class="comment"># 输出为 int32 float64</span></span><br></pre></td></tr></table></figure><h3 id="4、NumPy-创建数组">4、NumPy - 创建数组</h3><blockquote><p>新的<code>ndarray</code>对象可以通过任何下列数组创建例程或使用低级<code>ndarray</code>构造函数构造。</p></blockquote><ul><li><code>numpy.empty()</code></li></ul><p>它创建指定形状和<code>dtype</code>的未初始化数组。 它使用以下构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>shape</code> 空数组的形状，<strong>整数或整数元组</strong></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>dtype</code> 所需的输出数组类型，可选</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>order</code> <code>'C'</code>为按行的 C 风格数组，<code>'F'</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p><strong>案例</strong></p><p>下面的代码展示空数组的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.empty((<span class="number">3</span>,<span class="number">2</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="comment"># array1 = np.empty([3,2], dtype=int)   # 效果同上</span></span><br><span class="line"><span class="built_in">print</span>(array1)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[22649312    1701344351] </span><br><span class="line"> [1818321759  1885959276] </span><br><span class="line"> [16779776    156368896]]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：数组元素为随机值，因为它们<strong>未初始化</strong>。</p><ul><li><code>numpy.zeros() </code> /  <code>numpy.ones()</code></li></ul><p>返回特定大小，以 0 / 1 填充的新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>Shape</code> 空数组的形状，整数或整数元组</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>Dtype</code> 所需的输出数组类型，可选</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>Order</code> <code>'C'</code>为按行的 C 风格数组，<code>'F'</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.zeros(<span class="number">5</span>)     <span class="comment"># 含有 5 个 0 的数组，默认类型为 float</span></span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">array2 = np.zeros((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line">dt = np.dtype([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S20&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;i4&#x27;</span>)])</span><br><span class="line">array3 = np.zeros((<span class="number">2</span>,<span class="number">2</span>), dtype=dt)</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0. 0. 0. 0. 0.]</span><br><span class="line">[[0. 0.]</span><br><span class="line"> [0. 0.]]</span><br><span class="line">[[(b&#x27;&#x27;, 0) (b&#x27;&#x27;, 0)]</span><br><span class="line"> [(b&#x27;&#x27;, 0) (b&#x27;&#x27;, 0)]]</span><br></pre></td></tr></table></figure><h3 id="5、NumPy-来自现有数据的数组">5、NumPy - 来自现有数据的数组</h3><blockquote><p>这一章中，我们会讨论如何从现有数据创建数组。</p></blockquote><ul><li><code>numpy.asarray()</code></li></ul><p>此函数类似于<code>numpy.array</code>，除了它有较少的参数。 这个例程对于将 Python 序列转换为<code>ndarray</code>非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.asarray(a, dtype=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>a</code> 任意形式的输入参数，比如列表、列表的元组、元组、元组的元组、元组的列表</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>dtype</code> 通常，输入数据的类型会应用到返回的<code>ndarray</code></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>order</code> <code>'C'</code>为按行的 C 风格数组，<code>'F'</code>为按列的 Fortran 风格数组</td></tr></tbody></table><p>下面的例子展示了如何使用<code>asarray</code>函数：</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将列表转换为 ndarray</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">array1 = np.asarray(lst1)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">lst2 = [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line">array2 = np.asarray(lst2)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3]</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.frombuffer()</code></li></ul><p>此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回<code>ndarray</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.frombuffer(buffer, dtype = <span class="built_in">float</span>, count = -<span class="number">1</span>, offset = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>buffer</code> 任何暴露缓冲区借口的对象</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>dtype</code> 返回数组的数据类型，默认为<code>float</code></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>count</code> 需要读取的数据数量，默认为<code>-1</code>，读取所有数据</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>offset</code> 需要读取的起始位置，默认为<code>0</code></td></tr></tbody></table><p><strong>案例</strong></p><p>下面的例子展示了<code>frombuffer</code>函数的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">lst = <span class="string">b&#x27;helloworld&#x27;</span></span><br><span class="line">array = np.frombuffer(lst, dtype=<span class="string">&#x27;S1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b&#x27;h&#x27; b&#x27;e&#x27; b&#x27;l&#x27; b&#x27;l&#x27; b&#x27;o&#x27; b&#x27;w&#x27; b&#x27;o&#x27; b&#x27;r&#x27; b&#x27;l&#x27; b&#x27;d&#x27;]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.fromiter()</code></li></ul><p>此函数从任何可迭代对象构建一个<code>ndarray</code>对象，返回一个新的一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.fromiter(iterable, dtype, count = -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1.</td><td style="text-align:left"><code>iterable</code> 任何可迭代对象</td></tr><tr><td style="text-align:center">2.</td><td style="text-align:left"><code>dtype</code> 返回数组的数据类型</td></tr><tr><td style="text-align:center">3.</td><td style="text-align:left"><code>count</code> 需要读取的数据数量，默认为<code>-1</code>，读取所有数据</td></tr></tbody></table><p>以下示例展示了如何使用内置的<code>range()</code>函数返回列表对象。 此列表的迭代器用于形成<code>ndarray</code>对象。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表中获得迭代器</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">it = <span class="built_in">iter</span>(lst)</span><br><span class="line"><span class="comment"># 使用迭代器创建 ndarray</span></span><br><span class="line"><span class="comment"># iter() 方法是python的内置函数，它可以将字符串、列表、元组等容器变成迭代器</span></span><br><span class="line">x = np.fromiter(it, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment"># 输出为 [0. 1. 2. 3. 4.]</span></span><br></pre></td></tr></table></figure><h3 id="6、NumPy-来自数值范围的数组">6、NumPy - 来自数值范围的数组</h3><blockquote><p>这一章中，我们会学到如何从数值范围创建数组。</p></blockquote><ul><li><code>numpy.arange()</code></li></ul><p>这个函数返回<code>ndarray</code>对象，包含给定范围内的等间隔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>start</code> 范围的起始值，默认为<code>0</code></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>stop</code> 范围的终止值（不包含）</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>step</code> 两个值的间隔，默认为<code>1</code></td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>dtype</code> 返回<code>ndarray</code>的数据类型，如果没有提供，则会使用输入数据的类型。</td></tr></tbody></table><p>下面的例子展示了如何使用该函数：</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)    <span class="comment"># 输出为 [0 1 2 3 4]</span></span><br><span class="line"><span class="comment"># 设置了 dtype</span></span><br><span class="line">array2 = np.arange(<span class="number">5</span>, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)    <span class="comment"># 输出为 [0. 1. 2. 3. 4.]</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.linspace()</code></li></ul><p>此函数类似于<code>arange()</code>函数。 在此函数中，指定了范围之间的均匀间隔数量，而不是步长。 此函数的用法如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.linspace(start, stop, num, endpoint, retstep, dtype)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>start</code> 序列的起始值</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>stop</code> 序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于序列中</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>num</code> 要生成的等间隔样例数量，默认为<code>50</code></td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>endpoint</code> 序列中是否包含<code>stop</code>值，默认为<code>ture</code></td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><code>retstep</code> 如果为<code>true</code>，返回样例，以及连续数字之间的步长</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left"><code>dtype</code> 输出<code>ndarray</code>的数据类型</td></tr></tbody></table><p>下面的例子展示了<code>linspace()</code>函数的用法。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)    <span class="comment"># 输出为 [10.  12.5 15.  17.5 20. ]</span></span><br><span class="line">array2 = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)    <span class="comment"># 输出为 [10. 12. 14. 16. 18.]</span></span><br><span class="line"><span class="comment"># 输出 retstep 值 </span></span><br><span class="line">array3 = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, endpoint=<span class="literal">False</span>, retstep=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(array3)    <span class="comment"># 输出为 (array([10., 12., 14., 16., 18.]), 2.0)</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.logspace()</code></li></ul><p>此函数返回一个<code>ndarray</code>对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.logscale(start, stop, num, endpoint, base, dtype)</span><br></pre></td></tr></table></figure><p><code>logspace</code>函数的输出由以下参数决定：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>start</code> 起始值是<code>base ** start</code>（base：底数）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>stop</code> 终止值是<code>base ** stop</code></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>num</code> 范围内的数值数量，默认为<code>50</code></td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>endpoint</code> 如果为<code>true</code>，终止值包含在输出数组当中</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><code>base</code> 对数空间的底数，默认为<code>10</code></td></tr><tr><td style="text-align:center">6</td><td style="text-align:left"><code>dtype</code> 输出数组的数据类型，如果没有提供，则取决于其它参数</td></tr></tbody></table><p>下面的例子展示了<code>logspace</code>函数的用法。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 默认底数是 10</span></span><br><span class="line"></span><br><span class="line">array1 = np.logspace(<span class="number">1.0</span>,  <span class="number">2.0</span>, num=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="comment"># 设置底数为 2</span></span><br><span class="line">array2 = np.logspace(<span class="number">1</span>, <span class="number">10</span>, num=<span class="number">10</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ 10.          12.91549665  16.68100537  21.5443469   27.82559402</span><br><span class="line">  35.93813664  46.41588834  59.94842503  77.42636827 100.        ]</span><br><span class="line">[   2.    4.    8.   16.   32.   64.  128.  256.  512. 1024.]</span><br></pre></td></tr></table></figure><h3 id="7、NumPy-切片和索引">7、NumPy - 切片和索引</h3><blockquote><p><code>ndarray</code>对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。<br>如前所述，<code>ndarray</code>对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： <strong>字段访问，基本切片</strong>和<strong>高级索引</strong>。</p></blockquote><ul><li><strong>基本切片</strong></li></ul><p>基本切片是 Python 中基本切片概念到 n 维的扩展。 通过将<code>start</code>，<code>stop</code>和<code>step</code>参数提供给内置的<code>slice()</code>函数来构造一个 Python <code>slice()</code>对象。 此<code>slice</code>对象被传递给数组来提取数组的一部分。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">10</span>)</span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array[s])<span class="comment"># 输出为 [2  4  6]</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>ndarray</code>对象由<code>arange()</code>函数创建。 然后，分别用起始，终止和步长值<code>2</code>，<code>7</code>和<code>2</code>定义切片对象。 当这个切片对象传递给<code>ndarray</code>时，会对它的一部分进行切片，从索引<code>2</code>到<code>7</code>，步长为<code>2</code>。</p><ul><li><strong>冒号分隔的切片</strong></li></ul><p>通过将由冒号分隔的切片参数（<code>start:stop:step</code>）直接提供给<code>ndarray</code>对象，也可以获得相同的结果。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">10</span>)</span><br><span class="line">b = array[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]  </span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># 输出为 [2  4  6]</span></span><br></pre></td></tr></table></figure><p>如果只输入一个参数，则将返回与索引对应的单个项目。 如果使用<code>a:</code>，则从该索引向后的所有项目将被提取。 如果使用两个参数（以<code>:</code>分隔），则对两个索引（不包括停止索引）之间的元素以默认步骤进行切片。</p><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 对单个元素进行切片  </span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">5</span>])     <span class="comment"># 输出为 5</span></span><br><span class="line"><span class="comment"># 对始于索引的元素进行切片</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:])    <span class="comment"># 输出为 [2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:<span class="number">5</span>])   <span class="comment"># 输出为 [2  3  4]</span></span><br></pre></td></tr></table></figure><p>上面的描述也可用于多维<code>ndarray</code>。</p><p><strong>案例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 对始于索引的元素进行切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;现在我们从索引 a[1:] 开始对数组切片&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二次索引取得&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[1 2 3]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">现在我们从索引 a[1:] 开始对数组切片</span><br><span class="line">[[3 4 5]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">二次索引取得</span><br><span class="line">[3 4 5]</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>切片还可以包括省略号（<code>...</code>），来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的<code>ndarray</code>。</p><p><strong>案例3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最开始的数组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 这会返回第二列元素的数组：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二列的元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array[...,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 现在我们从第二行切片所有元素：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二行的元素是：&#x27;</span> )</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>,...])</span><br><span class="line"><span class="comment"># 现在我们从第二列向后切片所有元素：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二列及其剩余元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array[...,<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">第二列的元素是：</span><br><span class="line">[2 4 5]</span><br><span class="line">第二行的元素是：</span><br><span class="line">[3 4 5]</span><br><span class="line">第二列及其剩余元素是：</span><br><span class="line">[[2 3]</span><br><span class="line"> [4 5]</span><br><span class="line"> [5 6]]</span><br></pre></td></tr></table></figure><h3 id="8、NumPy-高级索引">8、NumPy - 高级索引</h3><blockquote><p>如果一个<code>ndarray</code>是非元组序列，数据类型为整数或布尔值的<code>ndarray</code>，或者至少一个元素为序列对象的元组，我们就能够用它来索引<code>ndarray</code>。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。</p></blockquote><p>有两种类型的高级索引：整数和布尔值。</p><h4 id="8-1、整数索引">8.1、整数索引</h4><p>这种机制有助于基于 N 维索引来获取数组中任意元素。 每个整数数组表示该维度的下标值。 当索引的元素个数就是目标<code>ndarray</code>的维度时，会变得相当直接。</p><p>以下示例获取了<code>ndarray</code>对象中每一行指定列的一个元素。 因此，行索引包含所有行号，列索引指定要选择的元素。</p><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">res = array[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># (0, 0), (1, 1), (2, 0)，(第几行， 第几列)的值</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 输出为 [1  4  5]</span></span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原数组</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">[1 4 5]</span><br></pre></td></tr></table></figure><p>下面的示例获取了 4X3 数组中的每个角处的元素。 行索引是<code>[0,0]</code>和<code>[3,3]</code>，而列索引是<code>[0,2]</code>和<code>[0,2]</code>。</p><p><strong>案例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">rows1 = np.array([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">cols1 = np.array([[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">res1 = array[rows1, cols1]    <span class="comment"># 行索引，列索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这个数组的每个角处的元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line">cols2 = np.array([<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line">rows2 = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">res2 = array[rows2, cols2]    <span class="comment"># 行索引，列索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这个数组的每个角处的元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line">[[ 0  1  2]</span><br><span class="line"> [ 3  4  5]</span><br><span class="line"> [ 6  7  8]</span><br><span class="line"> [ 9 10 11]]</span><br><span class="line">这个数组的每个角处的元素是：</span><br><span class="line">[[ 0  2]</span><br><span class="line"> [ 9 11]]</span><br><span class="line">这个数组的每个角处的元素是：</span><br><span class="line">[ 0  2  9 11]</span><br></pre></td></tr></table></figure><p>返回的结果是包含每个角元素的<code>ndarray</code>对象。</p><p>高级和基本索引可以通过使用切片<code>:</code>或省略号<code>...</code>与索引数组组合。 以下示例使用<code>slice</code>作为列索引和高级索引。 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局。</p><p><strong>案例3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">res1 = array[<span class="number">1</span>:<span class="number">4</span>, <span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 行切片，列切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;切片之后，我们的数组变为：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="comment"># 对列使用高级索引</span></span><br><span class="line">res2 = array[<span class="number">1</span>:<span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>]]  <span class="comment"># 行切片，列索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对列使用高级索引来切片：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是：</span><br><span class="line">[[ 0  1  2]</span><br><span class="line"> [ 3  4  5]</span><br><span class="line"> [ 6  7  8]</span><br><span class="line"> [ 9 10 11]]</span><br><span class="line">切片之后，我们的数组变为：</span><br><span class="line">[[ 4  5]</span><br><span class="line"> [ 7  8]</span><br><span class="line"> [10 11]]</span><br><span class="line">对列使用高级索引来切片：</span><br><span class="line">[[ 4  5]</span><br><span class="line"> [ 7  8]</span><br><span class="line"> [10 11]]</span><br></pre></td></tr></table></figure><h4 id="8-2、布尔索引">8.2、布尔索引</h4><blockquote><p>当结果对象是布尔运算（例如比较运算符）的结果时，将使用此类型的高级索引。<br>提取出为True的元素</p></blockquote><p><strong>案例1</strong></p><p>这个例子中，大于 5 的元素会作为布尔索引的结果返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们的数组是:&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(array) </span><br><span class="line"><span class="comment"># 现在我们会打印出大于 5 的元素  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;大于 5 的元素是:&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(array[array &gt; <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是:</span><br><span class="line">[[ 0  1  2]</span><br><span class="line"> [ 3  4  5]</span><br><span class="line"> [ 6  7  8]</span><br><span class="line"> [ 9 10 11]]</span><br><span class="line">大于 5 的元素是:</span><br><span class="line">[ 6  7  8  9 10 11]</span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><p>这个例子使用了 <code>~</code>（取补运算符）来过滤<code>NaN</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([np.nan, <span class="number">1</span>, <span class="number">2</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(array[~np.isnan(array)])<span class="comment"># 输出为 [1. 2. 3. 4. 5.]</span></span><br></pre></td></tr></table></figure><p><strong>案例3</strong></p><p>以下示例显示如何从数组中过滤掉非复数元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">1</span>, <span class="number">2</span> + <span class="number">6j</span>, <span class="number">5</span>, <span class="number">3.5</span> + <span class="number">5j</span>])</span><br><span class="line"><span class="built_in">print</span>(array[np.iscomplex(array)])   <span class="comment"># 输出为 [2. +6.j 3.5+5.j]</span></span><br></pre></td></tr></table></figure><p><strong>案例4</strong></p><ul><li><p><code>numpy.argwhere()</code></p><p>该函数返回数组中非 0 元素的索引，若是多维数组则返回行、列索引组成的索引坐标.</p></li></ul><h3 id="9、NumPy-广播">9、NumPy - 广播</h3><blockquote><p>术语<strong>广播</strong>是指 NumPy 在算术运算期间处理不同形状的数组的能力。 对数组的算术运算通常在相应的元素上进行。 如果两个阵列具有完全相同的形状，则这些操作被无缝执行。</p></blockquote><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayA = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">arrayB = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">arrayC = arrayA * arrayB</span><br><span class="line"><span class="built_in">print</span>(arrayC)<span class="comment"># 输出为 [ 10  40  90 160]</span></span><br></pre></td></tr></table></figure><p>如果两个数组的维数不相同，则元素到元素的操作是不可能的。 然而，<strong>在 NumPy 中仍然可以对形状不相似的数组进行操作</strong>，因为它拥有广播功能。 较小的数组会<strong>广播</strong>到较大数组的大小，以便使它们的形状可兼容。</p><p><strong>如果满足以下规则，可以进行广播</strong>：</p><ul><li><code>ndim</code>较小的数组会在前面追加一个长度为 1 的维度。</li><li>输出数组的每个维度的大小是输入数组该维度大小的最大值。</li><li>如果输入在每个维度中的大小与输出大小匹配，或其值正好为 1，则在计算中可它。</li><li>如果输入的某个维度大小为 1，则该维度中的第一个数据元素将用于该维度的所有计算。</li></ul><p>如果上述规则产生有效结果，并且满足以下条件之一，那么数组被称为<strong>可广播的</strong>。</p><ul><li>数组拥有相同形状。</li><li>数组拥有相同的维数，每个维度拥有相同长度，或者长度为 1。</li><li>数组拥有极少的维度，可以在其前面追加长度为 1 的维度，使上述条件成立。</li></ul><p><strong>对于广播规则另一种简单理解</strong></p><ul><li>将两个数组的维度大小右对齐，然后比较对应维度上的数值</li><li>如果数值相等或其中有一个为1或者为空，则能进行广播运算</li><li>输出的维度大小为取数值大的数值。否则不能进行数组运算</li></ul><p><strong>案例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayA = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], [<span class="number">10.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>], [<span class="number">20.0</span>, <span class="number">20.0</span>, <span class="number">20.0</span>], [<span class="number">30.0</span>, <span class="number">30.0</span>, <span class="number">30.0</span>]])</span><br><span class="line">arrayB = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayA)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组加第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayA + arrayB)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[ 0.  0.  0.]</span><br><span class="line"> [10. 10. 10.]</span><br><span class="line"> [20. 20. 20.]</span><br><span class="line"> [30. 30. 30.]]</span><br><span class="line">第二个数组:</span><br><span class="line">[1. 2. 3.]</span><br><span class="line">第一个数组加第二个数组:</span><br><span class="line">[[ 1.  2.  3.]</span><br><span class="line"> [11. 12. 13.]</span><br><span class="line"> [21. 22. 23.]</span><br><span class="line"> [31. 32. 33.]]</span><br></pre></td></tr></table></figure><p>案例2如何通过广播来兼容</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-21_15-32-04.png" alt=""></p><h3 id="10、NumPy-数组上的迭代">10、NumPy - 数组上的迭代</h3><blockquote><p>NumPy 包包含一个迭代器对象<code>numpy.nditer</code>。 它是一个有效的多维迭代器对象，可以用于在数组上进行迭代。 数组的每个元素可使用 Python 的标准<code>Iterator</code>接口来访问。</p></blockquote><p><strong>案例1</strong></p><p>让我们使用<code>arange()</code>函数创建一个 3X4 数组，并使用<code>nditer</code>对它进行迭代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line">a.shape = (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代结果为&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">迭代结果为</span><br><span class="line">0 5 10 15 20 25 30 35 40 45 50 55 </span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><p>迭代的顺序匹配数组的内容布局，而不考虑特定的排序。 这可以通过迭代上述数组的转置来看到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组迭代:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">t = array.T</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n转置后:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转置后的数组是:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(t):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">原数组迭代:</span><br><span class="line">0 5 10 15 20 25 30 35 40 45 50 55 </span><br><span class="line">转置后:</span><br><span class="line">[[ 0 20 40]</span><br><span class="line"> [ 5 25 45]</span><br><span class="line"> [10 30 50]</span><br><span class="line"> [15 35 55]]</span><br><span class="line">转置后的数组是:</span><br><span class="line">0 5 10 15 20 25 30 35 40 45 50 55</span><br></pre></td></tr></table></figure><h4 id="10-1、迭代顺序">10.1、迭代顺序</h4><p>如果相同元素使用 F 风格顺序存储，则迭代器选择以更有效的方式对数组进行迭代。</p><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 C 风格顺序排序:&#x27;</span>)</span><br><span class="line">c = array.copy(order=<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代（C）:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(c):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>),</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n以 F 风格顺序排序:&#x27;</span>)</span><br><span class="line">f = array.copy(order=<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代（F）:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(f):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">以 C 风格顺序排序:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">迭代（C）:</span><br><span class="line">0 5 10 15 20 25 30 35 40 45 50 55 </span><br><span class="line">以 F 风格顺序排序:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">迭代（F）:</span><br><span class="line">0 20 40 5 25 45 10 30 50 15 35 55 </span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><p>可以通过显式提醒，来强制<code>nditer</code>对象使用某种顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 C 风格顺序排序:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n以 F 风格顺序排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">以 C 风格顺序排序:</span><br><span class="line">0 5 10 15 20 25 30 35 40 45 50 55 </span><br><span class="line">以 F 风格顺序排序：</span><br><span class="line">0 20 40 5 25 45 10 30 50 15 35 55 </span><br></pre></td></tr></table></figure><h4 id="10-2、修改数组的值">10.2、修改数组的值</h4><p><code>nditer</code>对象有另一个可选参数<code>op_flags</code>。 其默认值为只读，但可以设置为读写或只写模式。 这将允许使用此迭代器修改数组元素。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">array[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改左上角为2:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代器修改:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(array, op_flags=[<span class="string">&#x27;readwrite&#x27;</span>]):</span><br><span class="line">    <span class="comment"># i = 2 * i     # 这个结果是未得到修改</span></span><br><span class="line">    i[...] = <span class="number">2</span> * i</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">修改左上角为2:</span><br><span class="line">2</span><br><span class="line">迭代器修改:</span><br><span class="line">[[  4  10  20  30]</span><br><span class="line"> [ 40  50  60  70]</span><br><span class="line"> [ 80  90 100 110]]</span><br></pre></td></tr></table></figure><p><strong>测试</strong>上面的案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">2</span>)</span><br><span class="line">array.shape = (<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组为:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组地址元素地址为:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第1个元素:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array[<span class="number">0</span>, <span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array[<span class="number">0</span>, <span class="number">0</span>][...]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第2个元素:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array[<span class="number">1</span>, <span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array[<span class="number">1</span>, <span class="number">0</span>][...]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代器结果:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(array, op_flags=[<span class="string">&#x27;readwrite&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>个元素:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(i[...]))</span><br></pre></td></tr></table></figure><p>结果为：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_16-20-18.png" alt=""></p><h4 id="10-3、外部循环">10.3、外部循环</h4><p><code>nditer</code>类的构造器拥有<code>flags</code>参数，它可以接受下列值：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">参数及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>c_index</code> 可以跟踪 C 顺序的索引</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>f_index</code> 可以跟踪 Fortran 顺序的索引</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>multi-index</code> 每次迭代可以跟踪一种索引类型</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>external_loop</code> 给出的值是具有多个值的一维数组，而不是零维数组</td></tr></tbody></table><p><strong>案例</strong></p><p>在下面的示例中，迭代器遍历对应于每列的一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array.shape = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c_index:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, flags=[<span class="string">&#x27;c_index&#x27;</span>], order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nf_index:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, flags=[<span class="string">&#x27;f_index&#x27;</span>], order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nmulti_index:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, flags=[<span class="string">&#x27;multi_index&#x27;</span>], order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nexternal_loop \&#x27;F\&#x27;:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, flags=[<span class="string">&#x27;external_loop&#x27;</span>], order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nexternal_loop \&#x27;C\&#x27;:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(array, flags=[<span class="string">&#x27;external_loop&#x27;</span>], order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">原始数组是：</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">c_index:</span><br><span class="line">0 20 40 5 25 45 10 30 50 15 35 55 </span><br><span class="line">f_index:</span><br><span class="line">0 20 40 5 25 45 10 30 50 15 35 55 </span><br><span class="line">multi_index:</span><br><span class="line">0 20 40 5 25 45 10 30 50 15 35 55 </span><br><span class="line">external_loop &#x27;F&#x27;:</span><br><span class="line">[ 0 20 40] [ 5 25 45] [10 30 50] [15 35 55] </span><br><span class="line">external_loop &#x27;C&#x27;:</span><br><span class="line">[ 0  5 10 15 20 25 30 35 40 45 50 55] </span><br></pre></td></tr></table></figure><h4 id="10-4、广播迭代">10.4、广播迭代</h4><blockquote><p>如果两个数组是<strong>可广播的</strong>，<code>nditer</code>组合对象能够同时迭代它们。 假设数组<code>a</code>具有维度 3X4，并且存在维度为 1X4 的另一个数组<code>b</code>，则使用以下类型的迭代器（数组<code>b</code>被广播到<code>a</code>的大小）。</p></blockquote><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">array1 = array1.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line">array2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;迭代结果:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> np.nditer([array1, array2]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;x&#125;</span>:<span class="subst">&#123;y&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[ 0  5 10 15]</span><br><span class="line"> [20 25 30 35]</span><br><span class="line"> [40 45 50 55]]</span><br><span class="line">第二个数组:</span><br><span class="line">[1 2 3 4]</span><br><span class="line">迭代结果:</span><br><span class="line">0:1 5:2 10:3 15:4 20:1 25:2 30:3 35:4 40:1 45:2 50:3 55:4 </span><br></pre></td></tr></table></figure><h3 id="11、NumPy-数组操作">11、NumPy - 数组操作</h3><blockquote><p>NumPy包中有几个例程用于处理<code>ndarray</code>对象中的元素。 它们可以分为以下类型：</p></blockquote><h4 id="11-0、NumPy的轴">11.0、NumPy的轴</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_21-48-55.png" alt=""></p><h4 id="11-1、修改形状">11.1、修改形状</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">形状及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>reshape</code> 不改变数据的条件下修改形状</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>flat</code> 数组上的一维迭代器</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>flatten</code> 返回折叠为一维的数组副本</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>ravel</code> 返回连续的展开数组</td></tr></tbody></table><ul><li><code>numpy.reshape()</code></li></ul><p>这个函数在不改变数据的条件下修改形状，它接受如下参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.reshape(arr, newshape, order)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：要修改形状的数组</li><li><code>newshape</code>：整数或者整数数组，新的形状应当兼容原有形状；(-1, 2)，-1表示行自动变化，2表示两列</li><li><code>order</code>：<code>'C'</code>为 C 风格顺序，<code>'F'</code>为 F 风格顺序，<code>'A'</code>为保留原顺序。</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayA = np.arange(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayA)</span><br><span class="line"><span class="comment"># arrayB = arrayA.reshape(2, 4)</span></span><br><span class="line">arrayB = np.reshape(arrayA, (<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后的数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayB)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原始数组:</span><br><span class="line">[0 1 2 3 4 5 6 7]</span><br><span class="line">修改后的数组:</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [4 5 6 7]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.flat</code></li></ul><p>该函数返回数组上的一维迭代器，行为类似 Python 内建的迭代器。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原始数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 flat 函数之后:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.flat)</span><br><span class="line"><span class="comment"># 返回展开数组中的下标的对应元素</span></span><br><span class="line"><span class="built_in">print</span>(array.flat[<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;for-in 迭代:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.flat:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原始数组:</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [4 5 6 7]]</span><br><span class="line">调用 flat 函数之后:</span><br><span class="line">&lt;numpy.flatiter object at 0x000002E0449B2390&gt;</span><br><span class="line">5</span><br><span class="line">for-in 迭代:</span><br><span class="line">0 1 2 3 4 5 6 7 </span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.flatten()</code></li></ul><p>该函数返回折叠为一维的数组副本，函数接受下列参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndarray.flatten(order)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>order</code>：<code>'C'</code> – 按行，<code>'F'</code> – 按列，<code>'A'</code> – 原顺序，<code>'k'</code> – 元素在内存中的出现顺序。</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># default is column-major</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;展开的数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.flatten())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序展开的数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.flatten(order=<span class="string">&#x27;F&#x27;</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [4 5 6 7]]</span><br><span class="line">展开的数组:</span><br><span class="line">[0 1 2 3 4 5 6 7]</span><br><span class="line">以 F 风格顺序展开的数组:</span><br><span class="line">[0 4 1 5 2 6 3 7]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.ravel()</code></li></ul><p>这个函数返回展开的一维数组，并且按需生成副本。返回的数组和输入数组拥有相同数据类型。这个函数接受两个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.ravel(a, order)</span><br></pre></td></tr></table></figure><p>构造器接受下列参数：</p><ul><li><code>order</code>：<code>'C'</code> – 按行，<code>'F'</code> – 按列，<code>'A'</code> – 原顺序，<code>'k'</code> – 元素在内存中的出现顺序。</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 ravel 函数之后:&#x27;</span>)</span><br><span class="line"><span class="comment"># print(a.ravel())  # 效果相同</span></span><br><span class="line"><span class="built_in">print</span>(np.ravel(array))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;以 F 风格顺序调用 ravel 函数之后:&#x27;</span>)</span><br><span class="line"><span class="comment"># print(a.ravel(order=&#x27;F&#x27;))     # 效果相同</span></span><br><span class="line"><span class="built_in">print</span>(np.ravel(array, order=<span class="string">&#x27;F&#x27;</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [4 5 6 7]]</span><br><span class="line">调用 ravel 函数之后:</span><br><span class="line">[0 1 2 3 4 5 6 7]</span><br><span class="line">以 F 风格顺序调用 ravel 函数之后:</span><br><span class="line">[0 4 1 5 2 6 3 7]</span><br></pre></td></tr></table></figure><h4 id="11-2、翻转操作">11.2、翻转操作</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">操作及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>transpose</code> 翻转数组的维度</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>ndarray.T</code> 和<code>self.transpose()</code>相同</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>rollaxis</code> 向后滚动指定的轴</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>swapaxes</code> 互换数组的两个轴</td></tr></tbody></table><ul><li><code>numpy.transpose()</code></li></ul><p>这个函数翻转给定数组的维度。如果可能的话它会返回一个视图。函数接受下列参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.transpose(arr, axes)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：要转置的数组</p><p><code>axes</code>：整数的列表，对应维度，通常所有维度都会翻转。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转置数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(array))</span><br><span class="line"><span class="comment"># print(array.transpose())    # 效果相同</span></span><br><span class="line"><span class="comment"># print(array.T)              # 效果相同</span></span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]]</span><br><span class="line">转置数组:</span><br><span class="line">[[0 3]</span><br><span class="line"> [1 4]</span><br><span class="line"> [2 5]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray.T</code></li></ul><p>该函数属于<code>ndarray</code>类，行为类似于<code>numpy.transpose</code>。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同上</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.rollaxis()</code></li></ul><p>该函数向后滚动特定的轴，直到一个特定位置。这个函数接受三个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.rollaxis(arr, axis, start)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：要向后滚动的轴，其它轴的相对位置不会改变</li><li><code>start</code>：默认为零，表示完整的滚动。会滚动到特定位置。</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建了三维的 ndarray</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 将轴 2 滚动到轴 0（宽度到深度）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 rollaxis 函数:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.rollaxis(array, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 将轴 0 滚动到轴 1:（宽度到高度）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 rollaxis 函数:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.rollaxis(array, <span class="number">2</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[[0 1]</span><br><span class="line">  [2 3]]</span><br><span class="line"></span><br><span class="line"> [[4 5]</span><br><span class="line">  [6 7]]]</span><br><span class="line">调用 rollaxis 函数:</span><br><span class="line">[[[0 2]</span><br><span class="line">  [4 6]]</span><br><span class="line"></span><br><span class="line"> [[1 3]</span><br><span class="line">  [5 7]]]</span><br><span class="line">调用 rollaxis 函数:</span><br><span class="line">[[[0 2]</span><br><span class="line">  [1 3]]</span><br><span class="line"></span><br><span class="line"> [[4 6]</span><br><span class="line">  [5 7]]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.swapaxes()</code></li></ul><p>该函数交换数组的两个轴。对于 1.10 之前的 NumPy 版本，会返回交换后数组的试图。这个函数接受下列参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.swapaxes(arr, axis1, axis2)</span><br></pre></td></tr></table></figure><ul><li><code>arr</code>：要交换其轴的输入数组</li><li><code>axis1</code>：对应第一个轴的整数</li><li><code>axis2</code>：对应第二个轴的整数</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 现在交换轴 0（深度方向）到轴 2（宽度方向）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 swapaxes 函数后的数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.swapaxes(array, <span class="number">2</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[[0 1]</span><br><span class="line">  [2 3]]</span><br><span class="line"></span><br><span class="line"> [[4 5]</span><br><span class="line">  [6 7]]]</span><br><span class="line">调用 swapaxes 函数后的数组:</span><br><span class="line">[[[0 4]</span><br><span class="line">  [2 6]]</span><br><span class="line"></span><br><span class="line"> [[1 5]</span><br><span class="line">  [3 7]]]</span><br></pre></td></tr></table></figure><h4 id="11-3、修改维度">11.3、修改维度</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">维度和描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>broadcast()</code> 产生模仿广播的对象</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>broadcast_to()</code> 将数组广播到新形状</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>expand_dims()</code> 扩展数组的形状</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>squeeze()</code> 从数组的形状中删除单维条目</td></tr></tbody></table><ul><li><code>broadcast()</code></li></ul><p>如前所述，NumPy 已经内置了对广播的支持。 此功能模仿广播机制。 它返回一个对象，该对象封装了将一个数组广播到另一个数组的结果。</p><p>该函数使用两个数组作为输入参数。 下面的例子说明了它的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># 对 y 广播 x</span></span><br><span class="line">arrayA = np.broadcast(x, y)</span><br><span class="line"><span class="comment"># 它拥有 iterator 属性，基于自身组件的迭代器元组 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对 y 广播 x:&#x27;</span>)</span><br><span class="line">r, arrayB = arrayA.iters</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(r), <span class="built_in">next</span>(arrayB))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(r), <span class="built_in">next</span>(arrayB))</span><br><span class="line"><span class="comment"># shape 属性返回广播对象的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;广播对象的形状:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayA.shape)</span><br><span class="line"><span class="comment"># 手动使用 broadcast 将 x 与 y 相加</span></span><br><span class="line">arrayA = np.broadcast(x, y)</span><br><span class="line">arrayB = np.empty(arrayA.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动使用 broadcast 将 x 与 y 相加:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayB.shape)</span><br><span class="line">arrayB.flat = [u + v <span class="keyword">for</span> (u, v) <span class="keyword">in</span> arrayA]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 flat 函数:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayB)</span><br><span class="line"><span class="comment"># 获得了和 NumPy 内建的广播支持相同的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x 与 y 的和:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">对 y 广播 x:</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">广播对象的形状:</span><br><span class="line">(3, 3)</span><br><span class="line">手动使用 broadcast 将 x 与 y 相加:</span><br><span class="line">(3, 3)</span><br><span class="line">调用 flat 函数:</span><br><span class="line">[[5. 6. 7.]</span><br><span class="line"> [6. 7. 8.]</span><br><span class="line"> [7. 8. 9.]]</span><br><span class="line">x 与 y 的和:</span><br><span class="line">[[5 6 7]</span><br><span class="line"> [6 7 8]</span><br><span class="line"> [7 8 9]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.broadcast_to()</code></li></ul><p>此函数将数组广播到新形状。 它在原始数组上返回只读视图。 它通常不连续。 如果新形状不符合 NumPy 的广播规则，该函数可能会抛出<code>ValueError</code>。</p><p>注意 - 此功能可用于 1.10.0 及以后的版本。</p><p>该函数接受以下参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.broadcast_to(array, shape, subok)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">4</span>).reshape(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;调用 broadcast_to 函数之后:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.broadcast_to(array, (<span class="number">4</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[0 1 2 3]]</span><br><span class="line">调用 broadcast_to 函数之后:</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [0 1 2 3]</span><br><span class="line"> [0 1 2 3]</span><br><span class="line"> [0 1 2 3]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.expand_dims()</code></li></ul><p>函数通过在指定位置插入新的轴来扩展数组形状。该函数需要两个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.expand_dims(arr, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>axis</code>：新轴插入的位置</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayX = np.array(([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组X:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayX)</span><br><span class="line">arrayY = np.expand_dims(arrayX, axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组Y:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayY)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组 x 和 y 的形状:&#x27;</span>, arrayX.shape, arrayY.shape)</span><br><span class="line"><span class="comment"># 在位置 1 插入轴</span></span><br><span class="line">arrayY = np.expand_dims(arrayX, axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在位置 1 插入轴之后的数组 y:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayY)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x.ndim 和 y.ndim:&#x27;</span>, arrayX.ndim, arrayY.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x.shape 和 y.shape:&#x27;</span>, arrayX.shape, arrayY.shape)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数组X:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line">数组Y:</span><br><span class="line">[[[1 2]</span><br><span class="line">  [3 4]]]</span><br><span class="line">数组 x 和 y 的形状: (2, 2) (1, 2, 2)</span><br><span class="line">在位置 1 插入轴之后的数组 y:</span><br><span class="line">[[[1 2]]</span><br><span class="line"></span><br><span class="line"> [[3 4]]]</span><br><span class="line">x.ndim 和 y.ndim: 2 3</span><br><span class="line">x.shape 和 y.shape: (2, 2) (2, 1, 2)</span><br></pre></td></tr></table></figure><ul><li><code>numpy.squeeze()</code></li></ul><p>函数从给定数组的形状中删除一维条目。 此函数需要两个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.squeeze(arr, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>axis</code>：整数或整数元组，用于选择形状中单一维度条目的子集</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrayX = np.arange(<span class="number">9</span>).reshape(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组 X:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayX)</span><br><span class="line">arrayY = np.squeeze(arrayX)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组 Y:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arrayY)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数组 x 和 y 的形状:&#x27;</span>, arrayX.shape, arrayY.shape)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数组 X:</span><br><span class="line">[[[0 1 2]</span><br><span class="line">  [3 4 5]</span><br><span class="line">  [6 7 8]]]</span><br><span class="line">数组 Y:</span><br><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [6 7 8]]</span><br><span class="line">数组 x 和 y 的形状: (1, 3, 3) (3, 3)</span><br></pre></td></tr></table></figure><h4 id="11-4、数组的连接">11.4、数组的连接</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">数组及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>concatenate()</code> 沿着现存的轴连接数据序列</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>stack()</code> 沿着新轴连接数组序列</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>hstack()</code> 水平堆叠序列中的数组（列方向）</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>vstack()</code> 竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><ul><li><code>numpy.concatenate()</code></li></ul><p>数组的连接是指连接。 此函数用于沿指定轴连接相同形状的两个或多个数组。 该函数接受以下参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.concatenate((a1, a2, ...), axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>a1, a2, ...</code>：<strong>相同类型</strong>的数组序列</p><p><code>axis</code>：沿着它连接数组的轴，默认为 0</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">array2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="comment"># 两个数组的维度相同</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 0 连接两个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array1, array2)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 1 连接两个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array1, array2), axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line">沿轴 0 连接两个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line">沿轴 1 连接两个数组：</span><br><span class="line">[[1 2 5 6]</span><br><span class="line"> [3 4 7 8]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.stack()</code></li></ul><p>此函数沿新轴连接数组序列。 此功能添加自 NumPy 版本 1.10.0。 需要提供以下参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.stack(arrays, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arrays</code>：<strong>相同形状</strong>的数组序列</p><p><code>axis</code>：返回数组中的轴，输入数组沿着它来堆叠</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">array2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 0 堆叠两个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((array1, array2), <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 1 堆叠两个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((array1, array2), <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">第二个数组:</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]</span><br><span class="line"> [0 0]]</span><br><span class="line">沿轴 0 堆叠两个数组:</span><br><span class="line">[[[1 2]</span><br><span class="line">  [3 4]</span><br><span class="line">  [5 6]]</span><br><span class="line"></span><br><span class="line"> [[5 6]</span><br><span class="line">  [7 8]</span><br><span class="line">  [0 0]]]</span><br><span class="line">沿轴 1 堆叠两个数组:</span><br><span class="line">[[[1 2]</span><br><span class="line">  [5 6]]</span><br><span class="line"></span><br><span class="line"> [[3 4]</span><br><span class="line">  [7 8]]</span><br><span class="line"></span><br><span class="line"> [[5 6]</span><br><span class="line">  [0 0]]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.hstack()</code></li></ul><p><code>numpy.stack()</code>函数的变体，通过堆叠来生成水平的单个数组。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">array2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;水平堆叠:&#x27;</span>)</span><br><span class="line">array3 = np.hstack((array1, array2))</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">第二个数组:</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]</span><br><span class="line"> [0 0]]</span><br><span class="line">水平堆叠:</span><br><span class="line">[[1 2 5 6]</span><br><span class="line"> [3 4 7 8]</span><br><span class="line"> [5 6 0 0]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.vstack()</code></li></ul><p><code>numpy.stack</code>函数的变体，通过堆叠来生成竖直的单个数组。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line">array2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;竖直堆叠:&#x27;</span>)</span><br><span class="line">array3 = np.vstack((array1, array2))</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">第二个数组:</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]</span><br><span class="line"> [0 0]]</span><br><span class="line">竖直堆叠:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]</span><br><span class="line"> [5 6]</span><br><span class="line"> [7 8]</span><br><span class="line"> [0 0]]</span><br></pre></td></tr></table></figure><h4 id="11-5、数组分割">11.5、数组分割</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">数组及操作</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>split()</code> 将一个数组分割为多个子数组</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>hsplit()</code> 将一个数组水平分割为多个子数组（按列）</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>vsplit()</code> 将一个数组竖直分割为多个子数组（按行）</td></tr></tbody></table><ul><li><code>numpy.split</code></li></ul><p>该函数沿特定的轴将数组分割为子数组。函数接受三个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.split(ary, indices_or_sections, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>ary</code>：被分割的输入数组</p><p><code>indices_or_sections</code>：可以是整数，表明要从输入数组创建的，等大小的子数组的数量。 如果此参数是一维数组，则其元素表明要创建新子数组的点。</p><p><code>axis</code>：默认为 0</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;将数组分为三个大小相等的子数组:&#x27;</span>)</span><br><span class="line">array2 = np.split(array1, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;将数组在一维数组中表明的位置分割:&#x27;</span>)</span><br><span class="line">array3 = np.split(array1, [<span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[0 1 2 3 4 5 6 7 8]</span><br><span class="line">将数组分为三个大小相等的子数组:</span><br><span class="line">[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</span><br><span class="line">将数组在一维数组中表明的位置分割:</span><br><span class="line">[array([0, 1, 2, 3, 4]), array([5, 6]), array([7, 8])]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.hsplit</code></li></ul><p><code>numpy.hsplit</code>是<code>split()</code>函数的特例，其中轴为 1 表示水平分割，无论输入数组的维度是什么。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;水平分割:&#x27;</span>)</span><br><span class="line">array2 = np.hsplit(array1, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">第一个数组：</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]</span><br><span class="line"> [12 13 14 15]]</span><br><span class="line">水平分割：</span><br><span class="line">[array([[ 0,  1],</span><br><span class="line">       [ 4,  5],</span><br><span class="line">       [ 8,  9],</span><br><span class="line">       [12, 13]]), array([[ 2,  3],</span><br><span class="line">       [ 6,  7],</span><br><span class="line">       [10, 11],</span><br><span class="line">       [14, 15]])]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.vsplit</code></li></ul><p><code>numpy.vsplit</code>是<code>split()</code>函数的特例，其中轴为 0 表示竖直分割，无论输入数组的维度是什么。下面的例子使之更清楚。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;竖直分割:&#x27;</span>)</span><br><span class="line">array2 = np.vsplit(array1, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]</span><br><span class="line"> [12 13 14 15]]</span><br><span class="line">竖直分割:</span><br><span class="line">[array([[0, 1, 2, 3],</span><br><span class="line">       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15]])]</span><br></pre></td></tr></table></figure><h4 id="11-6、添加-删除元素">11.6、添加/删除元素</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">元素及描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>resize()</code> 返回指定形状的新数组</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>append()</code> 将值添加到数组末尾</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>insert()</code> 沿指定轴将值插入到指定下标之前</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>delete()</code> 返回删掉某个轴的子数组的新数组</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><code>unique()</code> 寻找数组内的唯一元素</td></tr></tbody></table><ul><li><code>numpy.resize()</code></li></ul><p>此函数返回指定大小的新数组。 如果新大小大于原始大小，则包含原始数组中的元素的<strong>重复副本</strong>。 该函数接受以下参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.resize(arr, shape)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：要修改大小的输入数组</p><p><code>shape</code>：返回数组的新形状</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组的形状:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1.shape)</span><br><span class="line">array2 = np.resize(array1, (<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个数组的形状:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array2.shape)</span><br><span class="line"><span class="comment"># 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改第二个数组的大小:&#x27;</span>)</span><br><span class="line">array2 = np.resize(array1, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">第一个数组的形状:</span><br><span class="line">(2, 3)</span><br><span class="line">第二个数组:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">第二个数组的形状:</span><br><span class="line">(3, 2)</span><br><span class="line">修改第二个数组的大小:</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]</span><br><span class="line"> [1 2 3]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.append()</code></li></ul><p>此函数在输入数组的末尾添加值。 附加操作不是原地的，而是分配新的数组。 此外，输入数组的维度必须匹配否则将生成<code>ValueError</code>。</p><p>函数接受下列函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.append(arr, values, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>values</code>：要向<code>arr</code>添加的值，比如和<code>arr</code>形状相同（除了要添加的轴）</p><p><code>axis</code>：沿着它完成操作的轴。如果没有提供，两个参数都会被展开。</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;向数组添加元素:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.append(array, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 0 添加元素:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.append(array, [[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 1 添加元素:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.append(array, [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br><span class="line">向数组添加元素:</span><br><span class="line">[1 2 3 4 5 6 7 8 9]</span><br><span class="line">沿轴 0 添加元素:</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]</span><br><span class="line"> [7 8 9]]</span><br><span class="line">沿轴 1 添加元素:</span><br><span class="line">[[1 2 3 5 5 5]</span><br><span class="line"> [4 5 6 7 8 9]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.insert()</code></li></ul><p>此函数在给定索引之前，沿给定轴在输入数组中插入值。 如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 此外，如果未提供轴，则输入数组会被展开。</p><p><code>insert()</code>函数接受以下参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.insert(arr, obj, values, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>obj</code>：在其之前插入值的索引</p><p><code>values</code>：要插入的值</p><p><code>axis</code>：沿着它插入的轴，如果未提供，则输入数组会被展开</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;未传递 Axis 参数。 在插入之前输入数组会被展开。&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.insert(array, <span class="number">3</span>, [<span class="number">11</span>, <span class="number">12</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;传递了 Axis 参数。 会广播值数组来配输入数组。&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 0 广播:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.insert(array, <span class="number">1</span>, [<span class="number">11</span>], axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿轴 1 广播:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.insert(array, <span class="number">1</span>, <span class="number">11</span>, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ 1  2  3 11 12  4  5  6]</span><br><span class="line">传递了 Axis 参数。 会广播值数组来配输入数组。</span><br><span class="line">沿轴 0 广播:</span><br><span class="line">[[ 1  2]</span><br><span class="line"> [11 11]</span><br><span class="line"> [ 3  4]</span><br><span class="line"> [ 5  6]]</span><br><span class="line">沿轴 1 广播:</span><br><span class="line">[[ 1 11  2]</span><br><span class="line"> [ 3 11  4]</span><br><span class="line"> [ 5 11  6]]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.delete()</code></li></ul><p>此函数返回从输入数组中删除指定子数组的新数组。 与<code>insert()</code>函数的情况一样，如果未提供轴参数，则输入数组将展开。 该函数接受以下参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Numpy.delete(arr, obj, axis)</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>arr</code>：输入数组</p><p><code>obj</code>：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</p><p><code>axis</code>：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;未传递 Axis 参数。 在插入之前输入数组会被展开。&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.delete(array, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除第二列:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.delete(array, <span class="number">1</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;包含从数组中删除的替代值的切片:&#x27;</span>)</span><br><span class="line">array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(np.delete(array, np.s_[::<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ 0  1  2  3  4  6  7  8  9 10 11]</span><br><span class="line">删除第二列:</span><br><span class="line">[[ 0  2  3]</span><br><span class="line"> [ 4  6  7]</span><br><span class="line"> [ 8 10 11]]</span><br><span class="line">包含从数组中删除的替代值的切片:</span><br><span class="line">[ 2  4  6  8 10]</span><br></pre></td></tr></table></figure><ul><li><code>numpy.unique()</code></li></ul><p>此函数返回输入数组中的去重元素数组。 该函数能够返回一个<strong>元组</strong>，包含去重数组和相关索引的数组。 索引的性质取决于函数调用中返回参数的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.unique(arr, return_index, return_inverse, return_counts)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>：输入数组，如果不是一维数组则会展开</li><li><code>return_index</code>：如果为<code>true</code>，返回输入数组中的元素下标</li><li><code>return_inverse</code>：如果为<code>true</code>，返回去重数组的下标，它可以用于重构输入数组</li><li><code>return_counts</code>：如果为<code>true</code>，返回去重数组中的元素在原数组中的出现次数</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组的去重值:&#x27;</span>)</span><br><span class="line">u = np.unique(array)</span><br><span class="line"><span class="built_in">print</span>(u)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重数组的索引数组:&#x27;</span>)</span><br><span class="line">u, indices = np.unique(array, return_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(indices)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们可以看到每个和原数组下标对应的数值:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重数组的下标:&#x27;</span>)</span><br><span class="line">u, indices = np.unique(array, return_inverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(u)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;下标为:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(indices)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;使用下标重构原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u[indices])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;返回去重元素的重复数量:&#x27;</span>)</span><br><span class="line">u, indices = np.unique(array, return_counts=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(u)</span><br><span class="line"><span class="built_in">print</span>(indices)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">第一个数组:</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line">第一个数组的去重值:</span><br><span class="line">[2 5 6 7 8 9]</span><br><span class="line">去重数组的索引数组:</span><br><span class="line">[1 0 2 4 7 9]</span><br><span class="line">我们可以看到每个和原数组下标对应的数值:</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line">去重数组的下标:</span><br><span class="line">[2 5 6 7 8 9]</span><br><span class="line">下标为:</span><br><span class="line">[1 0 2 0 3 1 2 4 0 5]</span><br><span class="line">使用下标重构原数组:</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line">返回去重元素的重复数量:</span><br><span class="line">[2 5 6 7 8 9]</span><br><span class="line">[3 2 2 1 1 1]</span><br></pre></td></tr></table></figure><h4 id="11-7、排序">11.7、排序</h4><ul><li><p><code>numpy.sort()</code></p><p>对输入数组执行排序，并返回一个数组副本。</p><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td>要排序的数组</td></tr><tr><td style="text-align:center">axis</td><td>沿着指定轴进行排序，如果没有指定 axis，默认在最后一个轴上排序，若 axis=0 表示按列排序，axis=1 表示按行排序</td></tr><tr><td style="text-align:center">kind</td><td>默认为 quicksort (快速排序)</td></tr><tr><td style="text-align:center">order</td><td>若数组设置了字段，则 order 表示要排序的字段</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.sort(a, axis, kind, order)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dt = np.dtype([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S10&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;i4&#x27;</span>)])</span><br><span class="line">array = np.array([(<span class="string">&#x27;ggw&#x27;</span>, <span class="number">999</span>), (<span class="string">&#x27;xpl&#x27;</span>, <span class="number">998</span>)], dtype=dt)</span><br><span class="line"><span class="built_in">print</span>(array)    <span class="comment"># 输出为 [(b&#x27;ggw&#x27;, 999) (b&#x27;xpl&#x27;, 998)]</span></span><br><span class="line"><span class="comment"># 按年龄字段排序:</span></span><br><span class="line"><span class="built_in">print</span>(np.sort(array, order=<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># 输出为 [(b&#x27;xpl&#x27;, 998) (b&#x27;ggw&#x27;, 999)]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>numpy.argsort()</code></p><p>argsort()沿着指定的轴，对输入数组的元素值进行排序，并返回排序后的元素索引数组。示例如下</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">90</span>, <span class="number">29</span>, <span class="number">89</span>, <span class="number">12</span>])</span><br><span class="line"><span class="built_in">print</span>(array)                <span class="comment"># 输出为 [90 29 89 12]</span></span><br><span class="line">sortIndex = np.argsort(array)</span><br><span class="line"><span class="comment"># 排序结果的索引</span></span><br><span class="line"><span class="built_in">print</span>(sortIndex)            <span class="comment"># 输出为 [3 1 2 0]</span></span><br><span class="line"><span class="comment"># 排序结果</span></span><br><span class="line"><span class="built_in">print</span>(array[sortIndex])     <span class="comment"># 输出为 [12 29 89 90]</span></span><br></pre></td></tr></table></figure><h4 id="11-8、矩阵乘、点乘">11.8、矩阵乘、点乘</h4><ul><li><code>numpy.dot()</code></li></ul><p><strong>案例</strong>：点乘、矩阵乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array1 = np.arange(<span class="number">1</span>, <span class="number">5</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">array2 = np.arange(<span class="number">1</span>, <span class="number">5</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1 * array2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;numpy.dot()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array1.dot(array2))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原数组</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line">*</span><br><span class="line">[[ 1  4]</span><br><span class="line"> [ 9 16]]</span><br><span class="line">numpy.dot()</span><br><span class="line">[[ 7 10]</span><br><span class="line"> [15 22]]</span><br></pre></td></tr></table></figure><h3 id="12、NumPy-统计">12、NumPy - 统计</h3><h4 id="12-1、平均值和中位数">12.1、平均值和中位数</h4><ul><li><p><code>ndarray.mean()</code></p><p>获得平均值</p><p>参数: <code>axis</code>，值0、1，分别是轴0、轴1的方向</p></li><li><p><code>numpy.median()</code></p><p>中位数（中值）</p></li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(array.mean())         <span class="comment"># 输出为 9.5</span></span><br><span class="line"><span class="built_in">print</span>(np.median(array))     <span class="comment"># 输出为 9.5</span></span><br></pre></td></tr></table></figure><h4 id="12-2、标准差和方差">12.2、标准差和方差</h4><ul><li><p><code>ndarray.std()</code></p><p>标准差</p></li><li><p><code>ndarray.var()</code></p><p>方差</p></li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 标准差</span></span><br><span class="line"><span class="built_in">print</span>(array.std())      <span class="comment"># 输出为 5.766281297335398</span></span><br><span class="line"><span class="comment"># 下面将按照传统方法计算   计算结果同上</span></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(np.<span class="built_in">sum</span>((array - array.mean()) ** <span class="number">2</span>) / array.size))</span><br><span class="line"><span class="comment"># 方差</span></span><br><span class="line"><span class="built_in">print</span>(array.var())      <span class="comment"># 输出为 33.25    </span></span><br></pre></td></tr></table></figure><h4 id="12-3、最大值、最小值、和">12.3、最大值、最小值、和</h4><ul><li><p><code>ndarray.max()</code></p><p>最大值</p><p>参数: <code>axis</code>，值0、1，分别是轴0、轴1的方向</p></li><li><p><code>ndarray.min()</code></p><p>最小值</p><p>参数: <code>axis</code>，值0、1，分别是轴0、轴1的方向</p></li><li><p><code>ndarray.sum()</code></p><p>和</p><p>参数: <code>axis</code>，值0、1，分别是轴0、轴1的方向</p></li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">max</span>(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">max</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">min</span>(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">min</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">sum</span>(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(array.<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原数组:</span><br><span class="line">[[ 0  1  2  3  4]</span><br><span class="line"> [ 5  6  7  8  9]</span><br><span class="line"> [10 11 12 13 14]</span><br><span class="line"> [15 16 17 18 19]]</span><br><span class="line">----------------------</span><br><span class="line">19</span><br><span class="line">[15 16 17 18 19]</span><br><span class="line">[ 4  9 14 19]</span><br><span class="line">----------------------</span><br><span class="line">0</span><br><span class="line">[0 1 2 3 4]</span><br><span class="line">[ 0  5 10 15]</span><br><span class="line">----------------------</span><br><span class="line">190</span><br><span class="line">[30 34 38 42 46]</span><br><span class="line">[10 35 60 85]</span><br></pre></td></tr></table></figure><h4 id="12-4、加权平均值">12.4、加权平均值</h4><ul><li><p><code>numpy.average()</code></p><p>加权平均值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.average(a, axis=<span class="literal">None</span>, weights=<span class="literal">None</span>, returned=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p>对比两位学生的考试成绩</p><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:center">平时测验</th><th style="text-align:center">期中考试</th><th style="text-align:center">期末考试</th></tr></thead><tbody><tr><td style="text-align:center">ggw</td><td style="text-align:center">95</td><td style="text-align:center">90</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">xpl</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">95</td></tr></tbody></table><p>学校规定的学科综合成绩的计算方法：</p><table><thead><tr><th style="text-align:center">平时测验</th><th style="text-align:center">期中考试</th><th style="text-align:center">期末考试</th></tr></thead><tbody><tr><td style="text-align:center">20%</td><td style="text-align:center">30%</td><td style="text-align:center">50%</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">95</span>, <span class="number">90</span>, <span class="number">80</span>], [<span class="number">80</span>, <span class="number">90</span>, <span class="number">95</span>]])</span><br><span class="line">w = [<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="built_in">print</span>(np.average(array, axis=<span class="number">1</span>, weights=w))     <span class="comment"># 输出为 [86.  90.5]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">95</span>*<span class="number">0.2</span> + <span class="number">90</span>*<span class="number">0.3</span> + <span class="number">80</span>*<span class="number">0.5</span>)                 <span class="comment"># 输出为 86.0</span></span><br></pre></td></tr></table></figure><h3 id="12、NumPy-文件操作">12、NumPy - 文件操作</h3><ul><li><p><code>loadtxt()</code></p><p>读取txt文本、csv文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadtxt(fname, dtype=&lt;<span class="built_in">type</span> <span class="string">&#x27;float&#x27;</span>&gt;, comments=<span class="string">&#x27;#&#x27;</span>, delimiter=<span class="literal">None</span>, \</span><br><span class="line">        converters=<span class="literal">None</span>, skiprows=<span class="number">0</span>, usercols=<span class="literal">None</span>, unpack=<span class="literal">False</span>, \</span><br><span class="line">        ndmin=<span class="number">0</span>, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">fname</td><td>指定文件或者字符串。支持压缩文件，包括gz，bz格式。</td></tr><tr><td style="text-align:center">dtype</td><td>数据类型，默认为float。</td></tr><tr><td style="text-align:center">comments</td><td>字符串或字符串组成的列表。表示注释字符集开始的标志，默认为#。</td></tr><tr><td style="text-align:center">delimiter</td><td>字符串。分隔符。</td></tr><tr><td style="text-align:center">converters</td><td>字典。将特定列的数据转换为字典中对应的函数的浮点型数据。例如将空值转换为0，默认为空。</td></tr><tr><td style="text-align:center">skiprows</td><td>跳过特定行数据。例如跳过前1行(可能是标题或注释)。默认为0。</td></tr><tr><td style="text-align:center">usercols</td><td>元组。用来指定要读取数据的列，第一列为0。例如(1， 3， 5)，默认为空。</td></tr><tr><td style="text-align:center">unpack</td><td>布尔型。指定是否转置数组，如果为真则转置，默认为False。</td></tr><tr><td style="text-align:center">ndmin</td><td>整数型。指定返回的数组至少包含特定维度的数组。值域为0、1、2，默认为0。</td></tr><tr><td style="text-align:center">enconding</td><td>编码。确认文件是gbk还是utf-8格式。</td></tr></tbody></table><p>返回值：从文件读出的数组</p><p><a href="https://www.bilibili.com/video/BV1Jt4y1h7Vt?t=865.4&amp;p=28">【具体使用说明】</a></p><ul><li><code>np.savez()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.savez(<span class="string">r&#x27;./data.npz&#x27;</span>, data=data, x=x, y=y)</span><br></pre></td></tr></table></figure><p>将numpy数组data、x、y存储到文件data.npz中，没有设置关键字参数而是直接传参，则变为’arr_0、arr_1、arr_2’</p><ul><li><code>np.load()</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.load(r&#x27;./data.npz&#x27;)</span><br><span class="line">data, x, y = data[&#x27;data&#x27;], data[&#x27;x&#x27;], data[&#x27;y&#x27;]</span><br><span class="line"># print(data.files)# 查看文件</span><br></pre></td></tr></table></figure><p>将文件中的数组加载出来</p><h3 id="13、随机函数">13、随机函数</h3><blockquote><p>NumPy中也有自己的随机函数，包含在random模块中。它能产生特定分布的随机数，如正态分布等。接下来介绍一些常用的随<br>机数。</p></blockquote><ul><li><code>rand()</code><ul><li>rand()函数根据给定维度生成[0,1)之间的数据，包含0，不包含1</li><li>dn表示每个维度</li><li>返回值为指定维度的array</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.rand(d0,d1,...,dn)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.rand(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array)    <span class="comment"># 输出为 [[0.09504265 0.16277635]]</span></span><br></pre></td></tr></table></figure><ul><li><code>randn()</code><ul><li>randn()函数返回一个或一组样本，具有标准正态分布</li><li>dn表示每个维度</li><li>返回值为指定维度的array</li></ul></li></ul><blockquote><p>标准正态分布又称为u分布，是以0为均值、以1为标难差的正态分布，记为N (0，1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.randn(d0,d1,...,dn)</span><br></pre></td></tr></table></figure><ul><li><code>randint()</code><ul><li>返回随机整数，范围区间<code>[low, high)</code>，包括low，不包括high</li><li>参数：<code>low</code>为最小值，<code>high</code>为最大值，<code>size</code>为数组维数大小，<code>dtype</code>为数据类型，默认是int</li><li>high没有填写时，默认生成的是<code>[0, low)</code>范围</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="string">&#x27;i&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.randint(-<span class="number">5</span>, <span class="number">6</span>, size=(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(array)    <span class="comment"># 输出为 [[2 5 0]]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>sample()</code></p><p>返回半开区间的随机浮点数[0.0, 1.0]</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.sample(size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.sample((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(array)    <span class="comment"># 输出为 [[0.58491274 0.10521267]]</span></span><br></pre></td></tr></table></figure><ul><li><code>seed()</code><ul><li>使用相同的seed()值，则每次生成的随机数都相同,使得随机数可以预测</li><li>但是，只在调用的时候seed()一下并不能使生成的随机数相同，需要每次调用都seed()一下，表示种子相同，从而生成的随机数<br>相同</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.seed()</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">array1 = np.random.sample((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(array1)    <span class="comment"># 输出为 [[0.417022   0.72032449]]</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">array2 = np.random.sample((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(array2)    <span class="comment"># 输出为 [[0.417022   0.72032449]]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>normal()</code></p><p>作用: 返回一个由size指定形状的数组，数组中的值服从 p=loc,o=scale 的正态分布</p><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">loc</td><td>float型或者float型的类数组对象，指定均值(mu)</td></tr><tr><td style="text-align:center">scale</td><td>float型或者float型的类数组对象，指定标准差(sigma)</td></tr><tr><td style="text-align:center">size</td><td>int型或者int型的元组，指定了数组的形状，如果不提供size，且loc和scale为标量(不是类数组对象)，则返回一个服从该分布的随机数。</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.normal(<span class="number">0.0</span>, <span class="number">1.0</span>, size=(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(array)    <span class="comment"># 输出为 [[-2.12634551 -0.82277155]]</span></span><br></pre></td></tr></table></figure><h2 id="四、matplotlib">四、matplotlib</h2><blockquote><p>Matplotlib 是Python中类似 <a href="https://so.csdn.net/so/search?q=MATLAB&amp;spm=1001.2101.3001.7020">MATLAB</a> 的绘图工具，熟悉 MATLAB 也可以很快的上手 Matplotlib。</p><p>优点:</p><ul><li>Matplotlib 提供了一个套面向绘图对象编程的API 接口</li><li>依托于Python，借助Python的强大的可拓展性Matplotlib可以在许多不同的环境中被使用</li><li>基于Matlab的和基于面向对象的,但是它完全免费(Matlab是商业数学软件)</li><li>Matplotlib 实现了几乎是完全自主控制的图形定义功能</li></ul></blockquote><h3 id="1、第一个绘图程序">1、第一个绘图程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_22-29-17.png" alt=""></p><h3 id="2、基本方法">2、基本方法</h3><h4 id="2-1、title">2.1、title()</h4><p>设置图标名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.title(<span class="string">&#x27;y=x^2&#x27;</span>)<span class="comment"># 图标名称为 y=x^2</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_22-54-03.png" alt=""></p><p><strong>修改字体配置(2个问题)</strong></p><p>（1）默认不支持中文（字体丢失），报错为：<code>missing from current font.</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.title(<span class="string">&#x27;y等于x的平方&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_22-51-54.png" alt=""></p><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;simhei&#x27;]  # 效果相同，不区分大小写</span></span><br></pre></td></tr></table></figure><p><strong>字体说明</strong></p><table><thead><tr><th style="text-align:center">中文字体</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">SimHei</td><td style="text-align:center">中文黑体</td></tr><tr><td style="text-align:center">Kaiti</td><td style="text-align:center">中文楷体</td></tr><tr><td style="text-align:center">LiSu</td><td style="text-align:center">中文隶书</td></tr><tr><td style="text-align:center">FangSong</td><td style="text-align:center">中文仿宋</td></tr><tr><td style="text-align:center">YouYuan</td><td style="text-align:center">中文幼圆</td></tr><tr><td style="text-align:center">STSong</td><td style="text-align:center">华文宋体</td></tr></tbody></table><p>（2）当字体设置支持中文后，必须设置负号，否则数值中出现负值时，符号无法显示</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_22-56-59.png" alt=""></p><p>解决办法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>正常执行的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&#x27;y等于x的平方&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="2-2、xlabel-、ylabel">2.2、xlabel()、ylabel()</h4><p>设置x轴、y轴的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&#x27;y等于x的平方&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x 轴&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y 轴&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_23-01-25.png" alt=""></p><h4 id="2-3、补充">2.3、补充</h4><p>（1）样式</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">fontsize</td><td style="text-align:center">字体大小</td></tr><tr><td style="text-align:center">linewidth</td><td style="text-align:center">线条宽度</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">5</span>)     <span class="comment"># 设置了线条宽度</span></span><br><span class="line">plt.title(<span class="string">&#x27;y等于x的平方&#x27;</span>, fontsize=<span class="number">16</span>)   <span class="comment"># 设置了字体大小</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x 轴&#x27;</span>, fontsize=<span class="number">16</span>)      <span class="comment"># 设置了字体大小</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y 轴&#x27;</span>, fontsize=<span class="number">16</span>)      <span class="comment"># 设置了字体大小</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_23-10-52.png" alt=""></p><p>（2）一张图多个曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y1 = x ** <span class="number">2</span></span><br><span class="line">y2 = <span class="number">10</span> * x</span><br><span class="line">plt.title(<span class="string">&#x27;y等于x的平方&#x27;</span>, fontsize=<span class="number">16</span>)   </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x 轴&#x27;</span>, fontsize=<span class="number">16</span>)      </span><br><span class="line">plt.ylabel(<span class="string">&#x27;y 轴&#x27;</span>, fontsize=<span class="number">16</span>)  </span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------    </span></span><br><span class="line">plt.plot(x, y1, linewidth=<span class="number">5</span>)     </span><br><span class="line">plt.plot(x, y2, linewidth=<span class="number">5</span>)    </span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------- </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-24_23-15-27.png" alt=""></p><h4 id="2-4、xticks-、yticks">2.4、xticks()、yticks()</h4><p>设置x轴、y轴的刻度（把坐标轴变成自己想要的样子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(ticks=<span class="literal">None</span>, label=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">ticks</td><td>此参数是xtick<strong>位置</strong>的列表。是一个可选参数。如果将一个空列表作为参数传递，则它将删除所有xticks</td></tr><tr><td style="text-align:center">label</td><td>此参数包含放置在给定刻度线位置的标签。它是一个可选参数</td></tr><tr><td style="text-align:center">**kwargs</td><td>此参数是文本属性，用于控制标签的外观<br /> rotation :旋转角度；如: rotation=45<br /> color: 颜色；如: color=“red”</td></tr></tbody></table><p>如果ticks参数的值是数值型，那么代表的是他本身，而不是索引（位置）</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">date = [<span class="string">f&#x27;1月<span class="subst">&#123;i&#125;</span>日&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">salary = np.random.randint(<span class="number">500</span>, <span class="number">900</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.plot(date, salary)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_17-36-48.png" alt=""></p><p>设置x轴刻度后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">date = [<span class="string">f&#x27;1月<span class="subst">&#123;i&#125;</span>日&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">salary = np.random.randint(<span class="number">500</span>, <span class="number">900</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 日期隔一个显示，倾斜45°</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(date), <span class="number">2</span>), rotation=<span class="number">45</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.plot(date, salary)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_17-38-58.png" alt=""></p><h4 id="2-5、show">2.5、show()</h4><p>显示所有打开的图形</p><p>注意：jupyter notebooks会自动显示图形（即使没调用）</p><p>如果在jupyter中也想要出现图形操作菜单，可以使用matplotlib中的魔术方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib notebook</span><br></pre></td></tr></table></figure><p>如果在jupyter中变回原来的模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h4 id="2-6、legend">2.6、legend()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.legend([loc])</span><br></pre></td></tr></table></figure><p>（1）使用图例前需要在，plot()函数中指定参数label的值</p><p>（2）需要先指定，在执行legend()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">date = [<span class="string">f&#x27;1月<span class="subst">&#123;i&#125;</span>日&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">salary = np.random.randint(<span class="number">500</span>, <span class="number">900</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">expenses = np.random.randint(<span class="number">100</span>, <span class="number">500</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(date), <span class="number">2</span>), rotation=<span class="number">45</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 注意, 在使用图例 前 为每个图形设置label参数(plot()在legend()后面执行，将失效)</span></span><br><span class="line">plt.plot(date, salary, label=<span class="string">&#x27;收入&#x27;</span>)</span><br><span class="line">plt.plot(date, expenses, label=<span class="string">&#x27;支出&#x27;</span>)</span><br><span class="line"><span class="comment"># 图例 默认会使用每个图形的label值作为图例的说明</span></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>设置图例</strong></p><p>（1）默认会选择不遮挡图形的位置来显示图例(loc=best)（位置不定）</p><p>（2）指定图例位置</p><table><thead><tr><th style="text-align:center">位置</th><th style="text-align:center">字符串位置值</th><th style="text-align:center">位置值</th></tr></thead><tbody><tr><td style="text-align:center">默认值，自定寻找合适位置</td><td style="text-align:center">best</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">右上角</td><td style="text-align:center">upper right</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">左上角</td><td style="text-align:center">upper left</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">左下角</td><td style="text-align:center">lower left</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">右下角</td><td style="text-align:center">lower right</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">右边中间</td><td style="text-align:center">right</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">左边中间</td><td style="text-align:center">center left</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">右边中间</td><td style="text-align:center">center right</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">中间最下面</td><td style="text-align:center">lower center</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">中间最上面</td><td style="text-align:center">upper center</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">正中心</td><td style="text-align:center">center</td><td style="text-align:center">10</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_19-30-43.png" alt=""></p><h4 id="2-7、text">2.7、text()</h4><p>显示每条数据的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.text(x, y, string, fontsize=<span class="number">15</span>, verticalalignment=<span class="string">&#x27;top&#x27;</span>, horizontalalignment=<span class="string">&#x27;right&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">x, y</td><td>坐标轴上的值</td></tr><tr><td style="text-align:center">string</td><td>说明文字</td></tr><tr><td style="text-align:center">fontsize</td><td>字体大小</td></tr><tr><td style="text-align:center">verticalalignment</td><td>垂直对齐方式(va)，[‘center’ | ‘top’ | ‘bottom’ | ‘baseline’]</td></tr><tr><td style="text-align:center">horizontalalignment</td><td>水平对齐方式(ha)，[‘center’ | ‘right’ | ‘left’]</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">date = [<span class="string">f&#x27;1月<span class="subst">&#123;i&#125;</span>日&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">salary = np.random.randint(<span class="number">500</span>, <span class="number">900</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">expenses = np.random.randint(<span class="number">100</span>, <span class="number">500</span>, size=<span class="built_in">len</span>(date))</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(date), <span class="number">2</span>), rotation=<span class="number">45</span>)</span><br><span class="line">plt.plot(date, salary, label=<span class="string">&#x27;收入&#x27;</span>)</span><br><span class="line">plt.plot(date, expenses, label=<span class="string">&#x27;支出&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># plt.text(&#x27;1月1日&#x27;, salary[0], &#x27;第一天的收入&#x27;)     # 有效</span></span><br><span class="line"><span class="keyword">for</span> x, y1, y2 <span class="keyword">in</span> <span class="built_in">zip</span>(date, salary, expenses):</span><br><span class="line">    plt.text(x, y1, <span class="string">f&#x27;<span class="subst">&#123;y1&#125;</span>元&#x27;</span>, fontsize=<span class="number">8</span>, horizontalalignment=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    plt.text(x, y2, <span class="string">f&#x27;<span class="subst">&#123;y2&#125;</span>元&#x27;</span>, fontsize=<span class="number">8</span>, horizontalalignment=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_19-56-53.png" alt=""></p><h4 id="2-8、plot-线条样式">2.8、plot()线条样式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, color=<span class="string">&#x27;red&#x27;</span>, alpha=<span class="number">0.3</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">5</span>,\</span><br><span class="line">         marker=<span class="string">&#x27;o&#x27;</span>, markeredgecolor=<span class="string">&#x27;r&#x27;</span>, markersize=<span class="string">&#x27;20&#x27;</span>, markeredgewidth=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><p>（1）x, y：plot(y)，x可省略，默认[0,…,N-1]递增，N为y轴元素的个数</p><p>（2）color：可以使用颜色的十六进制，也可以使用线条的颜色英文，还可以使用之前的缩写</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">颜色</th><th style="text-align:center">英文全称</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">蓝色</td><td style="text-align:center">blue</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">绿色</td><td style="text-align:center">green</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">红色</td><td style="text-align:center">red</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">青色</td><td style="text-align:center">cyan</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">品红</td><td style="text-align:center">magenta</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">黄色</td><td style="text-align:center">yellow</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">黑色</td><td style="text-align:center">black</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">白色</td><td style="text-align:center">white</td></tr></tbody></table><p>（3）alpha：0.0-1.0，透明度</p><p>（4）linestyle：线条样式</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">实线</td></tr><tr><td style="text-align:center">–</td><td style="text-align:center">虚线</td></tr><tr><td style="text-align:center">-.</td><td style="text-align:center">点划线</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">虚线</td></tr></tbody></table><p>（5）linewidth：折线的宽度</p><p>（7）marker：标记点</p><table><thead><tr><th style="text-align:center">标记符号</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">点标记</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">圆圈标记</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">'X’标记</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">钻石标记</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">六角标记</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">正方形标记</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">加号标记</td></tr></tbody></table><p>（7）markeredgecolor：标记点的颜色</p><p>（8）markersize：标记点的大小</p><p>（9）markeredgewidth：标记点的边宽</p><h3 id="3、其他元素的可视性">3、其他元素的可视性</h3><h4 id="3-1、grid">3.1、grid()</h4><p>操作网格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">&#x27;——&#x27;</span>, color=<span class="string">&#x27;gray&#x27;</span>, linewidth=<span class="string">&#x27;0,5&#x27;</span>, axis=<span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">True</td><td style="text-align:left">显示网格</td></tr><tr><td style="text-align:center">linestyle</td><td style="text-align:left">线性</td></tr><tr><td style="text-align:center">color</td><td style="text-align:left">颜色</td></tr><tr><td style="text-align:center">linewidth</td><td style="text-align:left">宽度</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:left">x, y, both：显示x、显示y、显示x和y的网格</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi, np.pi, endpoint=<span class="literal">True</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br><span class="line">plt.plot(x, c)</span><br><span class="line">plt.plot(x, s)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.grid()</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_20-25-37.png" alt=""></p><h4 id="3-2、gca-，spines">3.2、gca()，spines</h4><p>首先观察画布上面的坐标轴</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_20-50-15.png" alt=""></p><p>上图中，框选出的四条黑色边界框线在Matplotlib中被称为<strong>spines</strong>，中文翻译为脊柱，可以理解为这些框线是坐标轴的”支柱“</p><p>所有的操作在<code>plt.gca()</code>中完成(gca: get current axes（获取当前区域）)</p><p><strong>用法在下面的例子中得到说明</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">2500</span>)</span><br><span class="line"><span class="comment"># 获取当前坐标轴</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 通过坐标轴spines，确定top、botom、left、right(分别表示上、下、左、右)</span></span><br><span class="line"><span class="comment"># - 不需要右侧和上面的线条，设置成空颜色</span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 在这里，position位置参数有三种: data, axes, outward(向外)</span></span><br><span class="line"><span class="comment"># - data: 数值对应的位置</span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># - axes: 0.0-1.0之间的值，坐标轴的比例</span></span><br><span class="line"><span class="comment"># ax.spines[&#x27;left&#x27;].set_position((&#x27;axes&#x27;, 0.5))</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_21-12-39.png" alt=""></p><h3 id="4、创建图形对象">4、创建图形对象</h3><blockquote><p>  在 Matplotlib 中，面向对象编程的核心思想是创建图形对象(figure obiect)。通过图形对象来调用其它的方法和属性，这样有助于我们更好地处理多个画布。在这个过程中，pyplot 负责生成图形对象，并通过该对象来添加一个或多个axes 对象(即绘图区)<br>  Matplotib 提供了 matplotlib,figure 图形类模块，它包含了创建图形对象的方法。通过调用 pyplot 模块中 figure() 函数来实例化figure对象。</p></blockquote><h4 id="figure">figure()</h4><p>创建图形对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="literal">None</span>, figsize=<span class="literal">None</span>, dpi=<span class="literal">None</span>, facecolor=<span class="literal">None</span>, edgecolor=<span class="literal">None</span>, frameon=<span class="literal">True</span>, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">num</td><td>图像编号或名称，数字为编号 ，字符串为名称</td></tr><tr><td style="text-align:center">figsize</td><td>指定figure的宽和高，单位为英寸;</td></tr><tr><td style="text-align:center">dpi</td><td>指定绘图对象的分辨率，即每英寸多少个像素，缺省值为72</td></tr><tr><td style="text-align:center">facecolor</td><td>背景颜色</td></tr><tr><td style="text-align:center">edgecolor</td><td>边框颜色</td></tr><tr><td style="text-align:center">frameon</td><td>是否显示边框</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">fig = plt.figure(<span class="string">&#x27;f1&#x27;</span>, figsize=(<span class="number">4</span>, <span class="number">2</span>), dpi=<span class="number">100</span>, facecolor=<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_22-30-05.png" alt=""></p><h3 id="5、绘制多子图">5、绘制多子图</h3><blockquote><p>  fiqure是绘制对象(可理解为一个空白的画布)，一个figure对象可以包含多个Axes子图，一个Axes是一个绘图区域，不加设置时，Axes为1，且每次绘图其实都是在figure上的Axes上绘图。<br>  我们是在图形对象上面的Axes区域作画</p></blockquote><h4 id="1、add-axes">1、add_axes()</h4><p>添加区域</p><blockquote><p>  Matplotlib 定义了一个 axes 类(轴域类)，该类的对象被称为 axes 对象(即轴域对象)，它指定了一个有数值范围限制的绘图区域。在一个给定的画布 (figure) 中可以包含多个 axes 对象，但是同一个axes 对象只能在一个画布中使用。</p><p>  2D绘图区域（axes）包含两个轴（axis）对象</p></blockquote><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_axes(rect)</span><br></pre></td></tr></table></figure><ul><li>该方法用来生成一个axes 轴域对象，对象的位置由参数rect决定</li><li>rect 是位置参数，接受一个由 4 个元素组成的浮点数列表，形如[left, botom, width, height]，它表示添加到画布中的矩形区<br>域的左下角坐标(x,y)，以及宽度和高度。</li></ul><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 画布背景设置成 pink</span></span><br><span class="line">fig = plt.figure(facecolor=<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line"><span class="comment"># ax1 从画布 10%, 10% 的位置开始画，宽高是画布的 80%</span></span><br><span class="line">ax1 = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>])</span><br><span class="line"><span class="comment"># - 当前区域是 ax1, plt.plot()在当前区域作画</span></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># ax2 从画布 20%, 20% 的位置开始画，宽高是画布的 50%</span></span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line"><span class="comment"># - 当前区域是 ax2, plt.plot()在当前区域作画</span></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>])</span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">ax2.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>ps：<strong>plt.plot()是在当前区域作画</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_23-01-47.png" alt=""></p><h4 id="2、subplot">2、subplot()</h4><p>均等地划分画布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplot(nrows, ncols, index, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>返回值：区域画布，区域对象</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nrows</td><td style="text-align:center">行</td></tr><tr><td style="text-align:center">ncols</td><td style="text-align:center">列</td></tr><tr><td style="text-align:center">indes</td><td style="text-align:center">索引</td></tr><tr><td style="text-align:center">**kwargs</td><td style="text-align:center">title、xlabel、ylabel等</td></tr></tbody></table><p>说明：</p><p>nrows 与 ncols 表示要划分几行几列的子区域 (nrows*nclos表示子图数量)，index 的初始值为1，用来选定具体的某个子区域。<br>例如：subplot(233)表示在当前画布的右上角创建一个两行三列的绘图区域，同时，选择在第 3 个位置绘制子图。</p><p><strong>案例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(facecolor=<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 切割成 2*2 份</span></span><br><span class="line"><span class="comment"># - 选择第 1 份</span></span><br><span class="line">ax1 = plt.subplot(<span class="number">221</span>)</span><br><span class="line"><span class="comment"># - 选择第 2 份</span></span><br><span class="line">ax2 = plt.subplot(<span class="number">224</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">ax2.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_23-22-25.png" alt=""></p><p><strong>案例2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(facecolor=&#x27;pink&#x27;)</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">ax1 = plt.subplot(121)</span><br><span class="line">ax2 = plt.subplot(224)</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">ax1.plot([1, 2, 3, 4, 6], [2, 3, 5, 8, 9])</span><br><span class="line">ax2.plot([1, 2, 3, 4, 6], [2, 3, 5, 8, 9])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_23-28-52.png" alt=""></p><h3 id="6、柱状图">6、柱状图</h3><h4 id="1、bar">1、bar()</h4><p>绘制柱状图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(x, height, width:<span class="built_in">float</span>=<span class="number">0.8</span>, bottom=<span class="literal">None</span>, *, align:<span class="built_in">str</span>=<span class="string">&#x27;center&#x27;</span>, data=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td>表示x坐标，数据类型为float类型，一般为np.arange()生成的固定步长列表</td></tr><tr><td style="text-align:center">height</td><td>表示柱状图的高度，也就是y坐标值，数据类型为float类型，一般为一个列表，包含生成柱状图的所有y值</td></tr><tr><td style="text-align:center">width</td><td>表示柱状图的宽度，取值在0-1之间，默认值为0.8</td></tr><tr><td style="text-align:center">bottom</td><td>柱状图的起始位置，也就是y轴的起始坐标，默认值为None</td></tr><tr><td style="text-align:center">align</td><td>柱状图的中心位置，“center”，&quot;lege&quot;边缘，默认值为’center’</td></tr><tr><td style="text-align:center">color</td><td>柱状图颜色，默认为蓝色</td></tr><tr><td style="text-align:center">alpha</td><td>透明度，取值在0~1之间，默认值为1</td></tr><tr><td style="text-align:center">label</td><td>标签，设置后需要调用plt.legend()生成</td></tr><tr><td style="text-align:center">edgecolor</td><td>边框颜色(ec)</td></tr><tr><td style="text-align:center">linewidth</td><td>边框宽度，浮点数或类数组，默认为None (lw)</td></tr><tr><td style="text-align:center">tick_label</td><td>柱子的刻度标签，字符串或字符串列表，默认值为None。</td></tr><tr><td style="text-align:center">linestyle</td><td>线条样式(Is)</td></tr></tbody></table><p><strong>案例1</strong></p><p>基本柱状图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">2</span>, <span class="number">8</span>, size=<span class="number">5</span>)</span><br><span class="line">plt.bar(x, y, color=<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_23-49-15.png" alt=""></p><p><strong>案例2</strong></p><p>测试参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">2</span>, <span class="number">8</span>, size=<span class="number">5</span>)</span><br><span class="line">plt.bar(x, y, color=[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;y&#x27;</span>], bottom=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], \</span><br><span class="line">        edgecolor=<span class="string">&#x27;k&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-25_23-58-56.png" alt=""></p><h4 id="2、同位置多柱状图">2、同位置多柱状图</h4><p><strong>案例</strong></p><p>各个国家的奖牌数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国家</span></span><br><span class="line">countries = [<span class="string">&#x27;挪威&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;瑞典&#x27;</span>]</span><br><span class="line"><span class="comment"># 金牌</span></span><br><span class="line">goldMedal = [<span class="number">16</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 银牌</span></span><br><span class="line">silverMedal = [<span class="number">8</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 铜牌</span></span><br><span class="line">bronzeMedal = [<span class="number">13</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、将x轴转化为数值</span></span><br><span class="line">x = np.arange(<span class="built_in">len</span>(countries))</span><br><span class="line"><span class="comment"># 2、设置图形宽度</span></span><br><span class="line">width = <span class="number">0.2</span></span><br><span class="line"><span class="comment"># 3、设置图形起始位置</span></span><br><span class="line"><span class="comment"># - 金牌</span></span><br><span class="line">goldX = x</span><br><span class="line"><span class="comment"># - 银牌</span></span><br><span class="line">silverX = x + width</span><br><span class="line"><span class="comment"># - 铜牌</span></span><br><span class="line">bronzeX = x + <span class="number">2</span> * width</span><br><span class="line"><span class="comment"># 4、设置 x标签 位置居中，标签变回来，解决乱码问题</span></span><br><span class="line">plt.xticks(x + width, labels=countries)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 5、显示文本高度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(countries)):</span><br><span class="line">    plt.text(goldX[i], goldMedal[i], goldMedal[i], va=<span class="string">&#x27;bottom&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    plt.text(silverX[i], silverMedal[i], silverMedal[i], va=<span class="string">&#x27;bottom&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    plt.text(bronzeX[i], bronzeMedal[i], bronzeMedal[i], va=<span class="string">&#x27;bottom&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、绘图</span></span><br><span class="line">plt.bar(goldX, goldMedal, width=width, color=<span class="string">&#x27;gold&#x27;</span>)</span><br><span class="line">plt.bar(silverX, silverMedal, width=width, color=<span class="string">&#x27;silver&#x27;</span>)</span><br><span class="line">plt.bar(bronzeX, bronzeMedal, width=width, color=<span class="string">&#x27;saddlebrown&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_01-34-00.png" alt=""></p><h4 id="3、堆叠状图">3、堆叠状图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国家</span></span><br><span class="line">countries = [<span class="string">&#x27;挪威&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;瑞典&#x27;</span>]</span><br><span class="line"><span class="comment"># 金牌</span></span><br><span class="line">goldMedal = [<span class="number">16</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 银牌</span></span><br><span class="line">silverMedal = [<span class="number">8</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 铜牌</span></span><br><span class="line">bronzeMedal = [<span class="number">13</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、设置图形起始绘制位置</span></span><br><span class="line"><span class="comment"># - 铜牌</span></span><br><span class="line">bronzeBottom = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># - 银牌</span></span><br><span class="line">silverBottom = bronzeBottom + bronzeMedal</span><br><span class="line"><span class="comment"># - 金牌</span></span><br><span class="line">goldBottom = silverBottom + silverMedal</span><br><span class="line"><span class="comment"># 2、解决乱码问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、绘图</span></span><br><span class="line">plt.bar(countries, goldMedal, bottom=goldBottom, color=<span class="string">&#x27;gold&#x27;</span>)</span><br><span class="line">plt.bar(countries, silverMedal, bottom=silverBottom, color=<span class="string">&#x27;silver&#x27;</span>)</span><br><span class="line">plt.bar(countries, bronzeMedal, bottom=bronzeBottom, color=<span class="string">&#x27;saddlebrown&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_01-42-51.png" alt=""></p><h4 id="4、barh">4、barh()</h4><p>绘制水平柱状图，和bar()用法基本一致</p><p><strong>区别</strong>：width 和 height参数意义互换， bottom变成left</p><p><strong>案例</strong></p><p>将上面堆叠状图的案例简单修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国家</span></span><br><span class="line">countries = [<span class="string">&#x27;挪威&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;瑞典&#x27;</span>]</span><br><span class="line"><span class="comment"># 金牌</span></span><br><span class="line">goldMedal = [<span class="number">16</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 银牌</span></span><br><span class="line">silverMedal = [<span class="number">8</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 铜牌</span></span><br><span class="line">bronzeMedal = [<span class="number">13</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、设置图形起始绘制位置</span></span><br><span class="line"><span class="comment"># - 铜牌</span></span><br><span class="line">bronzeBottom = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># - 银牌</span></span><br><span class="line">silverBottom = bronzeBottom + bronzeMedal</span><br><span class="line"><span class="comment"># - 金牌</span></span><br><span class="line">goldBottom = silverBottom + silverMedal</span><br><span class="line"><span class="comment"># 2、解决乱码问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 3、绘图</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.barh(countries, goldMedal, height=<span class="number">0.5</span>, left=goldBottom, color=<span class="string">&#x27;gold&#x27;</span>)</span><br><span class="line">plt.barh(countries, silverMedal, height=<span class="number">0.5</span>, left=silverBottom, color=<span class="string">&#x27;silver&#x27;</span>)</span><br><span class="line">plt.barh(countries, bronzeMedal, height=<span class="number">0.5</span>, left=bronzeBottom, color=<span class="string">&#x27;saddlebrown&#x27;</span>)</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_01-56-41.png" alt=""></p><h3 id="7、直方图">7、直方图</h3><table><thead><tr><th>柱状图</th><th>直方图</th></tr></thead><tbody><tr><td>柱状图一般用于描述<strong>离散</strong>型分类数据的对比</td><td>直方图一般用于描述<strong>连续</strong>型数据的分布关系</td></tr><tr><td>每根柱子宽度固定，柱子之间会有间距</td><td>每根柱子宽度可以不一样，且一般没有间距</td></tr><tr><td>横轴变量可以任意排序</td><td>横轴变量有一定顺序规则</td></tr></tbody></table><h4 id="hist">hist()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(x, bins=<span class="literal">None</span>, <span class="built_in">range</span>=<span class="literal">None</span>, density=<span class="literal">None</span>, weights=<span class="literal">None</span>, \</span><br><span class="line">        cumulative=<span class="literal">False</span>, bottom=<span class="literal">None</span>, histtype=<span class="string">&#x27;bar&#x27;</span>, align=<span class="string">&#x27;mid&#x27;</span>, \</span><br><span class="line">        orientation=<span class="string">&#x27;vertical&#x27;</span>, rwidth=<span class="literal">None</span>, log=<span class="literal">False</span>, color=<span class="literal">None</span>, \</span><br><span class="line">        label=<span class="literal">None</span>, stacked=<span class="literal">False</span>, normed=<span class="literal">None</span>, *, data=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td>【必选参数】作直方图所要用的数据，必须是一维数组；多维数组可以先进行扁平化再作图。</td></tr><tr><td style="text-align:center">bins</td><td>直方图的柱数，即要分的组数，默认为10。</td></tr><tr><td style="text-align:center">weights</td><td>与x形状相同的权重数组；将x中的每个元素乘以对应权重值再计数；如果normed或density取值为True，则会对权重进行归一化处理。这个参数可用于绘制已合并的数据的直方图。</td></tr><tr><td style="text-align:center">density</td><td>布尔值，可选参数。如果”True”，返回元组的第一个元素将会将计数标准化以形成一个概率密度，也就是说，直方图下的正积(或积分)总和为1。这是通过将计数除以数的数量来实现的观察乘以箱子的宽度而不是除以总数数量的观察。如果叠加也是“真实”的，那么柱状图被规范化为1。(替代normed)</td></tr><tr><td style="text-align:center">bottom</td><td>数组，标量值或None；每个柱子底部相对于y=0的位置。如果是标量值，则每个柱子相对于y=0向上/向下的偏移量相同。如果是数组，则根据数组元素取值移动对应的柱子；即直方图上下便宜距离。</td></tr><tr><td style="text-align:center">histtype</td><td>{‘bar’, ‘barstacked’, ‘step’, ‘stepfilled’}；'bar’是传统的条形直方图；'barstacked’是堆叠的条形直方图；'step’是未填充的条形直方图，只有外边框；‘stepfilled’是有填充的直方图；当histtvpe取值为’step’或’stepfilled’，rwidth设置失效，即不能指定柱子之间的间隔，默认连接在一起。</td></tr><tr><td style="text-align:center">align</td><td>{‘left’, ‘mid’, ‘right’}；‘left’：柱子的中心位于bins的左边缘；‘mid’：柱子位于bins左右边缘之间；‘right’：柱子的中心位于bins的右边缘。</td></tr><tr><td style="text-align:center">color</td><td>具体颜色，数组(元素为颜色)或None。</td></tr><tr><td style="text-align:center">label</td><td>字符串 (序列)或None；有多个数据集时，用label参数做标注区分。</td></tr><tr><td style="text-align:center">normed</td><td>是否将得到的直方图向量归一化，即显示占比，默认为0，不归一化；不推荐使用，建议改用density参数。</td></tr><tr><td style="text-align:center">edgecolor</td><td>直方图边框颜色。</td></tr><tr><td style="text-align:center">alpha</td><td>透明度</td></tr></tbody></table><p><strong>返回值</strong>:</p><p>n：数组或数组列表（直方图的值）</p><p>bins：数组（返回各个bin区间范围）</p><p>patches：列表或列表的列表（返回每个bins里面包含的数据，是一个list）</p><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.random.randint(<span class="number">140</span>, <span class="number">180</span>, size=<span class="number">200</span>)</span><br><span class="line">plt.hist(x, bins=<span class="number">10</span>, edgecolor=<span class="string">&#x27;w&#x27;</span>, color=<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_09-54-46.png" alt=""></p><h3 id="8、饼状图">8、饼状图</h3><blockquote><p>饼状图用来显示一个数据系列，具体来说，饼状图显示一个数据系列中各项目的占项目总和的百分比。</p><p>Matplotlib 提供了一个 pie()函数，该函数可以生成数组中数据的饼状图。您可使用 x/sum(x) 来计算各个扇形区域占饼图总和的<br>百分比。</p></blockquote><h4 id="pie">pie()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(x, explode=<span class="literal">None</span>, labels=<span class="literal">None</span>, colors=<span class="literal">None</span>, autopct=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td>数组序列，数组元素对应扇形区域的数量大小。</td></tr><tr><td style="text-align:center">labels</td><td>列表字符串序列，为每个扇形区域备注一个标签名字。</td></tr><tr><td style="text-align:center">colors</td><td>为每个扇形区域设置颜色，默认按照颜色周期自动设置。</td></tr><tr><td style="text-align:center">autopct</td><td>格式化字符串&quot;fmt%pct”，使用百分比的格式设置每个扇形区的标签，并将其放置在扇形区内。</td></tr><tr><td style="text-align:center">pctdistance</td><td>设置百分比标签与圆心的距离。</td></tr><tr><td style="text-align:center">labeldistance</td><td>设置各扇形标签 (图例)与圆心的距离。</td></tr><tr><td style="text-align:center">explode</td><td>指定饼图某些部分的突出显示，即呈现爆炸式。</td></tr><tr><td style="text-align:center">shadow</td><td>是否添加饼图的阴影效果。</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义饼的标签</span></span><br><span class="line">label = [<span class="string">&#x27;娱乐&#x27;</span>, <span class="string">&#x27;育儿&#x27;</span>, <span class="string">&#x27;饮食&#x27;</span>, <span class="string">&#x27;房贷&#x27;</span>, <span class="string">&#x27;交通&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>]</span><br><span class="line"><span class="comment"># 每个标签所占的数量</span></span><br><span class="line">x = [<span class="number">200</span>, <span class="number">500</span>, <span class="number">1200</span>, <span class="number">7000</span>, <span class="number">200</span>, <span class="number">900</span>]</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">plt.title(<span class="string">&#x27;饼图示例：8月份家庭支出&#x27;</span>)</span><br><span class="line"><span class="comment"># %.2f%%显示百分比，保留两位小数</span></span><br><span class="line">plt.pie(x, labels=label, autopct=<span class="string">&#x27;%.2f%%&#x27;</span>, colors=[<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_10-20-14.png" alt=""></p><h3 id="9、散点图">9、散点图</h3><blockquote><p>散点图也叫XY 图，它将所有的数据以点的形式展现在直角坐标系上，以显示变量之间的相互影响程度，点的位置由变量的数值决定</p><p>通过观察散点图上数据点的分布情况，我们可以推断出变量间的相关性。如果变量之间不存在相互关系，那么在散点图上就会表现为随机分布的离散的点，如果存在某种相关性，那么大部分的数据点就会相对密集并以某种趋势星现。</p></blockquote><h4 id="scatter">scatter()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y, s=<span class="literal">None</span>, c=<span class="literal">None</span>, marker=<span class="literal">None</span>, cmap=<span class="literal">None</span>, norm=<span class="literal">None</span>, \</span><br><span class="line">            vmin=<span class="literal">None</span>, vmax=<span class="literal">None</span>, alpha=<span class="literal">None</span>, linewidths=<span class="literal">None</span>, edgecolors=<span class="literal">None</span>, \</span><br><span class="line">            plotnonfinite=<span class="literal">None</span>, data=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x, y</td><td>散点的坐标</td></tr><tr><td>s</td><td>散点的面积</td></tr><tr><td>c</td><td>散点的颜色(默认值为蓝色，‘b’，其余颜色同plt.plot( ))</td></tr><tr><td>marker</td><td>散点样式(默认值为实心圆，&quot;o，其余样式同plt.plot( ))</td></tr><tr><td>alpha</td><td>散点透明度 ([0,1]之间的数，0表示完全透明，1则表示完全不透明)</td></tr><tr><td>linewidths</td><td>散点的边缘线宽</td></tr><tr><td>edgecolors</td><td>散点的边缘颜色</td></tr><tr><td>cmap</td><td>Colormap，默认 None，标量或者是一个 colormap 的名字，只有c是一个浮点数数组的时候才使用</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.random.rand(<span class="number">50</span>)</span><br><span class="line">y = np.random.rand(<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 生成一个浮点数或者N维浮点数组，取值范围：正态分布的随机样本数</span></span><br><span class="line">s = (<span class="number">100</span> * np.random.randn(<span class="number">50</span>))</span><br><span class="line"><span class="comment"># 颜色随机</span></span><br><span class="line">colors = np.random.rand(<span class="number">50</span>)</span><br><span class="line">plt.scatter(x, y, s, c=colors)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_10-36-18.png" alt=""></p><h3 id="10、词云图">10、词云图</h3><blockquote><p>WordCloud 是一款python环境下的词云图工具包，同时支持python2和python3把关键词数据转换成直观且有趣的图文模式</p></blockquote><p>pip安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure><p>conda安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge wordcloud</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1Jt4y1h7Vt?t=665.4&amp;p=61">【b站视频】</a></p><h3 id="11、保存图片">11、保存图片</h3><h4 id="savefig">savefig()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(fname, dpi=<span class="literal">None</span>, facecolor=<span class="string">&#x27;w&#x27;</span>, edgecolor=<span class="string">&#x27;w&#x27;</span>, orientation=<span class="string">&#x27;portrait&#x27;</span>, papertype=<span class="literal">None</span>, \</span><br><span class="line">           <span class="built_in">format</span>=<span class="literal">None</span>, transparent=<span class="literal">False</span>, bbox_inches=<span class="literal">None</span>, pad_inches=<span class="number">0.1</span>, frameon=<span class="literal">None</span>, metadata=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">fname</td><td>（字符串或者仿路径或仿文件）如果格式已经设置，这将决定输出的格式并将文件按fname来保存。如果格式没有设置，在fname有扩展名的情况下推断按此保存，没有扩展名将按照默认格式存储为“png”格式，并将适当的扩展名添加在fname后面。</td></tr><tr><td style="text-align:center">dpi</td><td>分辨率，每英寸的点数</td></tr><tr><td style="text-align:center">facecolor</td><td>(颜色或“auto”，默认值:“auto”) : 图形表面颜色。如果是“auto”，使用当前图形的表面颜色</td></tr><tr><td style="text-align:center">edgecolor</td><td>(颜色或“auto”，默认值:“auto”) : 图形边缘颜色。如果是“auto”，使用当前图形的边缘颜色</td></tr><tr><td style="text-align:center">format</td><td>字符串，文件格式，比如“png”，“pdf”，“svg”等，未设置的行为将被记录在fname中</td></tr><tr><td style="text-align:center">transparent</td><td>用于将图片背景设置为透明。图形也会是透明，除非通过关键字参数指定了表面颜色或边缘</td></tr></tbody></table><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">50</span>, <span class="number">51</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.savefig(<span class="string">&#x27;第一个绘图程序.jpg&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="五、pandas">五、pandas</h2><h3 id="1、series">1、series</h3><blockquote><p>Series 结构，也称 Series 序列，是 Pandas 常用的数据结构之一，它是一种类似于一维数组的结构，由一组<strong>数据值</strong> (value) 和一组<strong>标签</strong>组成，其中标签与数据值具有对应关系。</p><p>标签不必是唯一的，但必须是<strong>哈希类型</strong>。该对象既支持基于整数的索引，也支持基于标签的索引，并提供了许多万法来执行涉及索引的操作。ndarray的统计方法已被覆盖，以自动排除缺失的数据 (目前表示为<strong>NaN</strong>)</p><p>Series 可以保存任何数据类型，比如整数、字符串、浮点数、Pthon 对象等，它的标签默认为整数，从0 开始依次递增。Series的结构图，如下所示:</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/da/Snipaste_2023-01-26_13-48-17.png" alt=""></p></blockquote><h4 id="1-1、创建">1.1、创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">data</td><td>输入的数据，可以是列表、常量、ndarray数组等，如果是字典，则保持参数顺序</td></tr><tr><td style="text-align:center">index</td><td>索引值，必须是可散列的(不可变数据类型（str，bytes和数值类型）），并且与数据具有相同的长度，允许使用非唯一索引值。如果未提供，将默认为Rangelndex(0, 1, 2, … , n)</td></tr><tr><td style="text-align:center">dtype</td><td>输出系列的数据类型。如果未指定，将从数据中推断</td></tr><tr><td style="text-align:center">name</td><td>为Series定义一个名称</td></tr><tr><td style="text-align:center">copy</td><td>表示对data进行拷贝，默认为 False，仅影啊Series和ndarray数组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2023/01/08/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/08/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Linux目录结构">一、Linux目录结构</h2><p>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录<code>“/”</code>，然后在此目录下再创建其他的目录。</p><p><em><strong>在Linux世界里,一切皆文件</strong></em></p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_13-29-07.png" style="zoom: 80%;" /> <ul><li><p><strong>/bin [常用]</strong> (usr/bin 、 /usr/local/bin)</p><blockquote><p>是Binary的缩写,这个目录存放着最经常使用的命令</p></blockquote></li><li><p><strong>/sbin</strong> (usr/sbin ./usr/local/sbin)</p><blockquote><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p></blockquote></li><li><p><strong>/home [常用]</strong></p><blockquote><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名，</p></blockquote></li><li><p><strong>/root [常用]</strong></p><blockquote><p>该目录为系统管理员，也称作超级权限者的用户主目录</p></blockquote></li><li><p><strong>/lib</strong></p><blockquote><p>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</p></blockquote></li><li><p><strong>/lost+found</strong></p><blockquote><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p></blockquote></li><li><p><strong>/etc [常用]</strong></p><blockquote><p>所有的系统管理所需要的配置文件和子目录my.conf</p></blockquote><ul><li><p>/etc/passwd</p><ul><li><p>用户( user）的配置文件，记录用户的各种信息</p></li><li><p>每行的含义 : 用户名:口今:用户标识号:组标识号(gid):注释性描述:主目录:登录Shell</p></li></ul></li><li><p>/etc/shadow</p><ul><li><p>口令的配置文件</p></li><li><p>每行的含义:登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p></li></ul></li><li><p>/etc/group</p><ul><li><p>组(group)的配置文件，记录Linux包含的组的信息</p></li><li><p>每行含义 : 组名:口令:组标识号:组内用户列表</p></li></ul></li></ul></li><li><p><strong>/usr [常用]</strong></p><blockquote><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录</p></blockquote></li><li><p><strong>/boot [常用]</strong></p><blockquote><p>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p></blockquote></li><li><p><strong>/proc [别动]</strong></p><blockquote><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p></blockquote></li><li><p><strong>/srv [别动]</strong></p><blockquote><p>service缩写，该目录存放一些服务启动之后需要提取的数据</p></blockquote></li><li><p><strong>/sys [别动]</strong></p><blockquote><p>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</p></blockquote></li><li><p><strong>/tmp</strong></p><blockquote><p>这个目录是用来存放一些临时文件的</p></blockquote></li><li><p><strong>/dev</strong></p><blockquote><p>类似于windows的设备管理器，把所有的硬件用文件的形式存储</p></blockquote></li><li><p><strong>/media [常用]</strong></p><blockquote><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p></blockquote></li><li><p><strong>/mnt [常用]</strong></p><blockquote><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上然后进入该目录就可以查看里的内容了。 d:/myshare</p></blockquote></li><li><p><strong>/opt</strong></p><blockquote><p>这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可放到该目录下。默认为空</p></blockquote></li><li><p><strong>/usr/local [常用]</strong></p><blockquote><p>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p></blockquote></li><li><p><strong>/var [常用]</strong></p><blockquote><p>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p></blockquote></li><li><p><strong>/selinux [security-enhanced linux]</strong></p><blockquote><p>SELinux是一种安全子系统,它能控制程序只能访问特定文件,有三种工作模式，可以自行设置</p></blockquote></li></ul><h2 id="二、远程">二、远程</h2><h3 id="远程登录">远程登录</h3><p>具体开发中的应用场景:</p><ol><li>linux服务器是开发小组共享</li><li>正式上线的项目是运行在公网</li><li>因此程序员需要远程登录到Linux进行项目管理或者开发</li><li>画出简单的网络拓扑示意图(帮助理解)</li><li>远程登录客户端有 Xshell6，Xftp6，其它的远程工具大同小异</li></ol><p><a href="https://www.xshell.com/zh/free-for-home-school/">Xshell6，Xftp6下载</a></p><p><strong>下载流程:</strong> 输入姓名、邮件、勾选两者，然后点击下载，去邮箱里面等待邮件，点击链接即可下载</p><p><strong>使用Xshell连接</strong></p><ul><li>1、获取ip：</li></ul><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-03-43.png" style="zoom:80%;" /> <ul><li>2、打开主机命令提示符终端，测试是否是否连通</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.37.129</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-09-08.png" alt=""></p><p>失败的话，检查主机服务</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-14-23.png" style="zoom:67%;" /> <ul><li>3、打开xshell</li></ul><p>新建会话</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-19-11.png" alt=""></p><p>点击创建好的会话</p><p>输入账号密码（也可以在新建会话的时候，选择左边用户身份验证，输入账号密码）</p><p>后面的弹窗选择接受并保存（中间那个）</p><p>结果：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-25-28.png" style="zoom:80%;" />  <h3 id="远程文件传输">远程文件传输</h3><p><strong>使用xftp</strong></p><p>1、新建会话</p><p>乱码注意第五步，或者右键建立好的会话，选择属性</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_15-36-59.png" style="zoom:50%;" /> <h2 id="三、vi、vim">三、vi、vim</h2><blockquote><p>Linux 系统会内置 vi 文本编辑器<br>Vim 具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别语法的正确性方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p></blockquote><h3 id="模式">模式</h3><ul><li><p><strong>正常模式</strong></p><p>以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，你可以使用[上下左右] 按键来移动光标，你可以使用[删除字符]或[删除整行]来处理档案内容 ，也可以使用[复制、粘贴]来处理你的文件数据。</p></li><li><p><strong>插入模式</strong></p><p>按下<strong>i,l,o,o,a,A,R</strong>等任何一个字母之后才会进入编辑模，<strong>一般来说按i即可</strong>.</p></li><li><p><strong>命令行模式</strong></p><p>在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作则是在此模式中达成的!</p></li></ul><p><strong>模式切换</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_22-02-42.png" alt=""></p><p><strong>:w</strong>：保存文件但不退出vi</p><p><strong>:w file</strong>： 将修改另外保存到file中，不退出vi</p><p><strong>:w!</strong>： 强制保存，不推出vi</p><p><strong>:wq</strong>： 保存文件并退出vi</p><p><strong>:wq!</strong>： 强制保存文件，并退出vi</p><p><strong>:q</strong>： 不保存文件，退出vi</p><p><strong>:q!</strong>： 不保存文件，强制退出vi</p><p><strong>:e!</strong>： 放弃所有修改，从上次保存文件开始再编辑</p><h3 id="快捷键">快捷键</h3><table><thead><tr><th style="text-align:center">效果</th><th style="text-align:left">使用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>复制</strong></td><td style="text-align:left">【正常模式】yy：复制光标所在的一行，nyy：复制多行，例如：5yy就是复制光标开始以下5行</td></tr><tr><td style="text-align:center"><strong>粘贴</strong></td><td style="text-align:left">【正常模式】p：粘贴内容</td></tr><tr><td style="text-align:center"><strong>删除</strong></td><td style="text-align:left">【正常模式】dd：删除光标所在的一行，ndd：删除多行，例如：5dd就是删除光标开始以下5行</td></tr><tr><td style="text-align:center"><strong>查找</strong></td><td style="text-align:left">【命令行模式】/关键字，回车，按下n（查找下一个）</td></tr><tr><td style="text-align:center"><strong>行号</strong></td><td style="text-align:left">【命令行模式】:set nu：打开行号；:set nonu：关闭行号</td></tr><tr><td style="text-align:center"><strong>定位</strong></td><td style="text-align:left">【正常模式】G：行尾；gg：行首；n + shift+g：定位到第 n 行</td></tr><tr><td style="text-align:center"><strong>撤回</strong></td><td style="text-align:left">【正常模式】u：撤回</td></tr></tbody></table><h2 id="四、关机重启同步，登录注销">四、关机重启同步，登录注销</h2><p><strong>关机</strong></p><ul><li><p>立即关机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">halt</span><br></pre></td></tr></table></figure></li><li><p>一分钟后关机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h 1</span><br></pre></td></tr></table></figure></li></ul><p><strong>重启</strong></p><ul><li><p>立即重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ul><p><strong>同步</strong></p><ul><li><p>把内存中的数据同步到磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sync</span></span><br></pre></td></tr></table></figure></li></ul><p>目前的 shutdown/reboot/halt 等命令均已经在关机前进行sync，但是小心驶得万年船，还是在操作前使用一次sync</p><p><strong>登录注销</strong></p><p>登录时<strong>尽量少用 root 帐号登录</strong>，因为它是系统管理员，最大的权限，<strong>避免操作失误</strong>。可以利用普通用户登录，登录后再用”su- 用户名’命令来切换成系统管理员身份</p><ul><li><p>切换用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure></li><li><p>注销</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-08_23-01-19.png" alt=""></p><h2 id="五、用户管理">五、用户管理</h2><h3 id="用户">用户</h3><p><strong>1、添加用户</strong></p><ul><li>默认目录在/home</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br></pre></td></tr></table></figure><p><strong>细节说明:</strong><br><br>当创建用户成功后，会自动的创建和用户同名的家目录<br></p><ul><li>也可以通过以下命令，给新创建的用户指定家目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d 指定目录 新的用户名，</span><br></pre></td></tr></table></figure><p><strong>2、设置密码</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p><strong>3、显示当前用户所在目录</strong></p><p>Print Working Directory</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p><strong>4、删除用户</strong></p><ul><li>基本用法，但是保留了家目录（一般建议保留）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure><ul><li>删除用户，以及用户主目录（谨慎使用）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure><p><strong>5、查询用户信息</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> 用户名</span><br></pre></td></tr></table></figure><p><strong>6、切换用户</strong></p><ul><li>权限高到权限低不需要输入密码，反之需要</li><li>返回原来用户使用<code>exit</code> 或者 <code>logout</code></li></ul><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 要切换的用户名</span><br></pre></td></tr></table></figure><p><strong>7、查看当前用户信息</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span> am ic</span><br></pre></td></tr></table></figure><h3 id="用户组">用户组</h3><p>结合<strong>第十二节 组</strong> 学习</p><p>系统可以对有共性/权限的多个用户进行统一管理</p><p><strong>1、新增组</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure><p><strong>2、删除组</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><p><strong>3、增加用户时，直接指定到用户组</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br></pre></td></tr></table></figure><p><strong>4、修改用户组</strong></p><p>已有的组修改组，没有组的用户指定组</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户组 用户名</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d 目录名 用户名</span><br></pre></td></tr></table></figure><p>说明：改变用户登陆的初始目录；[<strong>特别说明</strong>]：用户需要有进入到这个目录的权限才行</p><h2 id="六、运行级别">六、运行级别</h2><p><strong>1、说明</strong></p><table><thead><tr><th style="text-align:center">运行级别</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td>关机</td></tr><tr><td style="text-align:center">1</td><td>单用户[找回丢失密码]</td></tr><tr><td style="text-align:center">2</td><td>多用户状态没有网络服务</td></tr><tr><td style="text-align:center"><strong>3</strong></td><td><strong>多用户状态有网络服务</strong></td></tr><tr><td style="text-align:center">4</td><td>系统未使用保留给用户</td></tr><tr><td style="text-align:center"><strong>5</strong></td><td><strong>图形界面</strong></td></tr><tr><td style="text-align:center">6</td><td>系统重启</td></tr></tbody></table><p><strong>常用运行级别是3和5</strong>，也可以指定默认运行级别 ，后面演示</p><p><strong>2、切换不同的运行级别</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init [0123456] </span><br></pre></td></tr></table></figure><p><strong>3、指定默认运行级别</strong></p><p>在/etc/inittab文件中</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-10_11-45-55.png" alt=""></p><h3 id="面试题">面试题</h3><p>如何找回root密码？</p><p>1、centos7以后系统</p><p><strong>[第一步]</strong>、启动系统、进入开机界面、按‘e’进入编辑界面（注意要快）</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-10_12-26-56.png" alt=""></p><p><strong>[第二步]</strong>、在图示位置(UTF-8后面)输入<code>init=/bin/sh</code>，然后按Ctrl + x进入<strong>单用户模式</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-10_12-09-01.png" alt=""></p><p><strong>[第三步]</strong>、</p><ul><li>1、输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure><ul><li>2、回车，再输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>输入要设定的密码，回车再次输入，回车，显示passwd…就说明修改成功了</p><ul><li>3、回车，再输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /.autorelabel</span><br></pre></td></tr></table></figure><ul><li>4、回车，再输入以下命令点击回车，就可以等待系统自动修改密码了，时间会有点长，耐心等待即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> /sbin/init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-10_12-26-22.png" alt=""></p><h2 id="七、帮助命令">七、帮助命令</h2><p><strong>1、man指令</strong></p><blockquote><p>man命令是Linux下最核心的命令之一。而man命令也并不是英文单词“man”的意思，它是单词manual的缩写，即使用手册的意思。man命令会列出一份完整的说明。 其内容包括命令语法、各选项的意义及相关命令 。更为强大的是，不仅可以查看Linux中命令的使用帮助，还可以查看软件服务配置文件、系统调用、库函数等帮助信息。man手册页文件存放在/usr/share/man目录下。</p></blockquote><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 要查询的指令</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td>在所有的man帮助手册中搜索</td></tr><tr><td style="text-align:center">-d</td><td>主要用于检查，如果用户加入了一个新的文件，就可以用这个参数检查是否出错</td></tr><tr><td style="text-align:center">-f</td><td>显示给定关键字的简短描述信息</td></tr><tr><td style="text-align:center">-p</td><td>指定内容时使用分页程序</td></tr><tr><td style="text-align:center">-M</td><td>指定man手册搜索的路径</td></tr><tr><td style="text-align:center">-w</td><td>显示文件所在位置</td></tr></tbody></table><p><strong>快捷键</strong></p><table><thead><tr><th style="text-align:center">效果</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">退出</td><td style="text-align:center">q</td></tr><tr><td style="text-align:center">按行下翻</td><td style="text-align:center">Enter</td></tr><tr><td style="text-align:center">按页下翻</td><td style="text-align:center">Space</td></tr><tr><td style="text-align:center">上翻一页</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">/关键字</td></tr></tbody></table><p><strong>2、help指令</strong></p><blockquote><p>help命令用于<strong>显示shell内部命令</strong>的帮助信息。<br>help命令只能显示shell内部命令的帮助信息，而linux系统中绝大多数命令是外部命令，所以help命令的作用非常有限。而对于外部命令的帮助信息可以使man命令或者info命令查看。</p></blockquote><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> 要查询的参数</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td>输出每个命令的简短描述</td></tr><tr><td style="text-align:center">-s</td><td>输出短格式的帮助信息</td></tr><tr><td style="text-align:center">-m</td><td>以伪man手册的格式显示帮助信息</td></tr></tbody></table><h2 id="八、文件目录指令">八、文件目录指令</h2><h3 id="pwd-ls-cd-mkdir-rmdir-touch-cp-rm-mv">- pwd|ls|cd|mkdir|rmdir|touch|cp|rm|mv</h3><ul><li><strong>pwd</strong></li></ul><p><strong>功能：显示当前工作目录的绝对路径</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><ul><li><strong>ls</strong></li></ul><p><strong>功能：查看目录下的文件和目录</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> 要查看的目录</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td>都显示，包括隐藏的</td></tr><tr><td style="text-align:center">-l</td><td>以列表的方式显示信息</td></tr></tbody></table><p>也可以组合起来写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">ls</span> -la</span><br></pre></td></tr></table></figure><p>用适合人的方式显示：比如文件大小4，则会显示成4.0k</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lh</span><br></pre></td></tr></table></figure><ul><li><strong>cd</strong></li></ul><p><strong>功能：切换工作目录</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 指定目录</span><br></pre></td></tr></table></figure><p>实例：</p><p>返回用户家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">或者直接</span><br><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>回到当前目录的上一级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><ul><li><strong>mkdir</strong></li></ul><p><strong>功能：创建目录</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [选项] 要创建的目录</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-p</td><td>创建多级目录</td></tr></tbody></table><ul><li><strong>rmdir</strong></li></ul><p><strong>功能：删除空目录</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> 要删除的目录</span><br></pre></td></tr></table></figure><p>目录非空则使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf</span><br></pre></td></tr></table></figure><ul><li><strong>touch</strong></li></ul><p><strong>功能：创建空文件</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名</span><br></pre></td></tr></table></figure><ul><li><strong>cp</strong></li></ul><p><strong>功能：拷贝文件到指定目录下</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [选项] 需拷贝的文件 指定目录</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-r</td><td>递归复制整个文件夹</td></tr></tbody></table><p>重复文件强制覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">cp</span> -r 需拷贝的文件 指定目录</span><br></pre></td></tr></table></figure><ul><li><strong>rm</strong></li></ul><p><strong>功能：移除文件或者目录</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 要删除的目录</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-r</td><td>递归删除整个文件夹</td></tr><tr><td style="text-align:center">-f</td><td>强制删除不提示</td></tr></tbody></table><ul><li><strong>mv</strong></li></ul><p><strong>功能：移动文件与目录 或 重命名</strong></p><p>基本语法：</p><p>移动文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件或目录 移动到的新目录</span><br></pre></td></tr></table></figure><p>重命名（位置不变即为重命名）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件或目录 原目录</span><br></pre></td></tr></table></figure><h3 id="cat-more-less-echo-head-tail">- cat|more|less|echo|head|tail|&gt;|&gt;&gt;</h3><ul><li><strong>cat</strong></li></ul><p><strong>功能：查看文件内容</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [选项] 要查看的文件</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td>显示文件内容并显示行号</td></tr></tbody></table><p>为了浏览方便，一般会带上管道命令 <code>| more</code></p><ul><li><strong>more</strong></li></ul><p><strong>功能:</strong></p><blockquote><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more<br>指令中内置了若干快捷键(交互的指令)</p></blockquote><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure><p><strong>快捷键</strong></p><table><thead><tr><th style="text-align:center">操作</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">space</td><td>下翻一页</td></tr><tr><td style="text-align:center">enter</td><td>下翻一行</td></tr><tr><td style="text-align:center">q</td><td>退出</td></tr><tr><td style="text-align:center">Ctrl + F</td><td>向下滚动一屏</td></tr><tr><td style="text-align:center">Ctrl + B</td><td>返回上一屏</td></tr><tr><td style="text-align:center">=</td><td>输出当前行的行号</td></tr><tr><td style="text-align:center">:f</td><td>输出文件名和当前行行号</td></tr></tbody></table><ul><li><strong>less</strong></li></ul><p><strong>功能:</strong></p><blockquote><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，<strong>对于显示大型文件具有较高的效率</strong></p></blockquote><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 要查看的文件</span><br></pre></td></tr></table></figure><p><strong>快捷键</strong></p><table><thead><tr><th style="text-align:center">操作</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">space</td><td>下翻一页</td></tr><tr><td style="text-align:center">[pagedown]</td><td>下翻一页</td></tr><tr><td style="text-align:center">[pageup]</td><td>上翻一页</td></tr><tr><td style="text-align:center">/关键字</td><td>向下搜寻[关键字]的功能; n: 向下查找; N: 向上查找</td></tr><tr><td style="text-align:center">?关键字</td><td>向上搜寻[关键字]的功能; n: 向上查找; N: 向下查找</td></tr><tr><td style="text-align:center">q</td><td>退出</td></tr></tbody></table><ul><li><strong>echo</strong></li></ul><p><strong>功能：输出内容到控制台</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [选项] 输出内容</span><br></pre></td></tr></table></figure><ul><li><strong>head</strong></li></ul><p><strong>功能：用于显示文件开头部分内容，默认显示10行</strong></p><p>基本语法：</p><p>缺省显示10行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> 文件</span><br></pre></td></tr></table></figure><p>显示n行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 行数n</span><br></pre></td></tr></table></figure><ul><li><strong>tail</strong></li></ul><p><strong>功能：用于显示文件尾部部分内容，默认显示10行</strong></p><p>基本语法：</p><p>缺省显示10行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> 文件</span><br></pre></td></tr></table></figure><p>显示n行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 行数n</span><br></pre></td></tr></table></figure><p>实时追踪该文档的所有更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f 文件</span><br></pre></td></tr></table></figure><ul><li><strong>&gt;、&gt;&gt;</strong></li></ul><p><strong>功能：</strong><br>&gt;: 输出重定向（覆盖）<br>&gt;&gt;: 追加<br>基本语法加案例</p><p>（1）功能描述 : 列表的内容写入文件a.txt中( 覆盖写)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l &gt; 文件</span><br></pre></td></tr></table></figure><p>（2）功能描述 : 列表的内容追加到文件aa.txt的末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al &gt;&gt; 文件</span><br></pre></td></tr></table></figure><p>（3）功能描述 : 将文件1的内容覆盖到文件2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 文件1 &gt; 文件2</span><br></pre></td></tr></table></figure><p>（4） 追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> “内容<span class="string">&quot; &gt;&gt; 文件 </span></span><br></pre></td></tr></table></figure><h3 id="ln-history-date">- ln|history|date</h3><ul><li><strong>ln</strong></li></ul><p><strong>功能：软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s [源文件或目录] [软链接名]</span><br></pre></td></tr></table></figure><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-10_16-55-06.png" alt=""></p><p>pwd显示的软链接，比如上面的案例，再输入pwd，则会显示/root/demo/ggw软链接</p><ul><li><strong>history</strong></li></ul><p><strong>功能：查看已经执行过历史命令,也可以执行历史指令</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure><p>查看 n 条最近使用的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> n</span><br></pre></td></tr></table></figure><p>执行历史编号为 n 的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!n</span><br></pre></td></tr></table></figure><h2 id="九、时间日期类">九、时间日期类</h2><ul><li><strong>date</strong></li></ul><p><strong>功能1：显示当前时间</strong></p><p>基本语法：</p><p>（1）显示当前时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> </span><br></pre></td></tr></table></figure><p>（2）显示当前年份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> +%Y</span><br></pre></td></tr></table></figure><p>（3）显示当前月份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> +%m</span><br></pre></td></tr></table></figure><p>（4）显示当前是那一天</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> +%d</span><br></pre></td></tr></table></figure><p>（5）显示当前年月日时分秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure><p><strong>功能2：设置日期</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -s 字符串时间</span><br></pre></td></tr></table></figure><p>案例：</p><p>设置成：2020-11-03 20:03:21</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;2020-11-03 20:03:21&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>cal</strong></li></ul><p><strong>功能：查看日历</strong></p><p>基本语法：</p><p>缺省显示本月日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal [选项]</span><br></pre></td></tr></table></figure><p>案例：</p><p>显示某一年的日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 年份(2023)</span><br></pre></td></tr></table></figure><h2 id="十、搜索查找类">十、搜索查找类</h2><ul><li><strong>find</strong></li></ul><p><strong>功能：从指定目录向下递归遍历其各个子目录，将满足条件的文件或目录显示在终端上面</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [搜索范围] [选项]</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-name&lt;查询方式&gt;</td><td>按照指定文件名查找模式查找文件</td></tr><tr><td style="text-align:center">-user&lt;用户名&gt;</td><td>查找属于指定用户名的所有文件</td></tr><tr><td style="text-align:center">-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table><p>案例:<br></p><p>按文件名:根据名称查找/home 目录下的hello.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -name hello.txt</span><br></pre></td></tr></table></figure><p>案例2 : 按拥有者 :查找/opt目录下，用户名称为 nobody的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /opt -user nobody</span><br></pre></td></tr></table></figure><p>案例3 : 查找整个linux系统下大于200M的文件( +n 大于 -n小于 n等于,单位有 k,M,G)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -size +200M</span><br></pre></td></tr></table></figure><ul><li><strong>locate</strong></li></ul><p><strong>功能:</strong></p><blockquote><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻</p></blockquote><p>基本语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate 搜索文件</span><br></pre></td></tr></table></figure><p>特别说明由于locate指令基于数据库进行查询，所以<strong>第一次运行前，必须使用updatedb指令创建locate数据库</strong>.<br>案例: <br>请使用locate指令快速定位 hello.txt 文件所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate hello.txt</span><br></pre></td></tr></table></figure><ul><li><strong>which</strong></li></ul><p><strong>功能：查看某个指令在那个目录下</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> 指令</span><br></pre></td></tr></table></figure><ul><li><strong>grep和“|”</strong></li></ul><p><strong>功能：grep: 过滤查找; 管道符“|”:表示将前一个命令的处理结果输出传递给后面的命令处理。</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 查找内容 源文件</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td>显示匹配行以及行号</td></tr><tr><td style="text-align:center">-i</td><td>忽略字母大小写</td></tr></tbody></table><p>案例：</p><p>请在hello.txt文件中，查找“yes”所在的行，并显示行号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> hello.txt | grep -n <span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n <span class="string">&quot;yes&quot;</span> ./hello.txt</span><br></pre></td></tr></table></figure><h2 id="十一、压缩和解压类">十一、压缩和解压类</h2><ul><li><strong>gzip / gunzip</strong></li></ul><p><strong>功能：gzip: 压缩文件; gunzip: 解压</strong></p><p>基本语法：</p><p>描述：压缩文件，但是只能是*.gz文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip 文件</span><br></pre></td></tr></table></figure><p>描述：解压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip 文件.gz</span><br></pre></td></tr></table></figure><ul><li><strong>zip / unzip</strong></li></ul><p><strong>功能：zip: 压缩文件; unzip: 解压; 在项目打包发布中很有用</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip [选项] 打包后文件名.zip 要压缩的内容</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip [选项] xxx.zip</span><br></pre></td></tr></table></figure><p>unzip<strong>常用选项</strong></p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td>指定压缩文件存放目录</td></tr></tbody></table><p>案例</p><p>1、将/home下的所有文件/文件夹进行压缩成myhome.zip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r myhome.zip /home/</span><br></pre></td></tr></table></figure><p>这条命令会把home目录也压缩进去</p><p>2、将myhome.zip解压到/opt/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -d/opt/tmp /home/myhome.zip</span><br></pre></td></tr></table></figure><ul><li>tar</li></ul><p><em><em>功能：打包指令，最后的文件是</em>.tar.gz</em>*</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] 打包后的文件名.tar.gz 打包内容</span><br></pre></td></tr></table></figure><p>常用选项：</p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td>产生.tar打包文件</td></tr><tr><td style="text-align:center">-v</td><td>显示详细信息</td></tr><tr><td style="text-align:center">-f</td><td>指定压缩后的文件名</td></tr><tr><td style="text-align:center">-z</td><td>打包的同时压缩</td></tr><tr><td style="text-align:center">-x</td><td>解压缩.tar文件</td></tr></tbody></table><p>案例：</p><p>1、压缩多个文件，将/home/pig.txt 以及 /home/cat.txt 压缩成 pc.tar.gz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt</span><br></pre></td></tr></table></figure><p>2、将/home文件夹压缩成 demo.tar.gz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf demo.tar.gz /home/</span><br></pre></td></tr></table></figure><p>3、将 pc.tar.gz解压到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pc.tar.gz</span><br></pre></td></tr></table></figure><p>4、将demo.tar.gz解压到 /opt/tmp2目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/tmp2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /home/demo.tar.gz -C /opt/tmp2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_21-05-14.png" alt=""></p><h2 id="十二、组">十二、组</h2><p>结合<strong>第五节 用户管理的用户组</strong> 学习</p><p>在linux中，所有用户都必须属于一个组里面，不能独立于组外</p><h3 id="1、所有者">1、所有者</h3><p>一般为文件的创建者，谁创建了，就自然属于谁</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_21-32-33.png" alt=""></p><ul><li><strong>chown</strong></li></ul><p><strong>功能：修改文件/目录的所有者</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> 用户名 文件/目录</span><br></pre></td></tr></table></figure><p>常用选项</p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-R</td><td>如果是目录则其下所有子文件或目录递归生效</td></tr></tbody></table><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_21-40-46.png" alt=""></p><h3 id="2、所在组">2、所在组</h3><p>当某个用户创建了一个文件后，这个文件就属于用户所在的组</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_21-48-13.png" alt=""></p><ul><li><strong>chgrp</strong></li></ul><p><strong>功能：修改文件所在的组</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> 组名 文件名</span><br></pre></td></tr></table></figure><p>用法与chown类似</p><p>常用选项</p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-R</td><td>如果是目录则其下所有子文件或目录递归生效</td></tr></tbody></table><h3 id="3、权限">3、权限</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_22-12-30.png" alt=""></p><p>0 - 9位说明</p><table><thead><tr><th style="text-align:center">0 - 9位</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">第0位</td><td style="text-align:left">确定文件类型：<br>l 是链接，相当于Windows快捷方式<br>d 是目录，相当于windows文件夹<br>c 是字符设备文件： 鼠标键盘<br>b 是块设备，比如硬盘</td></tr><tr><td style="text-align:center">第1 - 3位</td><td style="text-align:left">确定文件所有者的文件权限</td></tr><tr><td style="text-align:center">第4 - 6位</td><td style="text-align:left">确定文件所属组的权限</td></tr><tr><td style="text-align:center">第7 - 9位</td><td style="text-align:left">确定其他用户拥有的权限</td></tr></tbody></table><ul><li><strong>rwx作用到文件</strong></li></ul><p>1、[r]：代表可读(read)：可以读取,查看<br>2、[w]：代表可写(write)：可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.<br>3、[×]：代表可执行(execute)：可以被执行</p><ul><li><strong>rwx作用到目录</strong></li></ul><p>1、[r]：代表可读(read)：可以读取，ls查看目录内容<br>2、[w]：代表可写(write)：可以修改,对目录内创建文件 + 删除文件 + 重命名目录<br>3、[x]：代表可执行(execute)：可以进入该目录</p><p><strong>rwx还可以用数字表示，r=4，w=2，x=1，则rwx=7</strong></p><p>其他说明：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_22-41-05.png" alt=""></p><p>这个数字代表：文件：则代表的是硬连接数；目录：则代表的是子目录数</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-11_22-46-22.png" alt=""></p><ul><li><strong>chmod</strong></li></ul><p><strong>功能：修改文件或目录权限</strong></p><p>基本语法：</p><p>u: 所有者; g: 所在组; o: 其他人; a: 所有人</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=x 文件名/目录名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> o+w 文件名/目录名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a-x 文件名/目录名</span><br></pre></td></tr></table></figure><p>案例：</p><p>1、给abc文件的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=rx abc</span><br></pre></td></tr></table></figure><p>用数字表示等同于(rwx = 4 + 3 + 1, rx = 4 + 1, x = 1)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 751 abc</span><br></pre></td></tr></table></figure><p>2、文件的所有者除去执行的权限，增加组写的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-x,g+w abc</span><br></pre></td></tr></table></figure><h2 id="十三、Shell编程">十三、Shell编程</h2><h3 id="1、了解">1、了解</h3><ul><li><p><strong>为什么要学习Shell编程</strong></p><ul><li>1、linux运维工程师在进行服务器集群管理时，需要编写shell程序来进行服务器管理。</li><li>2、对于JavaEE和Python程序员来说，是工作的需要，上级可能会要求编写一些shell脚本进行型程序或者是去维护服务器，比如编写一个定时备份服务器的脚本。</li><li>对于大数据程序员来说，，需要编写shell程序来管理集群。</li></ul></li><li><p><strong>Shell是什么</strong></p><p>Shell是一个命令解释器，为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，</p><p>用户可以使用Shell来启动、挂起、停止甚至编写一些程序。</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/linux-shell.png" alt=""></p></li></ul><h3 id="2、脚本的执行方式">2、脚本的执行方式</h3><ul><li><p><strong>脚本格式要求</strong></p><ul><li>1、脚本要以#!/bin/bash开头</li><li>2、脚本要有可执行权限</li></ul></li><li><p><strong>脚本常用的执行方式</strong></p><ul><li><p>方式1、输入脚本的绝对路径或相对路径</p><p>说明：首先要赋予脚本可执行权限，再执行脚本</p></li><li><p>方式2、sh + 脚本</p><p>说明：不用赋予脚本权限，直接执行即可</p></li></ul></li></ul><p>案例：创建一个Shell脚本，执行输出hello world</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>使用方式1执行</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_01-22-45.png" alt=""></p><p>使用方式2执行</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_01-25-49.png" alt=""></p><h3 id="3、变量">3、变量</h3><ul><li><strong>变量的介绍</strong></li></ul><p>1、Shell中的变量分为，系统变量和用户自定义变量</p><p>2、系统变量：$HOME, $PWD、$%SHELL、$USER等等</p><ul><li><strong>set</strong></li></ul><p><strong>功能：显示当前shell中的所有变量</strong></p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><ul><li><strong>Shell变量定义</strong></li></ul><p>基本语法：</p><p>1、定义变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名=值</span><br></pre></td></tr></table></figure><p>2、撤销变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure><p>3、声明静态变量(静态变量不能被unset)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly 变量</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;--------------------------&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、定义变量a</span></span><br><span class="line">a=114514</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出变量要加上$</span></span><br><span class="line">echo a=$a</span><br><span class="line">echo &quot;a=$a&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;--------------------------&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、撤销变量a</span></span><br><span class="line">unset a</span><br><span class="line">echo &quot;a=$a&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;--------------------------&quot;</span><br><span class="line">readonly b=2</span><br><span class="line">echo &quot;b=$b&quot;</span><br><span class="line">unset b</span><br><span class="line">echo &quot;b=$b&quot;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_10-28-13.png" alt=""></p><ul><li><strong>定义变量的规则</strong></li></ul><p>1、变量可以由字母、数字和下划线组成，但不能以数字开头</p><p>2、等号两侧不能有空格</p><p>3、变量名称一般为大写（上面是负面教材），这是个规范，不是规则</p><ul><li><strong>将命令的放回值赋给变量</strong></li></ul><p>1、使用反引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量=`命令`</span><br></pre></td></tr></table></figure><p>2、$()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量=$(命令)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">A=`date`</span><br><span class="line">echo &quot;A=$A&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=2023年 01月 12日 星期四 10:38:58 CST</span><br></pre></td></tr></table></figure><h3 id="4、设置环境变量">4、设置环境变量</h3><p>基本语法：</p><p>1、将shell变量输出为全局变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export 变量名=值</span><br></pre></td></tr></table></figure><p>2、属性，使其立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> 配置文件（/etc/profile）</span><br></pre></td></tr></table></figure><p>案例：</p><p>1、设置并查看环境变量</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_11-30-29.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_11-04-34.png" alt=""></p><h3 id="5、注释">5、注释</h3><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">内容</span><br><span class="line">！</span><br></pre></td></tr></table></figure><h3 id="6、位置参数变量和预定义变量">6、位置参数变量和预定义变量</h3><ul><li><strong>位置参数变量</strong></li></ul><blockquote><p>介绍当我们执行一个shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量比如:<code>./myshell.sh 100 200</code>，这个就是一个执行shell的命令行，可以在myshell 脚本中获取到参数信息</p></blockquote><p>基本语法：</p><p><code>$n</code>：功能描述：n为数字，S0代表命令本身，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}</p><p><code>$*</code>：功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体)</p><p><code>$@</code>：功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</p><p><code>$#</code>：功能描述：这个变量代表命令行中所有参数的个数</p><p>案例：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_12-00-25.png" alt=""></p><ul><li><strong>预定义变量</strong></li></ul><blockquote><p>就是shell设计者事先已经定义好的变量，可以直接在shell中使用</p></blockquote><p>基本语法：</p><p><code>$$</code>：功能描述：当前进程的进程号（PID）<br><code>$!</code>：功能描述：后台运行的最后一个进程的进程号（PID）<br><code>$?</code>：功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令来决定），则证明上一个命令执行不正确。</p><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;当前执行的进程id=$$&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以后台的方式运行一个脚本，并获取他的进程号</span></span><br><span class="line">/home/ggw/shellscripts/demo2.sh &amp;</span><br><span class="line">echo &quot;最后一个后台方式运行的进程id=$!&quot;</span><br><span class="line">echo &quot;执行的结果是：$?&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_12-24-11.png" alt=""></p><h3 id="7、运算符">7、运算符</h3><p>基本语法：</p><p>1、使用<code>$[运算式]</code>(推荐)、<code>$((运算式))</code>或者<code>expr m + n</code>(expression)</p><p>2、注意expr运算符间要有空格，如果希望将expr的结果赋值给某个变量，要使用``包裹</p><p>3、expr m - n</p><p>4、expr \*，/，%，分别代表乘、除、取余</p><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式一</span></span><br><span class="line">ANS1=$(((2+3)*4))</span><br><span class="line">echo &quot;ANS1=$ANS1&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式二</span></span><br><span class="line">ANS2=$[(2+3)*4]</span><br><span class="line">echo &quot;ANS2=$ANS2&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式三</span></span><br><span class="line">TMP=`expr 2 + 3`</span><br><span class="line">ANS3=`expr $TMP \* 4`</span><br><span class="line">echo &quot;TMP=$TMP&quot;</span><br><span class="line">echo &quot;ANS3=$ANS3&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ANS1=20</span><br><span class="line">ANS2=20</span><br><span class="line">TMP=5</span><br><span class="line">ANS3=20</span><br></pre></td></tr></table></figure><h3 id="8、条件判断语句">8、条件判断语句</h3><p>基本语法：</p><p>注意条件两边要有空格，非空返回true，可使用$?验证(0为true, &gt;1为false)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ contition ]</span><br></pre></td></tr></table></figure><p>案例：</p><p><code>[ xxx ]</code>返回true</p><p><code>[]</code>返回false</p><p><code>[ xxx ] &amp;&amp; echo &quot;ok&quot; || echo &quot;hello&quot;</code>条件满足，执行后面的语句</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_15-44-21.png" alt=""></p><ul><li><strong>判断语句</strong></li></ul><p>1、常用判断条件</p><p>（1）<code>=</code> 字符串比较</p><p>（2）两个整数比较</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">等于 equal</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">不等于 not equal</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">小于 little</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">小于等于 little equal</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">大于 greater</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">大于等于 greater equal</td></tr></tbody></table><p>（3）按文件权限进行判断</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-r</td><td style="text-align:center">有读的权限</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">有写的权限</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">有执行的权限</td></tr></tbody></table><p>（4）按文件类型进行判断</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:center">文件存在并且一个常规文件</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">文件存在</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">文件存在并且是一个目录</td></tr></tbody></table><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、<span class="string">&quot;ok&quot;</span>是否等于<span class="string">&quot;ok&quot;</span></span></span><br><span class="line">if [ &quot;ok&quot; = &quot;ok&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;1、相等&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、23是否大于22</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断语句：使用 -gt</span></span><br><span class="line">if [ 23 -gt 22 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;2、大于&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、判断文件/home/ggw/shellscripts/demo1.sh是否存在</span></span><br><span class="line">if [ -f /home/ggw/shellscripts/demo1.sh ]</span><br><span class="line">then</span><br><span class="line">echo &quot;3、存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、相等</span><br><span class="line">2、大于</span><br><span class="line">3、存在</span><br></pre></td></tr></table></figure><h3 id="9、流程控制">9、流程控制</h3><ul><li><strong>if-fi判断</strong></li></ul><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li><strong>if-elif-fi判断</strong></li></ul><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li><strong>if-else-fi</strong></li></ul><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">else</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li><strong>case语法</strong></li></ul><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">代码</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">代码</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">都不是执行此处代码</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">        echo &quot;nothing&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><ul><li><strong>for循环</strong></li></ul><p>基本语法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for KEY in $*</span><br><span class="line">do</span><br><span class="line">        echo &quot;num is $KEY&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------------------&quot;</span><br><span class="line">for KEY in $@</span><br><span class="line">do</span><br><span class="line">        echo &quot;num is $KEY&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;===========================&quot;</span><br><span class="line">for KEY in  &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;num is $KEY&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------------------&quot;</span><br><span class="line">for KEY in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;num is $KEY&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_17-08-40.png" alt=""></p><p>基本语法2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((初始值;循环控制条件;变量变换))</span><br><span class="line">do</span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>案例：</p><p>输出1-100的和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">SUM=0</span><br><span class="line">for(( i=1; i&lt;=100; i++))</span><br><span class="line">do</span><br><span class="line">        SUM=$[$SUM+$i]  #获取SUM的值才需要加&quot;$&quot;符号</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和是$SUM&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1-100的和是5050</span><br></pre></td></tr></table></figure><ul><li><strong>while循环</strong></li></ul><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>案例：</p><p>输出1-100的和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line">while [ $i -le &quot;100&quot; ]</span><br><span class="line">do</span><br><span class="line">SUM=$[SUM+$i]</span><br><span class="line">i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和是$SUM&quot;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1-100的和是5050</span><br></pre></td></tr></table></figure><h3 id="10、read读取控制台输入">10、read读取控制台输入</h3><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [选项] 参数</span><br></pre></td></tr></table></figure><p>常用选项：</p><table><thead><tr><th style="text-align:center">选项</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">-p</td><td>指定读取值时的提示符</td></tr><tr><td style="text-align:center">-t</td><td>指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了</td></tr></tbody></table><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入：&quot; -t 10 RES</span><br><span class="line">echo &quot;输入的结果是：$RES&quot;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_17-41-19.png" alt=""></p><h3 id="11、-函数">11、 函数</h3><blockquote><p>shell编程和其它语言一样，有系统函数，也可以自定义函数。</p></blockquote><p><strong>1、系统函数</strong></p><ul><li><strong>basename</strong></li></ul><p><strong>功能：返回完整路径最后/后面的部分，常用于获取文件名</strong></p><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename [pathname] [suffix]</span><br></pre></td></tr></table></figure><p>选项：</p><p>如果加速suffix(后缀)的话，如果suffix被指定，basename会将pathname或string中的suffix去掉</p><p>案例：</p><p>请返回/home/ggw/demo.txt的demo</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_22-06-08.png" alt=""></p><ul><li><strong>dirname</strong></li></ul><p><strong>功能：返回完整路径最后/前面的部分，常用于获取文件名</strong></p><p>案例：</p><p>请返回/home/ggw/demo.txt的/home/ggw</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_22-09-18.png" alt=""></p><p><strong>2、自定义函数</strong></p><p>基本语法：</p><p>定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">funname [值]</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">函数定义</span></span><br><span class="line">function getSum() &#123;</span><br><span class="line">SUM=$[$NUM1+$NUM2]</span><br><span class="line">echo &quot;和是$SUM&quot;</span><br><span class="line">&#125;</span><br><span class="line">NUM1=$1</span><br><span class="line">NUM2=$2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">调用</span></span><br><span class="line">getSum $NUM1 $NUM2</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/linux/Snipaste_2023-01-12_22-38-01.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown数学公式基本语法</title>
      <link href="/2023/01/07/MarkDown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/01/07/MarkDown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、如何添加">一、如何添加</h2><p>与LaTex类似</p><p><strong>（1）行内公式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$公式内容$</span><br></pre></td></tr></table></figure><p>例如：<code>E = mc^2</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p><strong>（2）多行公式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">公式内容</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">$$</span><br><span class="line">E = mc^2</span><br><span class="line">$$</span><br><span class="line">效果如下</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="二、希腊字符">二、希腊字符</h2><table><thead><tr><th>名称</th><th>大写</th><th>如何显示</th><th>小写</th><th>如何显示</th></tr></thead><tbody><tr><td>alpha</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></td><td><code>$A$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></td><td><code>$\alpha$</code></td></tr><tr><td>beta</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></td><td><code>$B$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></td><td><code>$\beta$</code></td></tr><tr><td>gamma</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Γ</span></span></span></span></td><td><code>$\Gamma$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span></td><td><code>$\gamma$</code></td></tr><tr><td>delta</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span></span></span></span></td><td><code>$\Delta$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span></td><td><code>$\delta$</code></td></tr><tr><td>epsilon</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></td><td><code>$E$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></td><td><code>$\epsilon$</code></td></tr><tr><td>zeta</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></td><td><code>$Z$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding="application/x-tex">\zeta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07378em;">ζ</span></span></span></span></td><td><code>$\zeta$</code></td></tr><tr><td>eta</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></td><td><code>$H$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span></td><td><code>$\eta$</code></td></tr><tr><td>theta</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Θ</span></span></span></span></td><td><code>$\Theta$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></td><td><code>$\theta$</code></td></tr><tr><td>iota</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></td><td><code>$T$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ι</mi></mrow><annotation encoding="application/x-tex">\iota</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ι</span></span></span></span></td><td><code>$\iota$</code></td></tr><tr><td>kappa</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span></td><td><code>$K$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>κ</mi></mrow><annotation encoding="application/x-tex">\kappa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">κ</span></span></span></span></td><td><code>$\kappa$</code></td></tr><tr><td>mu</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></td><td><code>$M$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></td><td><code>$\mu$</code></td></tr><tr><td>nu</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></td><td><code>$N$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ν</mi></mrow><annotation encoding="application/x-tex">\nu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.06366em;">ν</span></span></span></span></td><td><code>$\nu$</code></td></tr><tr><td>xi</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ξ</mi></mrow><annotation encoding="application/x-tex">\Xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ξ</span></span></span></span></td><td><code>$\Xi$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi></mrow><annotation encoding="application/x-tex">\xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span></span></span></span></td><td><code>$\xi$</code></td></tr><tr><td>omicron</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></td><td><code>$O$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ο</mi></mrow><annotation encoding="application/x-tex">\omicron</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ο</span></span></span></span></td><td><code>$\omicron$</code></td></tr><tr><td>pi</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Π</span></span></span></span></td><td><code>$\Pi$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></td><td><code>$\pi$</code></td></tr><tr><td>rho</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></td><td><code>$P$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span></td><td><code>$\rho$</code></td></tr><tr><td>sigma</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Σ</mi></mrow><annotation encoding="application/x-tex">\Sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Σ</span></span></span></span></td><td><code>$\Sigma$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></td><td><code>$\sigma$</code></td></tr><tr><td>tau</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></td><td><code>$T$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></td><td><code>$\tau$</code></td></tr><tr><td>upslion</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Υ</mi></mrow><annotation encoding="application/x-tex">\Upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Υ</span></span></span></span></td><td><code>$\Upsilon$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>υ</mi></mrow><annotation encoding="application/x-tex">\upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">υ</span></span></span></span></td><td><code>$\upsilon$</code></td></tr><tr><td>phi</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span></span></span></span></td><td><code>$\Phi$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></td><td><code>$\phi$</code></td></tr><tr><td>chi</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span></td><td><code>$X$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>χ</mi></mrow><annotation encoding="application/x-tex">\chi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">χ</span></span></span></span></td><td><code>$\chi$</code></td></tr><tr><td>psi</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span></span></span></span></td><td><code>$\Psi$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ψ</mi></mrow><annotation encoding="application/x-tex">\psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span></span></span></span></td><td><code>$\psi$</code></td></tr><tr><td>omega</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span></td><td><code>$\Omega$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span></td><td><code>$\omega$</code></td></tr></tbody></table><h2 id="三、上下标、根号、分数、括号、上下取整">三、上下标、根号、分数、括号、上下取整</h2><p><strong>!!首先要知道由{}包围的内容只一个小单元!!</strong>，可以用来消除二义性</p><p>本节都只对前后<strong>一个</strong>单元生效</p><p><strong>1、上下标</strong></p><ul><li><p>上标：<strong>^</strong></p></li><li><p>下标：<strong>_</strong></p></li></ul><p><strong>举例：</strong></p><p><code>A^B</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mi>B</mi></msup></mrow><annotation encoding="application/x-tex">A^B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span></span></span></p><p><code>$&#123;AB&#125;^&#123;BC&#125;$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>A</mi><mi>B</mi></mrow><mrow><mi>B</mi><mi>C</mi></mrow></msup></mrow><annotation encoding="application/x-tex">{AB}^{BC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9146em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9146em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">BC</span></span></span></span></span></span></span></span></span></span></span></span></p><p><code>$&#123;AB&#125;^BC$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>A</mi><mi>B</mi></mrow><mi>B</mi></msup><mi>C</mi></mrow><annotation encoding="application/x-tex">{AB}^BC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9146em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9146em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p><code>A_B</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">A_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><code>$&#123;AB&#125;_&#123;BC&#125;$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>A</mi><mi>B</mi></mrow><mrow><mi>B</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{AB}_{BC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">BC</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><code>$&#123;AB&#125;_BC$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>A</mi><mi>B</mi></mrow><mi>B</mi></msub><mi>C</mi></mrow><annotation encoding="application/x-tex">{AB}_BC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p><strong>2、根号</strong></p><p><code>$\sqrt[a]&#123;b&#125;$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mi>b</mi><mi>a</mi></mroot></mrow><annotation encoding="application/x-tex">\sqrt[a]{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1078em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7099em;"><span style="top:-2.9947em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">b</span></span></span><span style="top:-2.8922em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1078em;"><span></span></span></span></span></span></span></span></span></p><p><strong>举例</strong>：</p><p><code>$\sqrt[a]b$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mi>b</mi><mi>a</mi></mroot></mrow><annotation encoding="application/x-tex">\sqrt[a]b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1078em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7099em;"><span style="top:-2.9947em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">b</span></span></span><span style="top:-2.8922em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1078em;"><span></span></span></span></span></span></span></span></span>$</p><p><code>$\sqrt[a]bc$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mi>b</mi><mi>a</mi></mroot><mi>c</mi></mrow><annotation encoding="application/x-tex">\sqrt[a]bc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1078em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7099em;"><span style="top:-2.9947em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">b</span></span></span><span style="top:-2.8922em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1078em;"><span></span></span></span></span></span><span class="mord mathnormal">c</span></span></span></span></p><p><code>$\sqrt[a]&#123;bc&#125;$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mrow><mi>b</mi><mi>c</mi></mrow><mi>a</mi></mroot></mrow><annotation encoding="application/x-tex">\sqrt[a]{bc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1078em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7099em;"><span style="top:-2.9947em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span></span></span><span style="top:-2.8922em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1078em;"><span></span></span></span></span></span></span></span></span></p><p><strong>3、分数</strong></p><p>1、<code>$\frac&#123;a&#125;&#123;b&#125;$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac {a}{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 推荐</p><p>2、<code>$a \over b$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac></mrow><annotation encoding="application/x-tex">a \over b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>举例：</p><p><code>$a+b \over b$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mi>b</mi></mfrac></mrow><annotation encoding="application/x-tex">a+b \over b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><code>$a+&#123;c&#125; \over b$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>c</mi></mrow><mi>b</mi></mfrac></mrow><annotation encoding="application/x-tex">a+{c} \over b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1473em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8023em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>4、括号</strong></p><p><code>$()$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p><p><code>$[]$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mclose">]</span></span></span></span></p><p><code>$\&#123;\&#125;$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mclose">}</span></span></span></span> 需要转义</p><p><code>$\langle \rangle$</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⟨</mo><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\langle \rangle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mclose">⟩</span></span></span></span></p><p><strong>5、上下取整</strong></p><p>向上取整： 使用\lceil和\rceil表示。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>x</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil x \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathnormal">x</span><span class="mclose">⌉</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\lceil x \rceil$</code><br>向下取整： 使用\lfloor和\rfloor表示。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor x \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\lfloor x \rfloor$</code></p><h2 id="四、数学运算符与数学符号">四、数学运算符与数学符号</h2><p>1、<code>+ - * / =</code>这五个直接输入即可。</p><p>2、特殊形式的数学运算符与数学符号如下表：</p><table><thead><tr><th>符号</th><th>Tex</th><th>符号</th><th>Tex</th><th>符号</th><th>Tex</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">±</span></span></span></span></td><td><code>$\pm$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∓</mo></mrow><annotation encoding="application/x-tex">\mp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">∓</span></span></span></span></td><td><code>$\mp$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></td><td><code>$\cdot$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span></span></span></td><td><code>$\times$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">÷</span></span></span></span></td><td><code>$\div$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋆</mo></mrow><annotation encoding="application/x-tex">\star</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">⋆</span></span></span></span></td><td><code>$\star$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">\ast</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span></td><td><code>$\ast$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">∪</span></span></span></span></td><td><code>$\cup$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">∩</span></span></span></span></td><td><code>$\cap$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∨</mo></mrow><annotation encoding="application/x-tex">\vee</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">∨</span></span></span></span></td><td><code>$\vee$ 或者 $\lor$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∧</mo></mrow><annotation encoding="application/x-tex">\wedge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">∧</span></span></span></span></td><td><code>$\wedge$ 或者 $\land$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≃</mo></mrow><annotation encoding="application/x-tex">\simeq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mrel">≃</span></span></span></span></td><td><code>$\simeq$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">\oplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊕</span></span></span></span></td><td><code>$\oplus$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding="application/x-tex">\otimes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊗</span></span></span></span></td><td><code>$\otimes$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∼</mo></mrow><annotation encoding="application/x-tex">\sim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">∼</span></span></span></span></td><td><code>$\sim$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∘</mo></mrow><annotation encoding="application/x-tex">\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">∘</span></span></span></span></td><td><code>$\circ$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∙</mo></mrow><annotation encoding="application/x-tex">\bullet</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">∙</span></span></span></span></td><td><code>$\bullet$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding="application/x-tex">\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td><code>$\subset$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>△</mo></mrow><annotation encoding="application/x-tex">\bigtriangleup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">△</span></span></span></span></td><td><code>$\bigtriangleup$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>▽</mo></mrow><annotation encoding="application/x-tex">\bigtriangledown</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">▽</span></span></span></span></td><td><code>$\bigtriangledown$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊃</mo></mrow><annotation encoding="application/x-tex">\supset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊃</span></span></span></span></td><td><code>$\supset$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi></mrow><annotation encoding="application/x-tex">\nabla</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">∇</span></span></span></span></td><td><code>$\nabla$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">∃</span></span></span></span></td><td><code>$\exists$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">⊆</span></span></span></span></td><td><code>$\subseteq$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∂</mi></mrow><annotation encoding="application/x-tex">\partial</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span></td><td><code>$\partial$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><code>$\infty$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊇</mo></mrow><annotation encoding="application/x-tex">\supseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">⊇</span></span></span></span></td><td><code>$\supseteq$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">∀</span></span></span></span></td><td><code>$\forall$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">√</mi></mrow><annotation encoding="application/x-tex">\surd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.2em;"></span><span class="mord">√</span></span></span></span></td><td><code>$\surd$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span></td><td><code>$\in$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∠</mi></mrow><annotation encoding="application/x-tex">\angle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mord">∠</span></span></span></span></td><td><code>$\angle$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">⊥</mi></mrow><annotation encoding="application/x-tex">\bot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">⊥</span></span></span></span></td><td><code>$\bot$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∋</mo></mrow><annotation encoding="application/x-tex">\owns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∋</span></span></span></span></td><td><code>$\ni$ 或者 $\owns$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\le</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span></span></span></span></td><td><code>$\leq$ 或者 $\le$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span></span></span></span></td><td><code>$\geq$ 或者 $ge$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">∉</mo></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span></span></span></span></td><td><code>$\notin$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mrel">≡</span></span></span></span></td><td><code>$\equiv$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4831em;"></span><span class="mrel">≈</span></span></span></span></td><td><code>$\approx$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td><td><code>$\neq$ 或者 $\ne$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋘</mo></mrow><annotation encoding="application/x-tex">\lll</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.585em;vertical-align:-0.0352em;"></span><span class="mrel amsrm">⋘</span></span></span></span></td><td><code>$\lll$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋙</mo></mrow><annotation encoding="application/x-tex">\ggg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.585em;vertical-align:-0.0352em;"></span><span class="mrel amsrm">⋙</span></span></span></span></td><td><code>$\ggg$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≅</mo></mrow><annotation encoding="application/x-tex">\cong</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.589em;"></span><span class="mrel">≅</span></span></span></span></td><td><code>$\cong$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∝</mo></mrow><annotation encoding="application/x-tex">\propto</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mrel">∝</span></span></span></span></td><td><code>$\propto$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⫋</mo></mrow><annotation encoding="application/x-tex">\varsubsetneqq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0087em;vertical-align:-0.2514em;"></span><span class="mrel amsrm"></span></span></span></span></td><td><code>$\varsubsetneqq$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⫌</mo></mrow><annotation encoding="application/x-tex">\varsupsetneqq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0087em;vertical-align:-0.2514em;"></span><span class="mrel amsrm"></span></span></span></span></td><td><code>$\varsupsetneqq$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∣</mo></mrow><annotation encoding="application/x-tex">\mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel">∣</span></span></span></span></td><td><code>$\mid$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇛</mo></mrow><annotation encoding="application/x-tex">\Rrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733em;vertical-align:-0.1367em;"></span><span class="mrel amsrm">⇛</span></span></span></span></td><td><code>$\Rrightarrow$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇚</mo></mrow><annotation encoding="application/x-tex">\Lleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733em;vertical-align:-0.1367em;"></span><span class="mrel amsrm">⇚</span></span></span></span></td><td><code>$\Lleftarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∥</mo></mrow><annotation encoding="application/x-tex">\parallel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel">∥</span></span></span></span></td><td><code>$\parallel$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↾</mo></mrow><annotation encoding="application/x-tex">\upharpoonright</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mrel amsrm">↾</span></span></span></span></td><td><code>$\upharpoonright$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇂</mo></mrow><annotation encoding="application/x-tex">\downharpoonright</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mrel amsrm">⇂</span></span></span></span></td><td><code>$\downharpoonright$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span></span></span></span></td><td><code>$\because$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span></span></span></span></td><td><code>$\therefore$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4831em;"></span><span class="mrel">≈</span></span></span></span></td><td><code>$\approx$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor x \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span></span></span></span></td><td><code>$\lfloor x \rfloor$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>x</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil x \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathnormal">x</span><span class="mclose">⌉</span></span></span></span></td><td><code>$\lceil x \rceil$</code></td><td></td><td></td></tr></tbody></table><h2 id="五、注音与标注">五、注音与标注</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\bar&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˊ</mo></mover></mrow><annotation encoding="application/x-tex">\acute{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˊ</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <code>$\acute&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˇ</mo></mover></mrow><annotation encoding="application/x-tex">\check{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6285em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6285em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˇ</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\check&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˋ</mo></mover></mrow><annotation encoding="application/x-tex">\grave{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˋ</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\grave&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\vec&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\hat&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\tilde&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>˘</mo></mover></mrow><annotation encoding="application/x-tex">\breve{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">˘</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\breve&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>˙</mo></mover></mrow><annotation encoding="application/x-tex">\dot{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">˙</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\dot&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>¨</mo></mover></mrow><annotation encoding="application/x-tex">\ddot{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">¨</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\ddot&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>x</mi><mo>˚</mo></mover></mrow><annotation encoding="application/x-tex">\mathring{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.3472em;"><span class="mord">˚</span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>   <code>$\mathring&#123;x&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6306em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\overline&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">↔</mo></mover></mrow><annotation encoding="application/x-tex">\overleftrightarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.522em;min-width:0.888em;"><span class="halfarrow-left" style="height:0.522em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span><span class="halfarrow-right" style="height:0.522em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\overleftrightarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6306em;vertical-align:-0.2em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\underline&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">↔</mo></munder></mrow><annotation encoding="application/x-tex">\underleftrightarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;vertical-align:-0.522em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span class="svg-align" style="top:-2.478em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.522em;min-width:0.888em;"><span class="halfarrow-left" style="height:0.522em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span><span class="halfarrow-right" style="height:0.522em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\underleftrightarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">←</mo></mover></mrow><annotation encoding="application/x-tex">\overleftarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\overleftarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">⏞</mo></mover></mrow><annotation encoding="application/x-tex">\overbrace{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0786em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.5306em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\overbrace&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">←</mo></munder></mrow><annotation encoding="application/x-tex">\underleftarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;vertical-align:-0.522em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span class="svg-align" style="top:-2.478em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\underleftarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">⏟</mo></munder></mrow><annotation encoding="application/x-tex">\underbrace{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0786em;vertical-align:-0.648em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span class="svg-align" style="top:-2.352em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.648em;"><span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\underbrace&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\overrightarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">^</mo></mover></mrow><annotation encoding="application/x-tex">\widehat{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7306em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.3em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.3em' viewBox='0 0 2364 300' preserveAspectRatio='none'><path d='M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z'/></svg></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\widehat&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">→</mo></munder></mrow><annotation encoding="application/x-tex">\underrightarrow{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;vertical-align:-0.522em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span class="svg-align" style="top:-2.478em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\underrightarrow&#123;xxx&#125;$</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">~</mo></mover></mrow><annotation encoding="application/x-tex">\widetilde{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7166em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7166em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">xxx</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.286em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.286em' viewBox='0 0 1033 286' preserveAspectRatio='none'><path d='M344 55.266c-142 0-300.638 81.316-311.5 86.418-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751 181.476 676 181.476c-149 0-189-126.21-332-126.21z'/></svg></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span>  <code>$\widetilde&#123;xxx&#125;$</code></p><h2 id="六、省略号、空白间隔">六、省略号、空白间隔</h2><p><strong>1、省略号</strong></p><ul><li><p><code>\dots </code></p><p>使用：<code>$x_1, x_2, \dots, x_n$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1, x_2, \dots, x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><code>\cdots</code></p><p>使用：<code>$1, 2, \cdots, n$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1, 2, \cdots, n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></p></li><li><p><code>\vdots</code> 竖直省略号，一般用于矩阵中。</p><p>使用：<code>$\vdots$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></p></li><li><p><code>\ddots</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><msup><mn>5</mn><mi>o</mi></msup></mrow><annotation encoding="application/x-tex">45^o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord">4</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span></span></span></span></span></span></span></span> 方向省略号，一般用于矩阵中。</p><p>使用：<code>$\ddots$</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋱</mo></mrow><annotation encoding="application/x-tex">\ddots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.823em;"></span><span class="minner">⋱</span></span></span></span></p></li></ul><p><strong>2、空白间隔</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$\,$ 3/18em   </span><br><span class="line">$\:$  4/18em  </span><br><span class="line">$\;$ 5/18em </span><br><span class="line">$\quad$ 1em </span><br><span class="line">$\qquad$ 2m </span><br><span class="line">$\!$ -3/18em</span><br></pre></td></tr></table></figure><p>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">\,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:0.1667em;"></span></span></span></span> 3/18em<br>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">\:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span></span></span>  4/18em<br>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span></span></span> 5/18em<br>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 1em<br>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mspace width="2em"/></mrow><annotation encoding="application/x-tex">\qquad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:2em;"></span></span></span></span> 2m<br>|<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> ⁣</mtext></mrow><annotation encoding="application/x-tex">\!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:-0.1667em;"></span></span></span></span> -3/18em</p><h2 id="七、字体">七、字体</h2><p>1、使用\it显示<strong>意大利体（公式默认字体）</strong>：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>b</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">\it{Abc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathit">Abc</span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <code>$\it&#123;Abc&#125;$</code></p><p>2、使用\mathbb或\Bbb显示<strong>黑板粗体（黑板黑体）</strong>:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">A</mi><mi mathvariant="double-struck">b</mi><mi mathvariant="double-struck">c</mi></mrow><annotation encoding="application/x-tex">\mathbb{Abc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathbb">A</span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <code>$\mathbb&#123;Abc&#125;$</code></p><p>3、使用\mathbf或\bf显示<strong>黑体</strong>：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">b</mi><mi mathvariant="bold">c</mi></mrow><annotation encoding="application/x-tex">\mathbf{Abc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathbf">Abc</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <code>$\mathbf&#123;Abc&#125;$</code></p><p>3、使用\mathtt或\tt显示<strong>打印机字体</strong>：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="monospace">A</mi><mi mathvariant="monospace">b</mi><mi mathvariant="monospace">c</mi></mrow><annotation encoding="application/x-tex">\mathtt{Abc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord"><span class="mord mathtt">Abc</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <code>$\mathtt&#123;Abc&#125;$</code></p><h2 id="八、分段函数">八、分段函数</h2><p><code>&amp;</code>表示对齐，<code>\\</code>用来表示换行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">函数名=</span><br><span class="line">\begin&#123;cases&#125;  </span><br><span class="line">公式1 &amp; 条件1 \\</span><br><span class="line">公式2 &amp; 条件2 \\</span><br><span class="line">公式3 &amp; 条件3 \\</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>函数名</mtext><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>公式</mtext><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>条件</mtext><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>公式</mtext><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>条件</mtext><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>公式</mtext><mn>3</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>条件</mtext><mn>3</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">函数名=\begin{cases}  公式1 &amp; 条件1 \\公式2 &amp; 条件2 \\公式3 &amp; 条件3 \\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">函数名</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.91em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-2.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.192em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-4.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">公式</span><span class="mord">1</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">公式</span><span class="mord">2</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">公式</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">条件</span><span class="mord">1</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">条件</span><span class="mord">2</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">条件</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="九、多行公式">九、多行公式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">f(x) &amp; = (a+b)^2 \\</span><br><span class="line">&amp; = a^2+2ab+b^2</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>a</mi><mi>b</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align}f(x) &amp; = (a+b)^2 \\&amp; = a^2+2ab+b^2\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0482em;vertical-align:-1.2741em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal">ab</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.7741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span></span></span></span></p><h2 id="十、箭头">十、箭头</h2><table><thead><tr><th>效果</th><th>Tex</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">←</span></span></span></span></td><td><code>$\leftarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span></td><td><code>$\rightarrow$ 或者 $\to$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇐</mo></mrow><annotation encoding="application/x-tex">\Leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇐</span></span></span></span></td><td><code>$\Leftarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span></td><td><code>$\Rightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↔</mo></mrow><annotation encoding="application/x-tex">\leftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">↔</span></span></span></span></td><td><code>$\leftrightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇔</mo></mrow><annotation encoding="application/x-tex">\Leftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇔</span></span></span></span></td><td><code>$\Leftrightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟵</mo></mrow><annotation encoding="application/x-tex">\longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟵</span></span></span></span></td><td><code>$\longleftarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span></td><td><code>$\longrightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟸</mo></mrow><annotation encoding="application/x-tex">\Longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟸</span></span></span></span></td><td><code>$\longleftarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span></td><td><code>$\Longrightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟷</mo></mrow><annotation encoding="application/x-tex">\longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟷</span></span></span></span></td><td><code>$\longleftrightarrow$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span></td><td><code>$\Longleftrightarrow$</code></td></tr></tbody></table><p><code>$\xrightarrow$</code>和<code>$\xleftarrow$</code>可以根据内容自动调整：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \xleftarrow&#123;x+y+z&#125; \quad \xrightarrow[x&lt;y]&#123;x+y+z&#125; </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover><mo stretchy="true" minsize="3.0em">←</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mpadded></mover><mspace width="1em"/><munderover><mo stretchy="true" minsize="3.0em">→</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow></mpadded><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mpadded></munderover></mrow><annotation encoding="application/x-tex">\xleftarrow{x+y+z} \quad \xrightarrow[x&lt;y]{x+y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0413em;vertical-align:-0.011em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0303em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1.6658em;vertical-align:-0.6355em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0303em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-2.2006em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6355em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="十一、大型数学运算符">十一、大型数学运算符</h2><table><thead><tr><th>运算符</th><th>Tex</th><th>运算符</th><th>Tex</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span></span></span></span></td><td><code>$\sum$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo></mrow><annotation encoding="application/x-tex">\int</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span></span></span></span></td><td><code>$\int$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></td><td><code>$\prod$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∬</mo></mrow><annotation encoding="application/x-tex">\iint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005em;">∬</span></span></span></span></td><td><code>$\iint$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∐</mo></mrow><annotation encoding="application/x-tex">\coprod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∐</span></span></span></span></td><td><code>$\coprod$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∭</mo></mrow><annotation encoding="application/x-tex">\iiint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005em;">∭</span></span></span></span></td><td><code>$\iiint$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋁</mo></mrow><annotation encoding="application/x-tex">\bigvee</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋁</span></span></span></span></td><td><code>$\bigvee$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋀</mo></mrow><annotation encoding="application/x-tex">\bigwedge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋀</span></span></span></span></td><td><code>$\bigwedge$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨁</mo></mrow><annotation encoding="application/x-tex">\bigoplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span></span></span></span></td><td><code>$\bigoplus$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨂</mo></mrow><annotation encoding="application/x-tex">\bigotimes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨂</span></span></span></span></td><td><code>$\bigotimes$</code></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋃</mo></mrow><annotation encoding="application/x-tex">\bigcup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋃</span></span></span></span></td><td><code>$\bigcup$</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\lim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mop">lim</span></span></span></span></td><td><code>$\lim$</code></td></tr></tbody></table><p>使用：即添加上下标</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum_&#123;i=1&#125;^&#123;10&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>10</mn></munderover></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实用，解决github打不开进不去的问题</title>
      <link href="/2023/01/05/%E8%A7%A3%E5%86%B3github%E6%89%93%E4%B8%8D%E5%BC%80%E8%BF%9B%E4%B8%8D%E5%8E%BB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/01/05/%E8%A7%A3%E5%86%B3github%E6%89%93%E4%B8%8D%E5%BC%80%E8%BF%9B%E4%B8%8D%E5%8E%BB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>1、网易UU加速器</strong><br>玩游戏的小伙伴相比都不陌生，但是想不到的是，它也可以帮助我们访问github</p><p><strong>方法：</strong><br>1、搜索”学术“<br>2、点击加速<br>3、打开<a href="https://github.com/">github</a>网址</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/UU%E5%8A%A0%E9%80%9F%E5%99%A8.png" alt=""></p><p>ps：如果没有安装的话下载网址在这里哦<br><strong>下载网址：</strong><code>https://uu.163.com/</code></p></li><li><p>2、<strong>分享一个小工具</strong>，打开即可用</p><p><strong>百度网盘：</strong><br>链接：<code>https://pan.baidu.com/s/19nglQ3vxNPTHct-SL2RueQ</code><br>提取码：<code>kksk</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/01/05/python/"/>
      <url>/2023/01/05/python/</url>
      
        <content type="html"><![CDATA[<p>​—— B站 Python 课程自学笔记         <a href="https://www.bilibili.com/video/BV1wD4y1o7AS?p=1&amp;vd_source=eca8bef44f4d5efc79f226fa688a5064&amp;t=1.5">【B站网课】</a></p><h2 id="一、python简介">一、python简介</h2><h3 id="1、简介">1、简介</h3><blockquote><p><strong>python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</strong></p><ul><li><p>Python是<strong>解释型</strong>语言︰这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p></li><li><p>Python是<strong>交互式</strong>语言︰这意味着，您可以在一个Python提示符 <code>&gt;&gt;&gt;</code> 后直接执行代码。</p></li><li><p>Python是<strong>面向对象</strong>语言:这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p></li><li><p>Python是<strong>初学者</strong>的语言:Python对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到wwW浏览器再到游戏。</p></li></ul></blockquote><h3 id="2、Python发展历史">2、Python发展历史</h3><blockquote><p>Python是由<strong>Guido van Rossum</strong>在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。<br>Python本身也是由诸多其他语言发展而来的,这包括ABC、Modula-3、C、C++、Algol-68、SmalTalk、Unix shell和其他的脚本语言等等。<br>像Perl语言一样，Python源代码同样遵循GPL(GNU General Public License)协议。<br>现在Python是由一个核心开发团队在维护，Guido van Rossum仍然占据着至关重要的作用，指导其进展。Python 2.7被确定为最后一个Python 2.x版本，它除了支持 Python 2.x语法外，还支持部分Python 3.1语法。</p></blockquote><h3 id="3、python解释器">3、python解释器</h3><p><a href="https://www.python.org/ftp/python/3.8.0/python-3.8.0-amd64.exe">python3.8.0官网下载</a></p><p><a href="https://pan.baidu.com/s/1lQbQmq6u00__dmrHC48cNQ">python3.8.0百度网盘</a> 提取码：<code>kksk</code></p><p>安装流程：选择自定义安装(Customize installation)，之后的有选项的全选，路径记得修改即可</p><p>安装好后，在命令行窗口输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>如下显示即安装成功</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_10-37-51.png" alt=""></p><p>安装后的说明</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_10-25-32.png" alt=""></p><h3 id="4、Pycharm设置">4、Pycharm设置</h3><p>（1）<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">下载教程</a>    <a href="http://www.jetbrains.com/pycharm/download/#section=windows">下载地址</a></p><p>（2）代码模板设置</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_10-58-24.png" alt=""></p><p>设置效果：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_10-58-31.png" alt=""></p><h3 id="5、pip工具">5、pip工具</h3><p>Python自带，支持Python扩展库的安装，升级和卸载等操作</p><table><thead><tr><th>pip命令示例</th><th>说明</th></tr></thead><tbody><tr><td>pip --version</td><td>显示版本和路径</td></tr><tr><td>pip --help</td><td>获取帮助</td></tr><tr><td>pip list</td><td>列出已安装的模块及其版本号</td></tr><tr><td>pip install SomePackage[==version]</td><td>在线安装SomePackage模块的指定版本</td></tr><tr><td>pip install SomePackage. whl</td><td>通过whl文件离线安装扩展库</td></tr><tr><td>pip install Package1, package2 ···</td><td>依此(在线)安装Package1，Package2…</td></tr><tr><td>pip install -U SomePackage</td><td>升级SomePackage模块</td></tr><tr><td>pip uninstall SomePackage</td><td>卸载SomePackage模块</td></tr><tr><td>pip show SomePackage</td><td>显示已安装的包的信息</td></tr></tbody></table><p>常见pip镜像源（国内源）</p><ul><li><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></li><li><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p></li><li><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p></li><li><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p></li><li><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p></li><li><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p></li></ul><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果存在多个python版本，则pip后面跟版本号，就可以指定使用哪一个，例如<code>pip3.8 ...</code>、<code>pip3.10 ...</code></p><h2 id="二、基础知识">二、基础知识</h2><h3 id="1、转义字符">1、转义字符</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:center">换行</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">一个退格</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">tab</td></tr><tr><td style="text-align:center">\\</td><td style="text-align:center">\</td></tr><tr><td style="text-align:center">\&quot;</td><td style="text-align:center">&quot;</td></tr></tbody></table><p><strong>原字符</strong>：不希望字符串中的 转义字符 起作用</p><p>使用：就是在字符串前加 <strong>r</strong> 或 <strong>R</strong></p><p>效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nworld&#x27;</span>)   <span class="comment"># 1、\n : 换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\tworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;helloooo\nworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\rworld&#x27;</span>)   <span class="comment"># world 将 hello 进行了覆盖</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\bworld&#x27;</span>)   <span class="comment"># \b 是一个退格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;https:\\\\www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;老师说：\&quot;大家好\&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;原字符&quot;：不希望字符串中的 转义字符 起作用；使用：就是在字符串前加 r 或 R</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意：最后一个字符不能是‘\’,但最后可以是‘\\’</span></span><br><span class="line"><span class="comment"># print(r&#x27;hello\nworld\&#x27;) # 报错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld\\&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">helloworld</span><br><span class="line">helloooo</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line">hellworld</span><br><span class="line">https:\\www.baidu.com</span><br><span class="line">老师说：&quot;大家好&quot;</span><br><span class="line">hello\nworld</span><br><span class="line">hello\nworld\\</span><br></pre></td></tr></table></figure><h3 id="2、保留字">2、保留字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="comment"># keyword.kwlist 共35个 </span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keyword.kwlist:</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">5</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(key, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FalseNoneTrueandasassert</span><br><span class="line">asyncawaitbreakclasscontinuedef</span><br><span class="line">delelifelseexceptfinallyfor</span><br><span class="line">fromglobalifimportinis</span><br><span class="line">lambdanonlocalnotorpassraise</span><br><span class="line">returntrywhilewithyiel</span><br></pre></td></tr></table></figure><h3 id="3、标识符">3、标识符</h3><p>变量、函数、类、模块和其它对象的起的名字就叫标识符</p><p>规则:</p><ul><li>字母、数字、下划线_</li><li>不能以数字开头</li><li>不能是保留字</li><li>·严格区分大小写</li></ul><h3 id="4、变量">4、变量</h3><p>变量是内存中一个带标签的盒子</p><p><strong>变量由三部分组成：</strong></p><ul><li><strong>标识</strong>: 表示<strong>对象所存储的内存地址</strong>,使用内置函数 <strong>id(obj)</strong> 来获取</li><li><strong>类型</strong>: 表示的是<strong>对象的数据类型</strong>,使用内置函数  <strong>type(obj)</strong> 来获取</li><li><strong>值</strong>: 表示对象所存储的具体数据，使用print(obj)可以将值进行打印输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ggw&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/3.png" style="zoom: 67%;" /> <p><strong>在多次赋值后，变量名会指向新的空间</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;马丽亚&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;楚溜冰&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/4.png" style="zoom:67%;" /> <h3 id="5、数据类型">5、数据类型</h3><h4 id="（1）整数类型">（1）整数类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数可以表示为二级制、十进制、八进制、十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十进制&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二进制&#x27;</span>, <span class="number">0b10101111</span>)<span class="comment"># 0b...</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;八进制&#x27;</span>, <span class="number">0o176</span>)<span class="comment"># 0o...</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十六进制&#x27;</span>, <span class="number">0x1EAF</span>)<span class="comment"># 0x...</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">十进制 10086</span><br><span class="line">二进制 175</span><br><span class="line">八进制 126</span><br><span class="line">十六进制 7855</span><br></pre></td></tr></table></figure><h4 id="（2）浮点类型">（2）浮点类型</h4><ul><li>使用浮点数进行计算时，可能会出现小数点位数不精确的情况（因为计算机的二进制存储）</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1.1</span> + <span class="number">2.2</span>)<span class="comment"># 输出为 3.3000000000000003</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.1</span> + <span class="number">2.1</span>)<span class="comment"># 输出为 3.2</span></span><br></pre></td></tr></table></figure><ul><li>解决方案：</li></ul><p>导入模块<code>decimal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1.1&#x27;</span>) + Decimal(<span class="string">&#x27;2.2&#x27;</span>))<span class="comment"># 输出为 3.3</span></span><br></pre></td></tr></table></figure><h4 id="（3）布尔类型">（3）布尔类型</h4><p>可以转化为整数：True = 1; False = 0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="literal">True</span></span><br><span class="line">f2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(f1 + <span class="number">1</span>)<span class="comment"># 1 + 1 = 2</span></span><br><span class="line"><span class="built_in">print</span>(f2 + <span class="number">1</span>)<span class="comment"># 0 + 1 = 1</span></span><br></pre></td></tr></table></figure><h4 id="（4）字符串类型">（4）字符串类型</h4><ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号’ ‘、双引号&quot; &quot;、三引号’‘’ ‘’'或&quot;“” “”&quot;来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布在连续的多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;人生苦短，我用Python&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;人生苦短，我用Python&quot;</span></span><br><span class="line">str3 = <span class="string">&quot;&quot;&quot;人生苦短，我用Python&quot;&quot;&quot;</span></span><br><span class="line">str4 = <span class="string">&#x27;&#x27;&#x27;人生苦短，</span></span><br><span class="line"><span class="string">2020 =&gt; 疫情</span></span><br><span class="line"><span class="string">2021 =&gt; 疫情</span></span><br><span class="line"><span class="string">2022 =&gt; 疫情</span></span><br><span class="line"><span class="string">2023 =&gt; 疫情</span></span><br><span class="line"><span class="string">我用Python&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1 + <span class="string">&quot;\n&quot;</span> + str2 + <span class="string">&quot;\n&quot;</span> + str3 + <span class="string">&quot;\n&quot;</span> + str4)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">人生苦短，我用Python</span><br><span class="line">人生苦短，我用Python</span><br><span class="line">人生苦短，我用Python</span><br><span class="line">人生苦短，</span><br><span class="line">2020 =&gt; 疫情</span><br><span class="line">2021 =&gt; 疫情</span><br><span class="line">2022 =&gt; 疫情</span><br><span class="line">2023 =&gt; 疫情</span><br><span class="line">我用Python</span><br></pre></td></tr></table></figure><h3 id="6、数据类型转换">6、数据类型转换</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png" alt=""></p><p>（1）<strong>str()</strong></p><p>将其他类型转化成字符串类型；</p><p>（2）<strong>int()</strong></p><p>将其他类型转化成int类型；（抹零取整）</p><p>文字类<code>'123'</code>和小数<code>'12.3'</code>串（是字符串，但是他显示的是一个浮点数）无法转换；</p><p>（3）<strong>float()</strong></p><p>将其他类型转化成float类型；</p><p>文字类无法转；</p><h3 id="7、注释">7、注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;多</span></span><br><span class="line"><span class="string">行</span></span><br><span class="line"><span class="string">注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件开头加上中文声明注释，用以指定源码文件的编码格式</span></span><br><span class="line"><span class="comment"># coding：gbk</span></span><br><span class="line"><span class="comment"># coding后面的“：”，必须是中文的</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_12-34-37.png" alt=""></p><h3 id="8、运算符">8、运算符</h3><h4 id="（1）算术运算符">（1）算术运算符</h4><table><thead><tr><th style="text-align:center">运算符</th><th>表示</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td>加</td></tr><tr><td style="text-align:center">-</td><td>减</td></tr><tr><td style="text-align:center">*</td><td>乘</td></tr><tr><td style="text-align:center">/</td><td>除</td></tr><tr><td style="text-align:center">%</td><td>取余</td></tr><tr><td style="text-align:center">**</td><td>幂运算</td></tr><tr><td style="text-align:center">//</td><td>整数（一正一负，向下取整）<code>print(11//2) # 输出为 5</code></td></tr></tbody></table><h4 id="（2）赋值运算符">（2）赋值运算符</h4><ul><li><p>支持链式赋值： a = b = c = 20</p></li><li><p>支持参数赋值：+=、-=、*=、/=、//=、%=</p></li><li><p>支持系列解包赋值：a, b, c = 20, 30, 40</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换两个变量的值</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span> </span><br><span class="line">a, b = b, a <span class="comment"># a = 20, b = 10 </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="（3）比较运算符">（3）比较运算符</h4><p>结果为bool类型</p><p>比较对象的标识用 is、 is not</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a == b<span class="comment"># True: a 与 b 的value相同</span></span><br><span class="line">a <span class="keyword">is</span> b<span class="comment"># True: a 与 b 的id标识相同</span></span><br></pre></td></tr></table></figure><h4 id="（4）布尔运算符">（4）布尔运算符</h4><p><strong>and、or、not、in、not in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in、not in</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="（5）位运算符">（5）位运算符</h4><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/5.png" style="zoom: 67%;" /> <h4 id="（6）运算符优先级">（6）运算符优先级</h4><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/6.png" style="zoom: 67%;" /> <h3 id="9、对象的布尔值">9、对象的布尔值</h3><ul><li><p>Python <strong>—切皆对象</strong> ，所有对象都有一个布尔值。</p></li><li><p>获取对象的布尔值，使用内置函数<strong>bool()</strong></p></li><li><p>以下对象的布尔值为False（其他均为True）</p><ul><li><p>False</p></li><li><p>数值0</p></li><li><p>None</p></li><li><p>空字符串</p></li><li><p>空列表 [] 、list()</p></li><li><p>空元组 () 、tuple()</p></li><li><p>空字典 {} 、dict()</p></li><li><p>空集合 set()</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下输出均为False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0.0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))     <span class="comment"># 空列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">list</span>()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(()))     <span class="comment"># 空元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">tuple</span>()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(&#123;&#125;))     <span class="comment"># 空字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">dict</span>()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">set</span>()))  <span class="comment"># 空集合</span></span><br></pre></td></tr></table></figure><h3 id="10、pass语句">10、pass语句</h3><p>语句什么都不做，只是一个占位符，用在语法上需要语句的地方<br><strong>什么时候使用</strong>：先搭建语法结构,还没想好代码怎么写的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="built_in">input</span>(<span class="string">&#x27;是否是会员？&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> ans == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="11、内置函数">11、内置函数</h3><p>可以使用下列语句查看所有内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span>(__builtins__)</span><br></pre></td></tr></table></figure><p>可以使用<code>help(函数名)</code>查看某个函数的用法</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_12-58-58.png" alt=""></p><h4 id="（1）print">（1）print()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*objects, sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">objects</td><td>对象，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔</td></tr><tr><td style="text-align:center">sep</td><td>用来间隔多个对象，默认值是一个空格</td></tr><tr><td style="text-align:center">end</td><td>用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串</td></tr><tr><td style="text-align:center">file</td><td>要写入的文件对象</td></tr><tr><td style="text-align:center">flush</td><td>输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、输出数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10086</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、含有运算符的表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、将数据输出到文件中，ps: 盘符要存在, &#x27;a+&#x27;文件不存在则创建，存在则追加</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/GGW_2021/Desktop/笔记/python/text.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;helloworld&#x27;</span>, file=fp)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、不换行输出（输出内容在同一行上）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/2.png" style="zoom:50%;" /> <p>问题：在运行Python文件时出现<strong>警告：PEP 8: W292 no newline at end of file</strong><br>解决办法：在文件末尾加换行符（按回车即可）</p><h4 id="（2）input">（2）input()</h4><p>变量 = input([提示语])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">present = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)<span class="comment"># 返回值为 字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(present)</span><br></pre></td></tr></table></figure><h4 id="（3）range">（3）range()</h4><ul><li>用于生成一个整数序列</li></ul><ul><li><p>返回值是一个迭代器对象</p></li><li><p>range类型的优点：不管range对象表示的整数序列有多长，<strong>所有range对象占用的内存空间都是相同的, 因为仅仅需要存储start,stop和step</strong>，只有当用到range对象时，才会去计算序列中的相关元素</p></li><li><p>in与not in判断整数序列中是否存在(不存在)指定的整数</p></li><li><p><strong>三种创建方式</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、只有一个参数 &quot;&quot;&quot;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">10</span>)   <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 默认从 0 开始，默认相差1（步长）</span></span><br><span class="line"><span class="built_in">print</span>(r)        <span class="comment"># range(0, 10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))  <span class="comment"># 用于查看 range 对象中的整数序列</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、两个参数 &quot;&quot;&quot;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># range(start, stop, 默认相差1（步长）)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))     <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3、三个参数 &quot;&quot;&quot;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)   <span class="comment"># range(start, stop, step)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))        <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="（4）eval-待续">（4）eval()待续</h4><h3 id="12、不可变序列与可变序列">12、不可变序列与可变序列</h3><ul><li><p>不变可变序列：字符串、元组</p><p>不变可变序列没有增、删，改的操作</p></li><li><p>可变序列:列表、字典</p><p>可变序列可以对序列执行增、删、改操作，对象地址不发生更改</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="built_in">str</span>))  <span class="comment"># 输出为 2464522942832</span></span><br><span class="line"><span class="built_in">str</span> += <span class="string">&#x27; world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="built_in">str</span>))  <span class="comment"># 输出为 2464522942832</span></span><br></pre></td></tr></table></figure><h3 id="13、变量的作用域">13、变量的作用域</h3><ul><li>程序代码能访问该变量的区域</li><li>根据变量的有效范围可分为<ul><li>局部变量：<br>在函数内定义并使用的变量，只在函数内部有效</li><li>全局变量：<br>函数体外定义的变量，可作用于函数内外</li></ul></li></ul><p><strong>局部变量使用global声明，这个变量就会就成全局变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> b</span><br><span class="line">    b = a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(b)    <span class="comment"># 输出为 10</span></span><br></pre></td></tr></table></figure><h3 id="14、编码格式">14、编码格式</h3><p>常见的字符编码格式</p><ul><li>Python的解释器使用的是Unicode（内存)</li><li>py文件在磁盘上使用UTF-8存储（外存)</li><li><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/25.png" style="zoom: 67%;" />  </li></ul><p><strong>指定文件的编码格式，utf-8是默认的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 方法1: 在文件开头写上（&#x27;#&#x27;也是要带的）</span><br><span class="line"># coding：gbk</span><br><span class="line"># coding后面的“：”，必须是中文的</span><br><span class="line"></span><br><span class="line"># 方法2: 在文件开头写上（&#x27;#&#x27;也是要带的）</span><br><span class="line"># encoding=gbk</span><br></pre></td></tr></table></figure><h3 id="15、编程规范">15、编程规范</h3><ul><li><code>\</code> 续行符</li></ul><h2 id="三、程序的组织结构">三、程序的组织结构</h2><h3 id="1、顺序结构">1、顺序结构</h3><p>由上往下顺序执行</p><h3 id="2、分支结构">2、分支结构</h3><h4 id="（1）单分支结构">（1）单分支结构</h4><p>一个缩进表示层次结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">条件执行体</span><br></pre></td></tr></table></figure><h4 id="（2）双分支结构">（2）双分支结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    条件执行体<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件执行体<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="（3）多分支结构">（3）多分支结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    条件执行体<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    条件执行体<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    条件执行体N</span><br><span class="line">[<span class="keyword">else</span>]:</span><br><span class="line">    条件执行体N + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="（4）嵌套使用if">（4）嵌套使用if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    <span class="keyword">if</span> 内层条件表达式:</span><br><span class="line">        内层条件执行体<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        内层条件执行体<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件执行体</span><br></pre></td></tr></table></figure><h4 id="（5）条件表达式">（5）条件表达式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断条件True: x, False: y </span></span><br><span class="line">x <span class="keyword">if</span> 判断条件 <span class="keyword">else</span> y</span><br></pre></td></tr></table></figure><h3 id="3、循环结构">3、循环结构</h3><h4 id="（1）while">（1）while</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">    条件执行体（循环体）</span><br></pre></td></tr></table></figure><h4 id="（2）for-in">（2）for_in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 自定义的变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">循环体</span><br></pre></td></tr></table></figure><p>举例</p><p>如果不需要用到自定义变量，可写为’_’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># range()产生一个整数序列 -&gt; 也是一个可迭代对象</span></span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 如果不需要用到自定义变量，可写为&#x27;_&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;人生苦短，我用python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p y t h o n </span><br><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">人生苦短，我用python</span><br><span class="line">人生苦短，我用python</span><br><span class="line">人生苦短，我用python</span><br></pre></td></tr></table></figure><h4 id="（3）break语句、continue">（3）break语句、continue</h4><ul><li><p>break 用于结束循环；</p></li><li><p>continue 用于结束当前循环，进入下一循环。</p></li></ul><h4 id="（4）else语句和while、for-in搭配使用">（4）else语句和while、for_in搭配使用</h4><ul><li>控制本层循环</li></ul><ul><li><p>循环结束执行else</p></li><li><p>break跳出循环后不执行else</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> ... <span class="keyword">in</span> ...:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;人生苦短，我学python&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我tm学好不好！&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p y t h o n </span><br><span class="line">人生苦短，我学python</span><br><span class="line">人生苦短，我学python</span><br><span class="line">人生苦短，我学python</span><br><span class="line">我tm学好不好！</span><br></pre></td></tr></table></figure><h2 id="四、列表、字典、元组、集合">四、列表、字典、元组、集合</h2><h3 id="1、列表">1、列表</h3><blockquote><p>变量可以存储一个元素，而列表是一个“大容器”可以存储N多个元素，程序可以方便地对这些数据进行整体操作</p></blockquote><h4 id="（1）列表创建的方式">（1）列表创建的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、使用[] &quot;&quot;&quot;</span></span><br><span class="line">lst1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、使用内置函数list() &quot;&quot;&quot;</span></span><br><span class="line">lst2 = <span class="built_in">list</span>([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>])</span><br></pre></td></tr></table></figure><h4 id="（2）列表的特点">（2）列表的特点</h4><ul><li><p>列表元素按顺序有序排序</p></li><li><p>是一个<strong>可变序列</strong></p></li><li><p>索引映射唯一个数据</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/7.png" alt=""></p></li><li><p>列表可以存储重复数据</p></li><li><p>任意数据类型混存</p></li><li><p>根据需要<strong>动态分配和回收内存</strong></p></li></ul><h4 id="（3）内存">（3）内存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, <span class="built_in">id</span>(lst), <span class="string">&quot;\n&quot;</span>,\</span><br><span class="line">      <span class="built_in">id</span>(lst[<span class="number">0</span>]), <span class="string">&quot;\n&quot;</span>,\</span><br><span class="line">      <span class="built_in">id</span>(lst[<span class="number">1</span>]), <span class="string">&quot;\n&quot;</span>,\</span><br><span class="line">      <span class="built_in">id</span>(lst[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2769239388736 </span><br><span class="line">2769239324848 </span><br><span class="line">2769239325040 </span><br><span class="line">2769238035728 </span><br></pre></td></tr></table></figure><h4 id="（4）获取、切片">（4）获取、切片</h4><ul><li><p>获取列表指定元素的索引 <strong>index()</strong></p><ul><li><p>如查列表中存在N个相同元素，只返回相同元素中的第一个元素的索引</p></li><li><p>如果查询的元素在列表中不存在，则会抛出ValueError</p></li><li><p>还可以在指定的start和stop之间进行查找</p></li><li><p>index(‘目标’, start, end)  # start~end-1 <strong>指定范围</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;hello&#x27;</span>))   <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;python&#x27;</span>))<span class="comment"># ValueError: &#x27;python&#x27; is not in list</span></span><br><span class="line"><span class="built_in">print</span>(lst.index(<span class="string">&#x27;hello&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>))<span class="comment"># ValueError: &#x27;hello&#x27; is not in list</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>根据索引获取元素</p><ul><li><p>正向索引从 0 到 N - 1</p></li><li><p>逆向索引从 -N 到 -1</p></li><li><p>指定索引不存，抛出 indexError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>])   <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">print</span>(lst[-<span class="number">1</span>])  <span class="comment"># 98</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">3</span>])   <span class="comment"># IndexError: list index out of range</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>切片操作</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/8.png" style="zoom: 50%;" />  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表&#x27;</span>, <span class="built_in">id</span>(lst))<span class="comment"># 2016570503552</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;新列表&#x27;</span>, <span class="built_in">id</span>(lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">1</span>]))<span class="comment"># 2016570470144</span></span><br><span class="line"><span class="comment"># 默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>])     <span class="comment"># [2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment"># 默认start</span></span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">6</span>:<span class="number">2</span>])    <span class="comment"># [1, 3, 5]</span></span><br><span class="line"><span class="comment"># 默认stop</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>::<span class="number">2</span>])    <span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; step为负数 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(lst[::-<span class="number">1</span>])    <span class="comment"># [8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">7</span>::-<span class="number">2</span>])   <span class="comment"># [8, 6, 4, 2]</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">6</span>:<span class="number">0</span>:-<span class="number">2</span>])  <span class="comment"># [7, 5, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="（5）查询列表、遍历">（5）查询列表、遍历</h4><ul><li><p>判断指定元素是否在列表中</p><p><code>元素 in 列表名</code></p><p><code>元素 not in 列表名</code></p></li><li><p>列表元素的遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代对象 <span class="keyword">in</span> 列表名:</span><br><span class="line">    操作</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> lst)         <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> lst)        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li></ul><h4 id="（6）添加">（6）添加</h4><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">append()</td><td style="text-align:left">在列表<strong>末尾</strong>添加<strong>一个</strong>元素</td></tr><tr><td style="text-align:center">extend()</td><td style="text-align:left">在列表<strong>末尾</strong>添加<strong>至少一个</strong>元素</td></tr><tr><td style="text-align:center">insert()</td><td style="text-align:left">在列表<strong>任意指定位置</strong>添加<strong>一个</strong>元素</td></tr><tr><td style="text-align:center">切片</td><td style="text-align:left">在列表<strong>任意指定位置</strong>添加<strong>至少一个</strong>元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原列表：&quot;</span>, <span class="built_in">id</span>(lst1))     <span class="comment"># 输出为 1814123508096</span></span><br><span class="line">lst1.append(<span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新列表：&quot;</span>, <span class="built_in">id</span>(lst1))     <span class="comment"># 输出为 1814123508096</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line">lst2 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="comment"># lst1.append(lst2)   </span></span><br><span class="line"><span class="comment"># 将lst2作为一个元素添加到列表的末尾 [10, 20, 30, 40, [&#x27;hello&#x27;, &#x27;world&#x27;]]</span></span><br><span class="line"><span class="comment"># 向列表末尾一次性添加多个元素</span></span><br><span class="line">lst1.extend(lst2)         </span><br><span class="line"><span class="built_in">print</span>(lst1)         <span class="comment"># 输出为 [10, 20, 30, 40, &#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line"><span class="comment"># 指定位置添加元素</span></span><br><span class="line">lst1.insert(<span class="number">1</span>, <span class="number">90</span>)          </span><br><span class="line"><span class="built_in">print</span>(lst1)         <span class="comment"># 输出为 [10, 90, 20, 30, 40, &#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line"><span class="comment"># 在任意位置添加多个元素</span></span><br><span class="line">lst3 = [<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;xpl&#x27;</span>]</span><br><span class="line">lst1[<span class="number">1</span>:] = lst3 = [<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;xpl&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst1)         <span class="comment"># 输出为 [10, &#x27;ggw&#x27;, &#x27;xpl&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="（7）删除">（7）删除</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">remove()</td><td>一次删除<strong>一个</strong>元素；<br/>重复元素只删除第一个；<br/>元素不存在抛出ValueError；</td></tr><tr><td style="text-align:center">pop()</td><td>删除<strong>一个</strong>指定索引位置上的元素；<br/>指定索引不存在抛出IndexError；<br/>不指定索引，删除列表最后一个元素；</td></tr><tr><td style="text-align:center">切片</td><td>一次<strong>至少删除一个</strong>元素</td></tr><tr><td style="text-align:center">clear()</td><td><strong>清空</strong>列表</td></tr><tr><td style="text-align:center">del</td><td><strong>删除</strong>列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>]</span><br><span class="line">lst.remove(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># 输出为 [10, 20, 40, 50, 60, 70, 80]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line">lst.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># 输出为 [10, 40, 50, 60, 70, 80]</span></span><br><span class="line"><span class="comment"># lst.pop(6)</span></span><br><span class="line"><span class="comment"># print(lst)      # IndexError: pop index out of range</span></span><br><span class="line">lst.pop()</span><br><span class="line"><span class="built_in">print</span>(lst)      <span class="comment"># 输出为 [10, 40, 50, 60, 70] 默认删除最后一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line">new_lst = lst[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(new_lst, lst)     <span class="comment"># 输出为 [40, 50] [10, 40, 50, 60, 70]</span></span><br><span class="line"><span class="comment"># 切片删除</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = []</span><br><span class="line"><span class="built_in">print</span>(lst)              <span class="comment"># 输出为 [10, 60, 70]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line">lst.clear()</span><br><span class="line"><span class="built_in">print</span>(lst)              <span class="comment"># 输出为 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================================================</span></span><br><span class="line"><span class="comment"># del lst</span></span><br><span class="line"><span class="comment"># print(lst)              </span></span><br><span class="line"><span class="comment"># NameError: name &#x27;lst&#x27; is not defined. Did you mean: &#x27;list&#x27;?</span></span><br></pre></td></tr></table></figure><h4 id="（8）修改">（8）修改</h4><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="comment"># 一次修改一个值</span></span><br><span class="line">lst[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出为 [10, 20, 100, 40]</span></span><br><span class="line"><span class="comment"># 一次修改多个值</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出为 [10, 200, 300, 40]</span></span><br></pre></td></tr></table></figure><h4 id="（9）排序和列表生成式">（9）排序和列表生成式</h4><p><strong>排序</strong></p><ul><li><p>调用 <strong>sort()</strong> 方法，列有中的所有元素默认按照从小到大的顺序进行排序，可以指定reverse=True，进行降序排序</p></li><li><p>调用内置函数 <strong>sorted()</strong> ，可以指定reverse=True，进行降序排序，原列表不发生改变，产生新的列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">98</span>, <span class="number">54</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序前&#x27;</span>, lst1, <span class="built_in">id</span>(lst1))    <span class="comment"># 输出为 [20, 40, 10, 98, 54] 1776600150400</span></span><br><span class="line"><span class="comment"># 开始排序，调用列表对象的 sort 方法</span></span><br><span class="line">lst1.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序后&#x27;</span>, lst1, <span class="built_in">id</span>(lst1))    <span class="comment"># 输出为 [10, 20, 40, 54, 98] 1776600150400</span></span><br><span class="line"><span class="comment"># 使用参数 reverse = True 降序, 默认为False</span></span><br><span class="line">lst1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(lst1)                     <span class="comment"># 输出为 [98, 54, 40, 20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================</span></span><br><span class="line">lst2 = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">98</span>, <span class="number">54</span>]</span><br><span class="line">new_lst2 = <span class="built_in">sorted</span>(lst2)</span><br><span class="line"><span class="built_in">print</span>(lst2, <span class="built_in">id</span>(lst2))           <span class="comment"># 输出为 [20, 40, 10, 98, 54] 2450901070336</span></span><br><span class="line"><span class="built_in">print</span>(new_lst2, <span class="built_in">id</span>(new_lst2))   <span class="comment"># 输出为 [10, 20, 40, 54, 98] 2450901022144</span></span><br><span class="line"><span class="comment"># 指定关键字参数，降序</span></span><br><span class="line">desc_lst2 = <span class="built_in">sorted</span>(lst2, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(desc_lst2)                <span class="comment"># 输出为 [98, 54, 40, 20, 10]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>列表生成式</strong></p><p>生成列表的公式</p><p>语法格式：</p>  <img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/9.png" alt=" " style="zoom: 80%;" /> <p>ps：“表示列表元素的表达式&quot;中通常包含自定义变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出为 [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">lst = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出为 [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line">lst = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出为 [2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure><h3 id="2、字典">2、字典</h3><h4 id="（1）什么是字典">（1）什么是字典</h4><ul><li>Python内置的数据结构之一，与列表一样是一个<strong>可变序列</strong></li><li>以键值对的方式存储数据,字典是一个无序的序列</li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/10.png" style="zoom:50%;" /> <h4 id="（2）实现原理">（2）实现原理</h4><p>字典的实现原理与查字典类似，查字典是先根据部首或拼音查找应的页码,Python中的字典是根据<strong>key</strong>查找<strong>value</strong>所在的位置</p><p>字典示意图：</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/11.png" alt=""></p><h4 id="（3）创建">（3）创建</h4><ul><li><p><strong>最常用</strong>：使用{}</p><p><code>scores = &#123;'张三': 100, '李四': 98, '王五': 45&#125;</code></p></li><li><p>使用内置函数<strong>dict()</strong></p><p><code>scores = dict(张三='100', 李四='98', 王五='45')</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、使用&#123;&#125;创建字典 &quot;&quot;&quot;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)       <span class="comment"># 输出为 &#123;&#x27;张三&#x27;: 100, &#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scores)) <span class="comment"># 输出为 &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、dict() &quot;&quot;&quot;</span></span><br><span class="line">scores = <span class="built_in">dict</span>(张三=<span class="string">&#x27;100&#x27;</span>, 李四=<span class="string">&#x27;98&#x27;</span>, 王五=<span class="string">&#x27;45&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)       <span class="comment"># 输出为 &#123;&#x27;张三&#x27;: &#x27;100&#x27;, &#x27;李四&#x27;: &#x27;98&#x27;, &#x27;王五&#x27;: &#x27;45&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 空字典 &quot;&quot;&quot;</span></span><br><span class="line">scores = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)       <span class="comment"># 输出为 &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="（4）获取">（4）获取</h4><ul><li><p>[]</p><p><code>scores['张三']</code></p></li><li><p>get()</p><p><code>scores.get('张三')</code></p></li><li><p>区别</p><ul><li><p>如果字典中不存在指定的key，抛出keyError异常</p></li><li><p>get()方法取值，如果字典中不存在指定的key，并不会抛出KeyErre<br>None，可以通过参数设置默认的value,以便指定的key不存在时返回</p><p><code>get(key[, 默认值])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="comment"># print(scores[&#x27;ggw&#x27;])        # 输出为 KeyError: &#x27;ggw&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;ggw&#x27;</span>))            <span class="comment"># 输出为 None</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;ggw&#x27;</span>, <span class="string">&#x27;不造啊&#x27;</span>))   <span class="comment"># 输出为 不造啊</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;ggw&#x27;</span>, <span class="number">404</span>))       <span class="comment"># 输出为 404</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="（5）增删改查">（5）增删改查</h4><ul><li>判断：in \ not in(key)</li><li>删除：del scores[‘张三’]</li><li>新增：scores[‘ggw’] = 99</li><li>修改：scores[‘ggw’] = 100</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">in</span> scores)       <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> scores)   <span class="comment"># 输出为 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">del</span> scores[<span class="string">&#x27;张三&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># 输出为 &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">scores[<span class="string">&#x27;ggw&#x27;</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># 输出为 &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;ggw&#x27;: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">scores[<span class="string">&#x27;ggw&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(scores)   <span class="comment"># 输出为 &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;ggw&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（6）常用方法">（6）常用方法</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">keys()</td><td>获取字典中所有的key</td></tr><tr><td style="text-align:center">values()</td><td>获取字典中所有的value</td></tr><tr><td style="text-align:center">items()</td><td>获取字典中所有的key, value对</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的key</span></span><br><span class="line">keys = scores.keys()</span><br><span class="line"><span class="built_in">print</span>(keys)         <span class="comment"># 输出为 dict_keys([&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(keys))   <span class="comment"># 输出为 &lt;class &#x27;dict_keys&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(keys))   <span class="comment"># 输出为 [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]  转成列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的value</span></span><br><span class="line">values = scores.values()</span><br><span class="line"><span class="built_in">print</span>(values)         <span class="comment"># 输出为 dict_values([100, 98, 45])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(values))   <span class="comment"># 输出为 &lt;class &#x27;dict_values&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(values))   <span class="comment"># 输出为 [100, 98, 45]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的key, value对</span></span><br><span class="line">items = scores.items()</span><br><span class="line"><span class="built_in">print</span>(items)         <span class="comment"># 输出为 dict_items([(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(items))   <span class="comment"># 输出为 &lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(items))   <span class="comment"># 输出为 [(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)]    转成元组</span></span><br></pre></td></tr></table></figure><h4 id="（7）遍历">（7）遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;李四&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;王五&#x27;</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(item, scores[item], scores.get(item))</span><br><span class="line"><span class="comment"># 输出为 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">张三 100 100</span></span><br><span class="line"><span class="string">李四 98 98</span></span><br><span class="line"><span class="string">王五 45 45</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（8）特点">（8）特点</h4><ul><li>字典中的所有元素都是一个key-value对, <strong>key不允许重复</strong>, value可以重复</li><li>字典中的元素是无序的</li><li>字典中的<strong>key必须是不可变对象</strong>，字典也可以根据需要动态地伸缩</li><li>字典会浪费较大的内存，是一种使用<strong>空间换时间</strong>的数据结构</li></ul><h4 id="（9）字典生成式">（9）字典生成式</h4><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_18-40-09.png" alt=""></p><p><strong>内置函数zip()</strong><br>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Fruits&#x27;</span>, <span class="string">&#x27;Books&#x27;</span>, <span class="string">&#x27;Others&#x27;</span>]</span><br><span class="line">prices = [<span class="number">96</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">76</span>]</span><br><span class="line">res1 = &#123;item: price <span class="keyword">for</span> item, price <span class="keyword">in</span> <span class="built_in">zip</span>(items, prices)&#125;</span><br><span class="line"><span class="built_in">print</span>(res1)    <span class="comment"># 输出为 &#123;&#x27;Fruits&#x27;: 96, &#x27;Books&#x27;: 33, &#x27;Others&#x27;: 22&#125;</span></span><br><span class="line">res2 = &#123;item.upper(): price <span class="keyword">for</span> item, price <span class="keyword">in</span> <span class="built_in">zip</span>(items, prices)&#125;</span><br><span class="line"><span class="built_in">print</span>(res2)    <span class="comment"># 输出为 &#123;&#x27;FRUITS&#x27;: 96, &#x27;BOOKS&#x27;: 33, &#x27;OTHERS&#x27;: 22&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3、元组">3、元组</h3><p>Python内置的数据结构之一，是一个<strong>不可变序列</strong></p><h4 id="（1）创建">（1）创建</h4><ul><li>小括号()</li><li>使用内置函数 tuple()</li><li>只包含一个元组的元素需要使用逗号和小括号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、小括号()</span></span><br><span class="line">t1 = (<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)       <span class="comment"># 输出为(&#x27;python&#x27;, &#x27;hello&#x27;, 90)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment"># 输出为&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用内置函数 tuple()</span></span><br><span class="line">t2 = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">90</span>))</span><br><span class="line"><span class="built_in">print</span>(t2)           <span class="comment"># 输出为(&#x27;python&#x27;, &#x27;hello&#x27;, 90)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))     <span class="comment"># 输出为&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、只包含一个元组的元素需要使用逗号和小括号</span></span><br><span class="line">t3 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3)           <span class="comment"># 输出为hello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))     <span class="comment"># 输出为&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(t4)           <span class="comment"># 输出为(&#x27;hello&#x27;,)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))     <span class="comment"># 输出为&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、创建空元组</span></span><br><span class="line">t5 = ()</span><br><span class="line">t6 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="built_in">print</span>(t5, t6)    <span class="comment"># 输出为 () ()</span></span><br></pre></td></tr></table></figure><h4 id="（2）为什么元组要设计成不可变的序列">（2）为什么元组要设计成不可变的序列</h4><ul><li><p>在多任务环境下，同时操作对象时不需要加锁</p></li><li><p>因此,在程序中尽量使用不可变序列</p></li><li><p><strong>注意事项</strong>: 元组中存储的是对象的引用</p><ul><li>如果元组中对象本身不可对象，则不能再引用其它对象</li><li>如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变</li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_19-01-13.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], <span class="number">40</span>)</span><br><span class="line"><span class="comment"># 元组不允许修改元素</span></span><br><span class="line"><span class="comment"># t[1] = 100  # 输出为 TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line">t[<span class="number">1</span>].append(<span class="number">35</span>)</span><br><span class="line"><span class="built_in">print</span>(t)    <span class="comment"># 输出为 (10, [20, 30, 35], 40)</span></span><br></pre></td></tr></table></figure><h4 id="（3）获取、遍历">（3）获取、遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引获取元组元素</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])     <span class="comment"># 输出为 10</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>])     <span class="comment"># 输出为 [20, 30]</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>])     <span class="comment"># 输出为 40</span></span><br><span class="line"><span class="comment"># print(t[3])     # 输出为 IndexError: tuple index out of range</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h3 id="4、集合">4、集合</h3><ul><li>Python语言提供的内置数据结构</li><li>与列表、字典―样都属于<strong>可变类型</strong>的序列</li><li>集合是没有value的字典</li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/12.png" style="zoom: 67%;" /> <h4 id="（1）创建-2">（1）创建</h4><ul><li><p>花括号{}</p><p><code>s = &#123;1, 2, 4, 5, 5, 7, 7&#125;</code></p></li><li><p>使用内置函数set()</p><p><code>s = set(range(6))</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1、花括号&#123;&#125; &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 集合元素不允许重复</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)                            <span class="comment"># 输出为 &#123;1, 2, 4, 5, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、使用内置函数set() &quot;&quot;&quot;</span></span><br><span class="line">s = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(s)                            <span class="comment"># 输出为 &#123;0, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>]))          <span class="comment"># 输出为 &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>((<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>)))          <span class="comment"># 输出为 &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&#x27;python&#x27;</span>))                <span class="comment"># 输出为 &#123;&#x27;y&#x27;, &#x27;p&#x27;, &#x27;n&#x27;, &#x27;t&#x27;, &#x27;o&#x27;, &#x27;h&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">4</span>, <span class="number">4</span>&#125;))    <span class="comment"># 输出为 &#123;56, 3, 4, 53&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3、空集合 &quot;&quot;&quot;</span></span><br><span class="line">s1 = &#123;&#125;</span><br><span class="line">s2 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(s1, <span class="built_in">type</span>(s1))                 <span class="comment"># 输出为 &#123;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(s2, <span class="built_in">type</span>(s2))                 <span class="comment"># 输出为 set() &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（2）增删改查">（2）增删改查</h4><ul><li><p>集合元素的<strong>判断</strong>操作</p><p><code>in或not in</code></p></li><li><p>集合元素的<strong>新增</strong>操作</p><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">add()</td><td>一次添加一个元素</td></tr><tr><td style="text-align:center">update()</td><td>至少添加一个元素</td></tr></tbody></table></li><li><p>集合元素的<strong>删除</strong>操作</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>remove()</td><td>一次删除一个指定元素，如果指定的元素不存在抛出KeyError</td></tr><tr><td>discard()</td><td>一次删除一个指定元素，如果指定的元素不存在不抛出异常</td></tr><tr><td>pop()</td><td>一次只删除一个任意元素</td></tr><tr><td>clear()</td><td>清空集合</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">405</span>, <span class="number">60</span>&#125;</span><br><span class="line"><span class="string">&quot;&quot;&quot; 判断操作 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s)          <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">not</span> <span class="keyword">in</span> s)     <span class="comment"># 输出为 True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 新增操作 &quot;&quot;&quot;</span></span><br><span class="line">s.add(<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;80, 20, 405, 10, 60, 30&#125;</span></span><br><span class="line">s.update(&#123;<span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;200, 10, 300, 80, 400, 20, 405, 60, 30&#125;</span></span><br><span class="line">s.update(([<span class="number">100</span>, <span class="number">99</span>, <span class="number">8</span>]))</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;99, 100, 200, 8, 10, 300, 80, 400, 20, 405, 60, 30&#125;</span></span><br><span class="line">s.update((<span class="number">78</span>, <span class="number">64</span>, <span class="number">56</span>))</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;64, 99, 100, 200, 8, 10, 300, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 删除操作 &quot;&quot;&quot;</span></span><br><span class="line">s.remove(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;64, 99, 200, 8, 10, 300, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line"><span class="comment"># s.remove(500)   # 输出为 KeyError: 500</span></span><br><span class="line">s.discard(<span class="number">500</span>)</span><br><span class="line">s.discard(<span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;64, 99, 200, 8, 10, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line">s.pop()     <span class="comment"># 输出为 无参</span></span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 &#123;99, 200, 8, 10, 78, 80, 400, 20, 405, 56, 60, 30&#125;</span></span><br><span class="line">s.clear()</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 输出为 set()</span></span><br></pre></td></tr></table></figure><h4 id="（3）集合间的关系">（3）集合间的关系</h4><ul><li><p>两个集合是否相等</p><ul><li>可以使用运算符==或!=进行判断</li></ul></li><li><p>一个集合是否是另一个集合的子集</p><ul><li><p>可以调用方法 <strong>issubset()</strong> 进行判断</p></li><li><p>B是A的子集</p></li></ul></li><li><p>一个集合是否是另一个集合的超集</p><ul><li><p>可以调用方法 <strong>issuperset()</strong> 进行判断·</p></li><li><p>A是B的超集</p></li></ul></li><li><p>两个集合是否没有交集</p><ul><li>可以调用方法 <strong>isdisjoint()</strong> 进行判断，有交集为False</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="string">&quot;&quot;&quot; 两个集合是否相等 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2)             <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(s1 != s2)             <span class="comment"># 输出为 False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 一个集合是否是另一个集合的子集 &quot;&quot;&quot;</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">s3 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">90</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))      <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(s3.issubset(s1))      <span class="comment"># 输出为 False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 一个集合是否是另一个集合的超集 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s2))    <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s3))    <span class="comment"># 输出为 False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 两个集合是否有交集 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s3))    <span class="comment"># 输出为 False （有交集为False）</span></span><br><span class="line">s4 = &#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s4))    <span class="comment"># 输出为 True （无交集为True）</span></span><br></pre></td></tr></table></figure><h4 id="（4）集合间的数学操作">（4）集合间的数学操作</h4><ol><li><p>交集：<code>s1.intersection(s2)</code> 或者 <code>s1 &amp; s2</code></p></li><li><p>并集：<code>s1.union(s2)</code> 或者 <code>s1 | s2</code></p></li><li><p>差集：<code>s1.difference(s2)</code> 或者 <code>s1 - s2</code></p></li><li><p>对称差集：<code>s1.symmetric_difference(s2)</code>或者 <code>s1 ^ s2</code></p><p><strong>ps：原集合都没有变化</strong></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="comment"># 1、交集</span></span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)  <span class="comment"># 输出为 &#123;40, 20, 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、并集</span></span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)  <span class="comment"># 输出为 &#123;40, 10, 50, 20, 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、差集</span></span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 - s2)  <span class="comment"># 输出为 &#123;10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、对称差集</span></span><br><span class="line"><span class="built_in">print</span>(s1.symmetric_difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)  <span class="comment"># 输出为 &#123;10, 50&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（5）集合生成式">（5）集合生成式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># &#123;0, 1, 64, 4, 36, 9, 16, 49, 81, 25&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5、总结">5、总结</h3><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/13.png" style="zoom: 50%;" /> <h2 id="五、字符串">五、字符串</h2><p>在Python中字符串是基本数据类型，是一个<strong>不可变</strong>的字符序列</p><h3 id="1、字符串的驻留机制">1、字符串的驻留机制</h3><p><strong>仅保存一份相同且不可变字符串</strong>的方法，不同的值被存放在字符串的驻留池中,Python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/14.png" style="zoom: 67%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;Python&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))     <span class="comment"># Python 1937251321008</span></span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">id</span>(b))     <span class="comment"># Python 1937251321008</span></span><br><span class="line"><span class="built_in">print</span>(c, <span class="built_in">id</span>(c))     <span class="comment"># Python 1937251321008</span></span><br></pre></td></tr></table></figure><ul><li><p>触发驻留机制的几种情况(交互模式)</p><ul><li>字符串的长度为0或1时</li><li>符合标识符的字符串</li><li>字符串只在编译时进行驻留，而非运行时</li><li>[-5,256]之间的整数数字</li></ul></li><li><p>sys中的intern方法强制2个字符串指向同一个对象</p></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/15.png" style="zoom: 67%;" /> <ul><li><p>PyCharm对字符串进行了优化处理(只要内容相同即驻留)</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_20-09-43.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-13_20-10-12.png" alt=""></p></li><li><p>字符串驻留机制的<strong>优缺点</strong></p><ul><li>当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的。</li><li>在<strong>需要进行字符串拼接时，建议使用str类型的join方法</strong>，而非+ ,因为join()方法是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率要比&quot;+&quot;效率高</li></ul></li></ul><h3 id="2、字符串的常用操作">2、字符串的常用操作</h3><h4 id="（1）查询">（1）查询</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">index()</td><td>查找子串substr第一次出现的位置，如果查找的子串不存在时，则抛出ValueError</td></tr><tr><td style="text-align:center">rindex()</td><td>查找子串substr最后一次出现的位置，如果查找的子串不存在时，则抛出ValueError</td></tr><tr><td style="text-align:center">find()</td><td>查找子串substr第一次出现的位置，如果查找的子串不存在时，则返回 -1</td></tr><tr><td style="text-align:center">rfind()</td><td>查找子串substr最后一次出现的位置，如果查找的子串不存在时，则返回 -1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.index(<span class="string">&#x27;lo&#x27;</span>))    <span class="comment"># 输出为 3    </span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;lo&#x27;</span>))     <span class="comment"># 输出为 3     </span></span><br><span class="line"><span class="built_in">print</span>(s.rindex(<span class="string">&#x27;lo&#x27;</span>))   <span class="comment"># 输出为 10</span></span><br><span class="line"><span class="built_in">print</span>(s.rfind(<span class="string">&#x27;lo&#x27;</span>))    <span class="comment"># 输出为 10</span></span><br></pre></td></tr></table></figure><h4 id="（2）大小写转换">（2）大小写转换</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">upper()</td><td>把字符串中所有字符都转成大写字母；<br/>产生了新的字符串</td></tr><tr><td style="text-align:center">lower()</td><td>把字符串中所有字符都转成小写字母；<br>产生了新的字符串</td></tr><tr><td style="text-align:center">swapcase()</td><td>把字符串中所有大写字母转成小写字母，把所有小写字母都转成大写字母；<br/>产生了新的字符串</td></tr><tr><td style="text-align:center">capitalize()</td><td>把第一个字符转换为大写，把其余字符转换为小写；<br/>产生了新的字符串</td></tr><tr><td style="text-align:center">title()</td><td>把每个单词的第一个字符转换为大写，把每个单词的剩余字符转换为小写；<br/>产生了新的字符串</td></tr></tbody></table><h4 id="（3）字符串对齐">（3）字符串对齐</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">center()</td><td><strong>居中对齐</strong>，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td style="text-align:center">ljust()</td><td><strong>左对齐</strong>，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td style="text-align:center">rjust()</td><td><strong>右对齐</strong>，第1个参数指定宽度，第2个参数指定填充符，第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则则返回原字符串</td></tr><tr><td style="text-align:center">zfill()</td><td><strong>右对齐</strong>，左边用0填充,该方法只接收一个参数，用于指定字符串的宽度，如果指定的宽度小于等于字符串的长度，返回字符串本身</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">20</span>, <span class="string">&#x27;*&#x27;</span>))    <span class="comment"># 输出为 ***hello, python****</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))    <span class="comment"># 输出为 hello, python</span></span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">20</span>))          <span class="comment"># 输出为 0000000hello, python</span></span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">10</span>))          <span class="comment"># 输出为 hello, python</span></span><br></pre></td></tr></table></figure><h4 id="（4）字符串的分割">（4）字符串的分割</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">split()</td><td>从字符串的<strong>左</strong>边开始劈分，默认的劈分字符是空格字符串，<strong>返回的值都是一个列表</strong>；<br/>以通过参数sep指定劈分字符串是的劈分符；<br/>通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大次劈分之后，剩余的子串会单独做为一部分</td></tr><tr><td style="text-align:center">rsplit()</td><td>从字符串的<strong>右</strong>边开始劈分，其他同split()</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello world python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.split())                       <span class="comment"># 输出为 [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span></span><br><span class="line">s2 = <span class="string">&#x27;hello|world|python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2.split())                       <span class="comment"># 输出为 [&#x27;hello|world|python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.split(sep=<span class="string">&#x27;|&#x27;</span>))                <span class="comment"># 输出为 [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.split(sep=<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))    <span class="comment"># 输出为 [&#x27;hello&#x27;, &#x27;world|python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s2.rsplit(sep=<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))   <span class="comment"># 输出为 [&#x27;hello|world&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure><p>ps: 可以这么写<code>'hello|world|python'.split('|')'</code></p><h4 id="（5）判断字符串">（5）判断字符串</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">isidentifier()</td><td>判断指定的家符串是不是合法的标识符</td></tr><tr><td style="text-align:center">isspace()</td><td>判断指定的字符串是否全部由空白字符组成(回车、换行，水平制表符)</td></tr><tr><td style="text-align:center">isalpha()</td><td>判断指定的字符串是否全部由字母组成（汉字也是）</td></tr><tr><td style="text-align:center">isdecimal()</td><td>判断指定字符串是否全部由十进制的数字组成</td></tr><tr><td style="text-align:center">isnumeric()</td><td>判断指定的字符串是否全部由数字组成</td></tr><tr><td style="text-align:center">isalnum()</td><td>判断指定字符串是否全部由字母和数字组成</td></tr></tbody></table><h4 id="（6）字符串的替换与合并">（6）字符串的替换与合并</h4><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">replace()</td><td>第1个参数指定被替换的子串，第2个参数指定替换子串的字符串，该方法返回替换后得到的字符串，替换前的字符串不发生变化,调用该方法时可以通过第3个参数指定最大替换次数<br>省流：第1个参数：替换什么；第2个参数：替换成什么；第3个参数：最大替换几次；</td></tr><tr><td style="text-align:center">join()</td><td>将<strong>列表或元组</strong>中的字符串合并成一个字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 替换 &quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&#x27;hello world python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>))  <span class="comment"># hello world java</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">2</span>))       <span class="comment"># hexxo world python 将列表或元组中的字符串合并成一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 合并 &quot;&quot;&quot;</span></span><br><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(lst))         <span class="comment"># helloworldpython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; | &#x27;</span>.join(lst))      <span class="comment"># hello | world | python</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>.join(<span class="string">&#x27;python&#x27;</span>))   <span class="comment"># p*y*t*h*o*n</span></span><br></pre></td></tr></table></figure><h3 id="3、字符串的比较操作">3、字符串的比较操作</h3><ul><li>运算符: &gt;, &gt;=, &lt;, &lt;=, ==, !=</li><li>比较规则:首先比较两个字符串中的第一个字符，如果相等则继续比较下一个字符，依次比较下去，直到两个字符串中的字符不相等时，其比较结果就是两个字符串的比较结果，两个字符串中的所有后续字符将不再被比较。</li><li>比较原理:两上字符进行比较时，比较的是其ordinal value(原始值)，<strong>调用内置函数 <em>ord()</em></strong> 可以得到指定字符的ordinal value。<strong>与内置函数ord()对应的是内置函数 chr()</strong> ，调用内置函数 <em>chr()</em> 时指定ordinal value可以得到其对应的字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abc&#x27;</span> &gt; <span class="string">&#x27;abs&#x27;</span>)        <span class="comment"># 输出为 False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>)            <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>))   <span class="comment"># 输出为 97 98</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">98</span>))     <span class="comment"># 输出为 a b</span></span><br></pre></td></tr></table></figure><h3 id="4、字符串的切片操作">4、字符串的切片操作</h3><ul><li>字符串是不可变类型<ul><li>不具备增、删、改等操作</li><li><strong>切片操作将产生新的对象</strong></li></ul></li></ul><p>切片操作同列表<code>str[start: end: step]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hellopython&#x27;</span></span><br><span class="line">s1 = <span class="built_in">str</span>[:<span class="number">4</span>]</span><br><span class="line">s2 = <span class="built_in">str</span>[<span class="number">5</span>:]</span><br><span class="line">s3 = s1 + <span class="string">&#x27; &#x27;</span> + s2 + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, <span class="string">&#x27;|&#x27;</span>, s2, <span class="string">&#x27;|&#x27;</span>, s3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, <span class="built_in">id</span>(<span class="built_in">str</span>), <span class="string">&#x27;\n&#x27;</span>, \</span><br><span class="line">      <span class="built_in">id</span>(s1), <span class="string">&#x27;\n&#x27;</span>, \</span><br><span class="line">      <span class="built_in">id</span>(s2), <span class="string">&#x27;\n&#x27;</span>, \</span><br><span class="line">      <span class="built_in">id</span>(s3))</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hell | python | hell python!</span><br><span class="line"> 2638999304560 </span><br><span class="line"> 2638999304368 </span><br><span class="line"> 2638999351984 </span><br><span class="line"> 2638999351664</span><br></pre></td></tr></table></figure><h3 id="5、格式化字符串">5、格式化字符串</h3><p>两种方式：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/16.png" style="zoom: 67%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 1、%占位符 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫%s, 今年%d岁&#x27;</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 2、&#123;&#125;占位符 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0&#125;, 今年&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3、f-string &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>, 今年<span class="subst">&#123;age&#125;</span>岁&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 精度 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10d&#x27;</span> % <span class="number">99</span>)              <span class="comment"># 10表示的是宽度 |        99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.3f&#x27;</span> % <span class="number">3.1415926</span>)       <span class="comment"># 3表示的是小数点后3位 |3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10.3f&#x27;</span> % <span class="number">3.1415926</span>)     <span class="comment"># |     3.142</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))       <span class="comment"># 3表示的是一个三位 |3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))      <span class="comment"># 3表示的是一个三位小数 |3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))    <span class="comment"># |     3.142</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我叫张三, 今年20岁</span><br><span class="line">我叫张三, 今年20岁</span><br><span class="line">我叫张三, 今年20岁</span><br><span class="line">        99</span><br><span class="line">3.142</span><br><span class="line">     3.142</span><br><span class="line">3.14</span><br><span class="line">3.142</span><br><span class="line">     3.142</span><br></pre></td></tr></table></figure><h3 id="6、编码、解码">6、编码、解码</h3><ul><li><p>为什么需要编码转换</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/17.png" style="zoom:67%;" /> </li><li><p>编码解码的方式</p><ul><li>编码：将字符串转换为二进制数据(bytes)，<code>s.encode(encoding='GBK')</code>，<strong>GBK、UTF-8</strong></li><li>解码：将bytes类型的数据转换成字符串类型，<code>byte.decode(encoding='GBK')</code>，编码解码的格式要一致</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;不想学了&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 编码 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding=<span class="string">&#x27;GBK&#x27;</span>))     <span class="comment"># GBK：一个中文占两个字节</span></span><br><span class="line"><span class="comment"># 输出：b&#x27;\xb2\xbb\xcf\xeb\xd1\xa7\xc1\xcb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>))   <span class="comment"># UTF-8：一个中文占三个字节</span></span><br><span class="line"><span class="comment"># 输出：b&#x27;\xe4\xb8\x8d\xe6\x83\xb3\xe5\xad\xa6\xe4\xba\x86&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 解码 格式要一致&quot;&quot;&quot;</span></span><br><span class="line">byte = s.encode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding=<span class="string">&#x27;GBK&#x27;</span>))</span><br><span class="line"><span class="comment"># 输出为 不想学了</span></span><br><span class="line">byte = s.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 输出为 不想学了</span></span><br></pre></td></tr></table></figure><h2 id="六、函数">六、函数</h2><h3 id="1、创建">1、创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">[输入参数]</span>):</span><br><span class="line">    函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 函数创建 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">a, b</span>):<span class="comment"># a, b是形参</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 函数调用 &quot;&quot;&quot;</span></span><br><span class="line">res = calc(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(res)<span class="comment"># 输出为 30 </span></span><br></pre></td></tr></table></figure><h3 id="2、函数调用的参数传递">2、函数调用的参数传递</h3><ul><li><strong>位置实参</strong><br>根据形参对应的位置进行实参传递</li><li><strong>关键字实参</strong><br>根据形参名称进行实参传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">a, b</span>):     <span class="comment"># a, b是形参</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_put(<span class="number">10</span>, <span class="number">20</span>)        <span class="comment"># a = 10 b = 20</span></span><br><span class="line">_put(b=<span class="number">10</span>, a=<span class="number">20</span>)    <span class="comment"># a = 20 b = 10</span></span><br></pre></td></tr></table></figure><h3 id="3、参数传递的内存分析">3、参数传递的内存分析</h3><p>内存分析图：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/18.png"  />  <h3 id="4、函数的返回值">4、函数的返回值</h3><ul><li><p>如果函数没有返回值【函数执行完毕之后，不需要给调用处提供数据】return可以省略不写</p><p><strong>如果没有return，则默认返回None</strong></p></li><li><p>函数的返回值如果是1个，直接返回类型</p></li><li><p>函数的返回值<strong>如果是多个</strong>(<code>return a, b</code>)，返回的<strong>结果为元组</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行了fun1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行了fun2&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>, <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun1())</span><br><span class="line"><span class="built_in">print</span>(fun2(), <span class="built_in">type</span>(fun2()))</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行了fun1</span><br><span class="line">None</span><br><span class="line">执行了fun2</span><br><span class="line">执行了fun2</span><br><span class="line">(10, 20) &lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="5、函数参数的定义">5、函数参数的定义</h3><h4 id="（1）默认值参数">（1）默认值参数</h4><p>函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参<br>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a, b=<span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>)  <span class="comment"># 输出为 1 10</span></span><br></pre></td></tr></table></figure><h4 id="（2）个数可变的位置参数">（2）个数可变的位置参数</h4><ul><li>定义函数时，可能无法事先确定传递的位置实参的个数时，使用可变的位置参数</li><li>使用 <strong>*</strong> 定义个数可变的位置形参</li><li>结果为一个<strong>元组</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">put(<span class="number">10</span>)             <span class="comment"># 输出为 (10,)</span></span><br><span class="line">put(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)     <span class="comment"># 输出为 (10, 20, 30)</span></span><br></pre></td></tr></table></figure><h4 id="（3）个数可变的关键字形参">（3）个数可变的关键字形参</h4><ul><li>定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参</li><li>使用 <strong>**</strong> 定义个数可变的关键字形参</li><li>结果为一个<strong>字典</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_put(a=<span class="number">10</span>)        <span class="comment"># &#123;&#x27;a&#x27;: 10&#125;</span></span><br><span class="line">_put(a=<span class="number">10</span>, b=<span class="number">20</span>, c=<span class="number">30</span>)    <span class="comment"># &#123;&#x27;a&#x27;: 10, &#x27;b&#x27;: 20, &#x27;c&#x27;: 30&#125;</span></span><br></pre></td></tr></table></figure><p><strong>ps：</strong></p><ul><li>个数可变的位置参数和关键字形参都只能是一个</li><li>可以同时都有，但是个数可变的位置参数必须在写在前面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">*args, *a</span>):<span class="comment"># 报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args, **a</span>):<span class="comment"># 报错 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">**args, *a</span>):<span class="comment"># 报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_put</span>(<span class="params">*args, **a</span>):<span class="comment"># 正确</span></span><br></pre></td></tr></table></figure><h4 id="（4）参数使用总结">（4）参数使用总结</h4><p><a href="https://www.bilibili.com/video/BV1wD4y1o7AS?t=639.3&amp;p=93">视频总结</a></p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/19.png" style="zoom:50%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;, b =&#x27;</span>, b, <span class="string">&#x27;, c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 将 列表 每个元素转化为 位置实参 传入&quot;&quot;&quot;</span></span><br><span class="line">lst = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="comment"># put(lst)      # 输出为 TypeError</span></span><br><span class="line"><span class="comment"># 解构列表 </span></span><br><span class="line">put(*lst)       <span class="comment"># 输出为 a = 100 , b = 200 , c = 300</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 将 字典 每个元素转化为 关键字实参 传入&quot;&quot;&quot;</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">333</span>&#125;</span><br><span class="line"><span class="comment"># put(dic)      # 输出为 TypeError</span></span><br><span class="line">put(*dic)       <span class="comment"># 输出为 a = a , b = b , c = c</span></span><br><span class="line">put(**dic)      <span class="comment"># 输出为 a = 111 , b = 222 , c = 333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 函数定义时的形参顺序问题 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b, *, c, d</span>):    <span class="comment"># &#x27;*&#x27;后必须使用 关键字实参</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, *, c, d, **args</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">a, b=<span class="number">10</span> ,*args1 ,**args2</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="6、递归函数">6、递归函数</h3><ul><li><p>递归的调用过程：</p><ul><li><p>每递归调用一次函数，都会在栈内存分配一个栈帧，</p></li><li><p>每执行完一次函数，都会释放相应的空间</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">n</span>):                       </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:                    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>                  </span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="keyword">return</span> n * fac(n - <span class="number">1</span>)     </span><br><span class="line">                                  </span><br><span class="line">                                  </span><br><span class="line"><span class="built_in">print</span>(fac(<span class="number">6</span>))   <span class="comment"># 720 6的阶乘        </span></span><br></pre></td></tr></table></figure><h3 id="7、匿名函数">7、匿名函数</h3><p>使用lambda来创建匿名函数，它是一个可以接收多个任意参数，并返回单个表达式的值的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y, z: x * y * z</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))   <span class="comment"># 60 </span></span><br><span class="line">L = <span class="keyword">lambda</span> x: [x**<span class="number">2</span>, x**<span class="number">3</span>, x**<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(L(<span class="number">2</span>))     <span class="comment"># [4, 8, 16]</span></span><br></pre></td></tr></table></figure><h2 id="七、bug、异常处理">七、bug、异常处理</h2><h3 id="1、bug的类型">1、bug的类型</h3><ul><li><p>粗心导致的语法错误</p><ol><li>漏了<strong>末尾的冒号</strong>，如if语句,循环语句,else子句等</li><li><strong>缩进错误</strong>，该缩进的没缩进,不该缩进的瞎缩进</li><li>把<strong>英文符号</strong>写成中文符号，比如说:引号，冒号，括号</li><li>字符串拼接的时候，把<strong>字符串和数字拼在一起</strong></li><li>没有<strong>定义变量</strong>,比如说while的循环条件的变量</li><li>&quot;<strong>==</strong>&quot;比较运算符和”<strong>=</strong>”赋值运算符的混用</li></ol></li><li><p>知识点掌握不熟练</p><ul><li>索引越界</li><li>内置函数还是对象方法</li></ul></li><li><p>逻辑错误</p></li><li><p><strong>被动掉坑</strong></p><p>程序代码逻辑没有错，只是因为用户错误操作或者一些“例外情况&quot;而导致的<strong>程序崩溃</strong></p><p><strong>解决</strong>：Python异常处理机制</p></li></ul><h3 id="2、Python异常处理机制">2、Python异常处理机制</h3><p>Python提供了异常处理机制，可以在异常出现时即时捕获，然后内部“消化”,让程序继续运行。</p><h4 id="（1）try-except">（1）try-except</h4><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/20.png" style="zoom:50%;" /> <h4 id="（2）多个except结构">（2）多个except结构</h4><ul><li><p>捕获异常的顺序按照<strong>先子类后父亲类</strong>的顺序,为了避免遗漏可能出现的异常，可以在最后增加</p><p><strong>BaseException</strong></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="（3）try-except-else">（3）try-except-else</h4><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了：&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br></pre></td></tr></table></figure><h4 id="（4）try-except-else-finally">（4）try-except-else-finally</h4><p>finally块无论是否发生异常都会被执行，能常用来释放try块中申请的资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数:&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数:&#x27;</span>))</span><br><span class="line">    res = n1 / n2</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了：&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>, res)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;运行结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3、Python中常见的异常">3、Python中常见的异常</h3><table><thead><tr><th style="text-align:center">异常类型</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">ZeroDivisionError</td><td>除(或取模)零(所有数据类型)</td></tr><tr><td style="text-align:center">IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td style="text-align:center">KeyError</td><td>映射中没有这个键</td></tr><tr><td style="text-align:center">NameError</td><td>未声明/初始化对象(没有属性)</td></tr><tr><td style="text-align:center">SyntaxError</td><td>Python语法错误</td></tr><tr><td style="text-align:center">ValueError</td><td>传入无效参数</td></tr></tbody></table><h3 id="4、traceback模块">4、traceback模块</h3><p>使用traceback模块打印异常信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    num = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure><h3 id="5、Pycharm程序调试">5、Pycharm程序调试</h3><p>断点调试</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/21.png" style="zoom: 67%;" /> <h2 id="八、类和对象">八、类和对象</h2><blockquote><p>python中一切皆对象</p></blockquote><h3 id="1、创建类">1、创建类</h3><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>：</span><br><span class="line">内容</span><br></pre></td></tr></table></figure><p>类名规范：由一个或多个单词组成，每个单词的首字母大写</p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python中一切皆对象，内存有开空间吗？</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student))      <span class="comment"># 输出为 1541726811616</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Student))    <span class="comment"># 输出为 &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(Student)          <span class="comment"># 输出为 &lt;class &#x27;__main__.Student&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>类的组成<ul><li>类属性</li><li>初始化方法</li><li>实例方法</li><li>静态方法</li><li>类方法</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># 类属性：类里面的变量</span></span><br><span class="line">    native_place = <span class="string">&#x27;福建&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># self.name称为实体属性，将局部变量赋值name给实体属性name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instanceFun</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是一个实例方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">staticFun</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是一个静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">classFun</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是一个类方法&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>ps: self代表实例对象本身</strong></p><h3 id="2、创建对象">2、创建对象</h3><p>又称为类的实例化</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例名 = 类名()</span><br></pre></td></tr></table></figure><p>举例：（使用上面的Student类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ggw = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------| ggw |-----------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(ggw))          <span class="comment"># 输出为 2602738007632</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ggw))        <span class="comment"># 输出为 &lt;class &#x27;__main__.Student&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(ggw)              <span class="comment"># 输出为 &lt;__main__.Student object at 0x0000025DFF463E50&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------| Student |-----------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student))      <span class="comment"># 输出为 1757065559632</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Student))    <span class="comment"># 输出为 &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(Student)          <span class="comment"># 输出为 &lt;class &#x27;__main__.Student&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>输出为</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_13-26-16.png" alt=""></p><h3 id="3、类属性、类方法、静态方法的使用方法">3、类属性、类方法、静态方法的使用方法</h3><h4 id="（1）类属性">（1）类属性</h4><blockquote><p>类中方法外的变量称为类变量，<strong>被该类的所有对象共享(类指针)</strong></p></blockquote><p>举例：（使用上面的Student类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu1 = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;xpl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Student.native_place)                     <span class="comment"># 福建</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name, stu2.name)                     <span class="comment"># ggw xpl</span></span><br><span class="line"><span class="built_in">print</span>(stu1.native_place, stu2.native_place)     <span class="comment"># 福建 福建</span></span><br><span class="line">Student.native_place = <span class="string">&#x27;吉林&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1.native_place, stu2.native_place)     <span class="comment"># 吉林 吉林</span></span><br></pre></td></tr></table></figure><h4 id="（2）类方法">（2）类方法</h4><blockquote><p>使用<code>@classmethod</code>修饰的方法，<strong>使用类名直接访问的方法</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu.classFun()<span class="comment"># 输出为 我是一个类方法</span></span><br><span class="line">Student.classFun()<span class="comment"># 输出为 我是一个类方法</span></span><br></pre></td></tr></table></figure><h4 id="（3）静态方法">（3）静态方法</h4><blockquote><p>使用<code>@staticmethod</code>修饰的方法，<strong>使用类名直接访问的方法</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu.staticFun()         <span class="comment"># 输出为 我是一个静态方法</span></span><br><span class="line">Student.staticFun()     <span class="comment"># 输出为 我是一个静态方法</span></span><br></pre></td></tr></table></figure><h4 id="（4）实例方法">（4）实例方法</h4><p>使用1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例名.实例方法名()</span><br></pre></td></tr></table></figure><p>使用2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.实例方法名(实例名)</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu.instanceFun()           <span class="comment"># 输出为 我是一个实例方法</span></span><br><span class="line">Student.instanceFun(stu)    <span class="comment"># 输出为 我是一个实例方法</span></span><br></pre></td></tr></table></figure><h3 id="4、动态绑定属性和方法">4、动态绑定属性和方法</h3><blockquote><p>python是动态语言，在创建对象后，可以动态地绑定属性和方法</p></blockquote><ul><li><strong>动态绑定属性</strong></li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例名.要绑定地属性名 = 值</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;xpl&#x27;</span>)</span><br><span class="line">stu1.eat()                      <span class="comment"># 输出为 ggw在吃饭</span></span><br><span class="line">stu2.eat()                      <span class="comment"># 输出为 xpl在吃饭</span></span><br><span class="line"><span class="comment"># 动态绑定 属性 gender</span></span><br><span class="line">stu1.gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name, stu1.gender)   <span class="comment"># 输出为 ggw 男</span></span><br><span class="line"><span class="comment"># print(stu2.name, stu2.gender)   # 报错：AttributeError: &#x27;Student&#x27; object has no attribute &#x27;gender&#x27;</span></span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_18-52-33.png" alt=""></p><ul><li><strong>动态绑定方法</strong></li></ul><p>语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例名.要绑定地方法名 = 方法</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是新绑定的&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;xpl&#x27;</span>)</span><br><span class="line"><span class="comment"># 动态绑定 方法 myShow</span></span><br><span class="line">stu2.myShow = show</span><br><span class="line">stu2.myShow()   <span class="comment"># 我是新绑定的</span></span><br><span class="line"><span class="comment"># stu1.myShow()   # 报错：AttributeError: &#x27;Student&#x27; object has no attribute &#x27;myShow&#x27;</span></span><br></pre></td></tr></table></figure><p>内存图类似上面的</p><h3 id="5、面向对象的三大特征">5、面向对象的三大特征</h3><ul><li><strong>封装</strong>: 提高程序的安全性<ul><li>将数据 (属性)和行为(法)包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样就无需关心方法内部的具体实现细节，从而隔离了复这样杂度。</li><li>在Python中没有专门的修饰符用于属性的私有，如果该属性不希望在类对象外部被访问，前边使用两个<code>_</code></li></ul></li><li><strong>继承</strong>: 提高代码的复用性</li><li><strong>多态</strong>: 提高代码的可扩展性和可维护性</li></ul><h4 id="（1）封装的实现">（1）封装的实现</h4><p>如果该属性不希望在类对象外部被访问，前边使用两个<code>_</code></p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># return self.name    # 报错：AttributeError: &#x27;Student&#x27; object has no attribute &#x27;name&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu.getName())    <span class="comment"># 输出为ggw</span></span><br><span class="line"><span class="comment"># print(stu.__name)   # 报错：AttributeError: &#x27;Student&#x27; object has no attribute &#x27;_ _name&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>扩展：就是要访问<code>__name</code>属性</strong></p><p>1、dir(实例名)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(stu))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_19-28-07.png" alt=""></p><p>2、找到属性并访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu._Student__name)<span class="comment"># 输出为 ggw</span></span><br></pre></td></tr></table></figure><p>所以可以访问，但是不要访问就好了</p><h4 id="（2）继承的实现">（2）继承的实现</h4><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类类名</span>(父类<span class="number">1</span>， 父类<span class="number">2.</span>..):</span><br><span class="line">    内容</span><br></pre></td></tr></table></figure><ul><li>如果一个类没有继承任何类，则默认继承<strong>object</strong></li><li>Python支持多继承</li><li>定义子类时，必须在其构造函数中调用父类的构造函数</li></ul><p>案例</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_19-52-14.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):   <span class="comment"># 继承了object</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__name, self.__age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, stu_number</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self.__stu_number = stu_number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getStuNumber</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__stu_number)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, school</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self.__school = school</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSchool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;114514&#x27;</span>)</span><br><span class="line">teacher = Teacher(<span class="string">&#x27;罗翔&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">student.info()          <span class="comment"># 输出为 张三 18</span></span><br><span class="line">student.getStuNumber()  <span class="comment"># 输出为 114514</span></span><br><span class="line">teacher.info()          <span class="comment"># 输出为 罗翔 38</span></span><br><span class="line">teacher.getSchool()     <span class="comment"># 输出为 xxx</span></span><br></pre></td></tr></table></figure><p><strong>使用 super() 函数来调用父类</strong></p><p>多继承以后再看吧。。。</p><p><strong>方法重写</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):  <span class="comment"># 继承了object</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getAge</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__name, self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, stu_number</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self.__stu_number = stu_number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().getName(), <span class="built_in">super</span>().getAge(), self.__stu_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, school</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self.__school = school</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().getName(), <span class="built_in">super</span>().getAge(), self.__school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;114514&#x27;</span>)</span><br><span class="line">teacher = Teacher(<span class="string">&#x27;罗翔&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">student.info()  <span class="comment"># 输出为 张三 18 114514</span></span><br><span class="line">teacher.info()  <span class="comment"># 输出为 罗翔 38 xxx</span></span><br></pre></td></tr></table></figure><h4 id="（3）多态的实现">（3）多态的实现</h4><blockquote><p>简单地说，多态就是“具有多种形态”，它指的是:即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法</p></blockquote><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;动物吃食物&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猫吃鱼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗吃骨头&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人吃粮食&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">Animal().eat()      <span class="comment"># 输出为 动物吃食物</span></span><br><span class="line">Cat().eat()         <span class="comment"># 输出为 猫吃鱼</span></span><br><span class="line">Dog().eat()         <span class="comment"># 输出为 狗吃骨头</span></span><br><span class="line">Person().eat()      <span class="comment"># 输出为 人吃粮食</span></span><br></pre></td></tr></table></figure><p><strong>静态语言与动态语言</strong></p><ul><li>静态语言(JAVA)和动态语言关于多态的区别静态语言实现多态的三个必要条件<ul><li>继承</li><li>方法重写</li><li>父类引用指向子类对象9</li></ul></li><li>动态语言的多态崇尚“鸭子类型”当看到一只鸟走起来像鸭子、游泳起来像鸭子收起来也像鸭子，那么这只鸟就可以被称为鸭子。在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的行为。</li></ul><h3 id="6、object类">6、object类</h3><ul><li>object类是所有类的父类，因此所有类都有object类的属性和方法</li><li><strong>内置函数 dir()</strong> 可以查看指定对象所属性</li><li>Object有一个 <strong>__str__()</strong> 方法，用于返回一个对于“对象的描述”，对应于内置函数str()经常用于print()方法，帮我们查看对象的信息，所以我们经常会对 <strong>__str__()</strong> 进行重写</li></ul><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stusent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;我的名字是<span class="subst">&#123;self.__name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu = Stusent(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(stu))</span><br><span class="line"><span class="built_in">print</span>(stu)<span class="comment"># 会默认调用__str__()</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;_Stusent__name&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>]</span><br><span class="line">我的名字是ggw</span><br></pre></td></tr></table></figure><h3 id="7、特殊的属性和方法">7、特殊的属性和方法</h3><table><thead><tr><th style="text-align:center">属性/方法</th><th style="text-align:center">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">特殊属性</td><td style="text-align:center"><code>__dict__</code></td><td style="text-align:left">获得类对象或实例对象所绑定的属性和方法的字典</td></tr><tr><td style="text-align:center">特殊方法</td><td style="text-align:center"><code>__len__()</code></td><td style="text-align:left">通过重写<code>__len__()</code>，让内置函数len()的参数可以是自定义类型</td></tr><tr><td style="text-align:center">特殊方法</td><td style="text-align:center"><code>__add__()</code></td><td style="text-align:left">通过重写<code>__add__()</code>，可是自定义对象具有”+“功能</td></tr><tr><td style="text-align:center">特殊方法</td><td style="text-align:center"><code>__new__()</code></td><td style="text-align:left">用于创建对象</td></tr><tr><td style="text-align:center">特殊方法</td><td style="text-align:center"><code>__init__()</code></td><td style="text-align:left">对创建的对象进行初始化</td></tr></tbody></table><p><strong>特殊属性</strong></p><ul><li><code>__dict__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = C(<span class="string">&#x27;xxx&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(instance.__dict__)</span><br><span class="line"><span class="built_in">print</span>(C.__dict__)</span><br><span class="line"><span class="built_in">print</span>(instance.__class__)   <span class="comment"># 输出对象所属的类</span></span><br><span class="line"><span class="built_in">print</span>(C.__bases__)          <span class="comment"># 输出的是父类</span></span><br><span class="line"><span class="built_in">print</span>(C.__mro__)            <span class="comment"># 类的层次结构</span></span><br><span class="line"><span class="built_in">print</span>(A.__subclasses__())   <span class="comment"># 输出子类列表</span></span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_C__name&#x27;: &#x27;xxx&#x27;, &#x27;_C__age&#x27;: 20&#125;</span><br><span class="line">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__init__&#x27;: &lt;function C.__init__ at 0x000001E0977ECAF0&gt;, &#x27;__doc__&#x27;: None&#125;</span><br><span class="line">&lt;class &#x27;__main__.C&#x27;&gt;</span><br><span class="line">(&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)</span><br><span class="line">(&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="line">[&lt;class &#x27;__main__.C&#x27;&gt;]</span><br></pre></td></tr></table></figure><p><strong>特殊方法</strong></p><ul><li><code>__add__()</code></li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">200</span></span><br><span class="line">c = a + b</span><br><span class="line">d = a.__add__(b)</span><br><span class="line"><span class="built_in">print</span>(c, d)     <span class="comment"># 输出为 300 300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name + other.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;ggw&#x27;</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;xpl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 + stu2)  <span class="comment"># 输出为 ggwxpl</span></span><br></pre></td></tr></table></figure><ul><li><code>__len__()</code></li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是长度&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(lst))         <span class="comment"># 输出为 4</span></span><br><span class="line"><span class="built_in">print</span>(lst.__len__())    <span class="comment"># 输出为 4</span></span><br><span class="line"><span class="built_in">print</span>(A().__len__())    <span class="comment"># 输出为 这是长度</span></span><br></pre></td></tr></table></figure><ul><li><code>__new__()</code>和<code>__init__()</code></li></ul><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;__new__()执行了, cls的值的id为<span class="subst">&#123;<span class="built_in">id</span>(cls)&#125;</span>&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;创建的对象id为<span class="subst">&#123;<span class="built_in">id</span>(obj)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;__init__()执行了, self的id为<span class="subst">&#123;<span class="built_in">id</span>(self)&#125;</span>&#x27;</span>)</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;object这个类对象的id为<span class="subst">&#123;<span class="built_in">id</span>(<span class="built_in">object</span>)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Person这个类对象的id为<span class="subst">&#123;<span class="built_in">id</span>(Person)&#125;</span>&#x27;</span>)</span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p1这个Person类的实例对象id为<span class="subst">&#123;<span class="built_in">id</span>(p1)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">object这个类对象的id为140718335637376</span><br><span class="line">Person这个类对象的id为2753193282256</span><br><span class="line">__new__()执行了, cls的值的id为2753193282256</span><br><span class="line">创建的对象id为2753194573392</span><br><span class="line">__init__()执行了, self的id为2753194573392</span><br><span class="line">p1这个Person类的实例对象id为2753194573392</span><br></pre></td></tr></table></figure><p>原理图</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_22-48-58.png" alt=""></p><h3 id="8、类的浅拷贝与深拷贝">8、类的浅拷贝与深拷贝</h3><ul><li><p><strong>变量的赋值操作</strong></p><p>只是形成两个变量，实际上指向同一个对象</p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = A()</span><br><span class="line">a2 = a1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a1))   <span class="comment"># 输出为 2143666190896</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a2))   <span class="comment"># 输出为 2143666190896</span></span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_23-04-31.png" alt=""></p></li><li><p><strong>浅拷贝</strong></p><p>python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝，因此，源对象和拷贝对象会引用同一对象</p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cumputer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cpu, disk</span>):</span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.disk = disk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpu = CPU()</span><br><span class="line">disk = Disk()</span><br><span class="line">computer1 = Cumputer(cpu, disk)</span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">computer2 = copy.copy(computer1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(computer1), <span class="built_in">id</span>(computer1.cpu), <span class="built_in">id</span>(computer1.disk))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(computer2), <span class="built_in">id</span>(computer2.cpu), <span class="built_in">id</span>(computer2.disk))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1819258797744 1819258798032 1819258797792</span><br><span class="line">1819258797552 1819258798032 1819258797792</span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-14_23-38-54.png" alt=""></p></li><li><p><strong>深拷贝</strong></p><p>使用copy模块的 <strong>deepcopy()</strong> 函数，递归拷贝对象中包含的子对象、源对象和拷贝对象所有的子对象各不相同</p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cumputer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cpu, disk</span>):</span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.disk = disk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpu = CPU()</span><br><span class="line">disk = Disk()</span><br><span class="line">computer1 = Cumputer(cpu, disk)</span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">computer2 = copy.deepcopy(computer1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(computer1), <span class="built_in">id</span>(computer1.cpu), <span class="built_in">id</span>(computer1.disk))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(computer2), <span class="built_in">id</span>(computer2.cpu), <span class="built_in">id</span>(computer2.disk))</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1859713646256 1859713646544 1859713646304</span><br><span class="line">1859713645920 1859713644480 1859713864400</span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_00-46-43.png" alt=""></p></li></ul><h2 id="九、模块、包">九、模块、包</h2><h3 id="1、什么是模块、模块化编程的好处">1、什么是模块、模块化编程的好处</h3><ul><li>模块英文为<strong>Modules</strong></li><li>函数与模块的关系<ul><li>一个模块中可以包含N多个函数（也可以N个类）</li></ul></li><li>在Python中一个扩展名为 <strong>.py</strong> 的文件就是一个模块</li><li>使用模块的好处<ul><li>方便其它程序和脚本的导入并使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性</li><li>提高代码的可重用性</li></ul></li></ul><h3 id="2、导入模块">2、导入模块</h3><ul><li><p>创建模块</p><ul><li>新建一个 .py 文件，名称尽量不要与Python自带的标准模块名称相同</li></ul></li><li><p>导入模块</p><ul><li><p>只能导入包名和模块名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名称 [<span class="keyword">as</span>别名]</span><br></pre></td></tr></table></figure></li><li><p>可以导入包、模块、函数、变量、类<br>可以减少查询时间，提高访问速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span> 函数/变量/类</span><br></pre></td></tr></table></figure></li><li><p>可以不用加模块名做前缀，简单但是一般不推荐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(math))     <span class="comment"># 输出为 2584154507360</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(math))   <span class="comment"># 输出为 &lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(math)         <span class="comment"># 输出为 &lt;module &#x27;math&#x27; (built-in)&gt;</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)      <span class="comment"># 输出为 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="built_in">print</span>(pi)           <span class="comment"># 输出为 3.141592653589793</span></span><br></pre></td></tr></table></figure><p><strong>导入自定义模块</strong></p><p>calc.py文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建时间：2023-01-15 1:03</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mult</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计算结果为:&#x27;</span>, a * b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;计算结果为:&#x27;</span>, a / b)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>导入使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc</span><br><span class="line">calc.mult(<span class="number">10</span>, <span class="number">20</span>)   <span class="comment"># 输出为 计算结果为: 200</span></span><br><span class="line">calc.div(<span class="number">1</span>, <span class="number">0</span>)      <span class="comment"># 输出为 除数不能为0</span></span><br></pre></td></tr></table></figure><p>文件命名不规范的这样导入(<a href="http://xn--8ov87j.py">没有.py</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyKnn = <span class="built_in">__import__</span>(<span class="string">&#x27;04-MyKnn&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3、以主程序方式运行">3、以主程序方式运行</h3><p>在每个模块的定义中都包括一个记录模块名称的变量<code>__name__</code>，程序可以检查该变量,以确定他们在哪个模块中执行。如果一个模块不是被导入到其它程序中执行，那么它可能在解释器的顶级模块中执行。顶级模块的<code>__name__</code>变量的值为<code>__main___</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 只有当点击本程序运行时，才执行运算 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>如果没有这么处理</p><p>calc.py内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建时间：2023-01-15 1:03</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mult</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计算结果为:&#x27;</span>, a * b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;计算结果为:&#x27;</span>, a / b)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是calc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc</span><br><span class="line">calc.mult(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">calc.div(<span class="number">100</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是calc</span><br><span class="line">计算结果为: 20000</span><br><span class="line">计算结果为: 10.0</span><br></pre></td></tr></table></figure><h3 id="4、包">4、包</h3><ul><li><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</p></li><li><p>作用:</p><ul><li>代码规范</li><li>避免模块名称冲突</li></ul></li><li><p>包与目录的区别</p><ul><li>包含<code>_init__.py</code>文件的目录称为包_，告诉python将该目录作为一个包来处理</li><li>目录里通常不包含<code>_init__.py</code>文件</li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_09-37-24.png" alt=""></p></li><li><p>包的导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br></pre></td></tr></table></figure><p>案例</p><p>文件结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├───helloworld.py</span><br><span class="line">├───directory</span><br><span class="line">└───package</span><br><span class="line">        calc.py</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package.calc</span><br><span class="line"></span><br><span class="line">package.calc.mult(<span class="number">100</span>, <span class="number">200</span>)     <span class="comment"># 输出为 计算结果为: 20000输出为 </span></span><br><span class="line">package.calc.div(<span class="number">100</span>, <span class="number">10</span>)       <span class="comment"># 输出为 计算结果为: 10.0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5、Python中常用的内置模块">5、Python中常用的内置模块</h3><table><thead><tr><th style="text-align:center">模块名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">sys</td><td>与Python解释器及其环境操作相关的标准库</td></tr><tr><td style="text-align:center">time</td><td>提供与时间相关的各种函数的标准库</td></tr><tr><td style="text-align:center">os</td><td>提供了访问操作系统服务功能的标准库</td></tr><tr><td style="text-align:center">calendar</td><td>提供与日期相关的各种函数的标准库</td></tr><tr><td style="text-align:center">urllib</td><td>用于读取来自网上（服务器）的数据标准库</td></tr><tr><td style="text-align:center">json</td><td>用于使用JSON序列化和反序列化对象</td></tr><tr><td style="text-align:center">re</td><td>用于在字符串中执行正则表达式匹配和替换</td></tr><tr><td style="text-align:center">math</td><td>提供标准算术运算函数的标准库</td></tr><tr><td style="text-align:center">decimal</td><td>用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算</td></tr><tr><td style="text-align:center">logging</td><td>提供了灵活的记录事件、错误、警告和调试信息等目志信息的功能</td></tr></tbody></table><h3 id="6、第三方模块的安装及使用">6、第三方模块的安装及使用</h3><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 模块名</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/22.png" style="zoom: 50%;" /> <p>未报错，安装成功</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/23.png" style="zoom:50%;" /> </li><li><p>使用</p><p><code>import 模块名</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>模块无法生效</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_10-13-56.png" alt=""></p><h4 id="Pycharm无法解析"><strong>Pycharm无法解析</strong></h4><p>解决：配置Python Interpreter（Python解释器）</p><p>文件 -&gt; 设置 -&gt; 项目xxx -&gt; Python解释器:</p><p>​<img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/24.png" style="zoom:50%;" /></p><h3 id="7、搜索路径">7、搜索路径</h3><p>Python模块的导入需要路径搜索的过程</p><p>搜索路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>不在同一目录下，需要将包、模块所在的路径添加进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;C:\\Users\\GGW_2021\\Desktop\\笔记\\python&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="十、文件读写">十、文件读写</h2><h3 id="1、文件读写原理">1、文件读写原理</h3><ul><li><p>文件读写俗称&quot;IO操作&quot;</p></li><li><p>文件读写流程</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_10-31-54.png" alt=""></p></li></ul><h3 id="2、文件的读写操作">2、文件的读写操作</h3><ul><li><p>使用内置函数 <strong>open()</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_10-37-29.png" alt=""></p><p>语法格式</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_10-37-58.png" alt=""></p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file.readlines())<span class="comment"># 输出为 我是一个文件</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、常用的文件打开模式">3、常用的文件打开模式</h3><ul><li>文件的类型（按文件的组织形式，文件分为以下两大类）<ul><li><strong>文本文件</strong>： 存储的是普通&quot;字符&quot;文本，默认为unicode字符集，可以使用记事本程序打开</li><li><strong>二进制文件</strong>：把数据内容用&quot;字节&quot;进行存储，无法用记事本打开，必须使用专用的软件打开，举例，mp3音频文件</li></ul></li></ul><table><thead><tr><th style="text-align:center">打开方式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td>以只读的模式打开文件，文件指针将会放在文件的开头</td></tr><tr><td style="text-align:center">w</td><td>以只写的模式打开文件，如果文件不存在则创建，如果文件存在，则覆盖原有内容，文件指针在文件的开头</td></tr><tr><td style="text-align:center">a</td><td>以追加的模式打开文件，如果文件不存在则创建，文件指针在文件开头；如果文件存在，则在文件末尾追加内容，文件指在原文件的末尾</td></tr><tr><td style="text-align:center">b</td><td>以二进制的方式打开文件，不能单独使用，需要与其他模式一起使用，例如：rb、wb</td></tr><tr><td style="text-align:center">+</td><td>与读写的方式打开文件，不能单独使用，需要与其他模式一起使用，例如：a+</td></tr></tbody></table><h3 id="4、文件对象常用的方法">4、文件对象常用的方法</h3><table><thead><tr><th style="text-align:center">方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">read([size])</td><td>从文件中读取size个字节或字符的内容符号，若省略size，则从文件头读取到文件尾，即一次读取文件所有内容</td></tr><tr><td style="text-align:center">readline()</td><td>从文本文件中读取一行内容</td></tr><tr><td style="text-align:center">readlines()</td><td>把文本文件中的每一行作为一个字符串对象，并将这些对象放入列表返回</td></tr><tr><td style="text-align:center">write(str)</td><td>将字符串str内容写入文件</td></tr><tr><td style="text-align:center">writelines(s_list)</td><td>将字符串列表s_list写入文本文件，不添加换行符</td></tr><tr><td style="text-align:center">seek(offset<br>[,whence])</td><td>把文件指针移动到新的位置，offset表示相对于whence的位置（单位是字节）：<br>offset：为正，向结束方向移动；为负，向开始方向移动<br>whence：不同的值代表不同的含义：<br> 0：从文件头开始计算（默认值）<br> 1：从当前位置开始计算<br> 2：从文件尾开始计算</td></tr><tr><td style="text-align:center">tell()</td><td>返回文件指针当前位置</td></tr><tr><td style="text-align:center">flush()</td><td>把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td style="text-align:center">close()</td><td>把缓冲区的内容写入文件，同时关闭文件，释放文件对象相关资源</td></tr></tbody></table><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># print(file.read())      # 全部读取</span></span><br><span class="line"><span class="comment"># print(file.read(2))     # 读取两个字符</span></span><br><span class="line"><span class="comment"># print(file.readline())  # 读取一行</span></span><br><span class="line"><span class="comment"># print(file.readlines()) # 读取多行，放回列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file.write(&#x27;哈哈哈哈&#x27;)      # 写入</span></span><br><span class="line"><span class="comment"># lst = [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span></span><br><span class="line"><span class="comment"># file.writelines(lst)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file.seek(2)</span></span><br><span class="line"><span class="comment"># print(file.tell())</span></span><br><span class="line"><span class="comment"># print(file.read())</span></span><br><span class="line"><span class="comment"># print(file.tell())</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h3 id="5、with语句（上下文管理器）">5、with语句（上下文管理器）</h3><blockquote><p>with语句可以自动的管理上下文资源，无论什么原因跳出with块，都能保证文件的正确关闭以此来达到释放资源的目的</p></blockquote><p>语法</p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/python/python-note/Snipaste_2023-01-15_13-34-04.png" alt=""></p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="built_in">print</span>(file.read())</span><br></pre></td></tr></table></figure><p>上下文管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">MyContentMgr实现了特俗方法__enter__(), __exit__()</span></span><br><span class="line"><span class="string">所以称该类的实例对象遵守了上下文管理器协议</span></span><br><span class="line"><span class="string">该类的实例对象为上下文管理器</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyContentMgr</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__enter__()执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__exit__()执行了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;show()执行了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyContentMgr() <span class="keyword">as</span> file:</span><br><span class="line">    file.show()</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出为:</span></span><br><span class="line"><span class="string">__enter__()执行了</span></span><br><span class="line"><span class="string">show()执行了</span></span><br><span class="line"><span class="string">__exit__()执行了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6、os模块">6、os模块</h3><ul><li>os模块是Python内置的与操作系统功能和文件系统相关的模块，该模块中的语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样。</li><li>os模块与os.path模块用于对目录或文件进行操作</li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># os.system(&#x27;notepad.exe&#x27;)    # 打开记事本</span></span><br><span class="line"><span class="comment"># os.system(&#x27;calc.exe&#x27;)       # 打开计算器</span></span><br><span class="line"><span class="comment"># 打开可执行文件</span></span><br><span class="line">os.startfile(<span class="string">&#x27;D:\\Tencent Files\\Bin\\QQ.exe&#x27;</span>)   <span class="comment"># 打开QQ</span></span><br></pre></td></tr></table></figure><p><strong>os模块操作目录的相关函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>getcwd()</td><td>返回当前工作目录</td></tr><tr><td>listdir(path)</td><td>返回指定路径下的文件和目录</td></tr><tr><td>mkdir(path[, mode])</td><td>创建目录</td></tr><tr><td>makedirs(path1/path2…[, mode])</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录</td></tr><tr><td>removedirs(path1/path2…)</td><td>删除多级目录</td></tr><tr><td>chdir(path)</td><td>将path设置为当前工作目录</td></tr><tr><td>walk(path)</td><td>返回指定路径下的文件和目录，以及子目录下的文件和目录<br>（8、案例中有专门的例子）</td></tr></tbody></table><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># print(os.getcwd())  # 输出为 D:\python\project\demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.listdir(&#x27;./&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.mkdir(&#x27;./目录1&#x27;)   # 创建了目录1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.makedirs(&#x27;./1/2&#x27;)    # 创建了多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;./目录1&#x27;)     # 删除了目录1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.removedirs(&#x27;./1/2&#x27;)  # 删除了多级目录</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;D:\\&#x27;</span>)    <span class="comment"># 修改了当前工作目录</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())  <span class="comment"># 输出为 D:\</span></span><br></pre></td></tr></table></figure><h3 id="7、os-path模块">7、os.path模块</h3><p>相关函数</p><table><thead><tr><th style="text-align:left">函数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">abspath(path)</td><td>用于获取文件或目录的绝对路径</td></tr><tr><td style="text-align:left">exists(path)</td><td>用于判断文件或目录是否存在，如果存在，返回True，否则返回False</td></tr><tr><td style="text-align:left">join(path, name)</td><td>将目录与目录或者文件名拼接起来</td></tr><tr><td style="text-align:left">split(path)</td><td></td></tr><tr><td style="text-align:left">splitext(path)</td><td>分离文件名和拓展名</td></tr><tr><td style="text-align:left">basename(path)</td><td>从一个目录中提取文件名</td></tr><tr><td style="text-align:left">dirname(path)</td><td>从一个路径中提取文件路径，不包括文件名</td></tr><tr><td style="text-align:left">isdir(path)</td><td>用于判断是否是路径</td></tr></tbody></table><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;data.txt&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;data.txt&#x27;</span>), os.path.exists(<span class="string">&#x27;xxx.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;D:\\python\\project\\demo&#x27;</span>, <span class="string">&#x27;helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.split(<span class="string">&#x27;D:\\python\\project\\demo\\helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.splitext(<span class="string">&#x27;helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.splitext(<span class="string">&#x27;D:\\python\\project\\demo\\helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.basename(<span class="string">&#x27;D:\\python\\project\\demo\\helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(<span class="string">&#x27;D:\\python\\project\\demo\\helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">&#x27;D:\\python\\project\\demo\\helloworld.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">&#x27;D:\\python\\project\\demo&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------</span><br><span class="line">D:\python\project\demo\data.txt</span><br><span class="line">------------------------------------------</span><br><span class="line">True False</span><br><span class="line">------------------------------------------</span><br><span class="line">D:\python\project\demo\helloworld.py</span><br><span class="line">------------------------------------------</span><br><span class="line">(&#x27;D:\\python\\project\\demo&#x27;, &#x27;helloworld.py&#x27;)</span><br><span class="line">------------------------------------------</span><br><span class="line">(&#x27;helloworld&#x27;, &#x27;.py&#x27;)</span><br><span class="line">(&#x27;D:\\python\\project\\demo\\helloworld&#x27;, &#x27;.py&#x27;)</span><br><span class="line">------------------------------------------</span><br><span class="line">helloworld.py</span><br><span class="line">------------------------------------------</span><br><span class="line">D:\python\project\demo</span><br><span class="line">------------------------------------------</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="8、案例">8、案例</h3><p>列出指定目录下的所有.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.getcwd()</span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="comment"># endwith 是不是以什么结尾</span></span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.py&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure><p>walk()的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.getcwd()</span><br><span class="line">lst = os.walk(path)</span><br><span class="line"><span class="keyword">for</span> dirpath, dirname, filename <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(dirpath, <span class="string">&#x27;||&#x27;</span>, dirname, <span class="string">&#x27;||&#x27;</span>, filename)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dirname:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(dirpath, key))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(dirpath, key))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;========================================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;========================================&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">D:\python\project\demo || [&#x27;.idea&#x27;, &#x27;directory&#x27;, &#x27;package&#x27;, &#x27;__pycache__&#x27;] || [&#x27;data.txt&#x27;, &#x27;helloworld.py&#x27;]</span><br><span class="line">D:\python\project\demo\.idea</span><br><span class="line">D:\python\project\demo\directory</span><br><span class="line">D:\python\project\demo\package</span><br><span class="line">D:\python\project\demo\__pycache__</span><br><span class="line">-------------</span><br><span class="line">D:\python\project\demo\data.txt</span><br><span class="line">D:\python\project\demo\helloworld.py</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\.idea || [&#x27;inspectionProfiles&#x27;] || [&#x27;.gitignore&#x27;, &#x27;demo.iml&#x27;, &#x27;encodings.xml&#x27;, &#x27;misc.xml&#x27;, &#x27;modules.xml&#x27;, &#x27;workspace.xml&#x27;]</span><br><span class="line">D:\python\project\demo\.idea\inspectionProfiles</span><br><span class="line">-------------</span><br><span class="line">D:\python\project\demo\.idea\.gitignore</span><br><span class="line">D:\python\project\demo\.idea\demo.iml</span><br><span class="line">D:\python\project\demo\.idea\encodings.xml</span><br><span class="line">D:\python\project\demo\.idea\misc.xml</span><br><span class="line">D:\python\project\demo\.idea\modules.xml</span><br><span class="line">D:\python\project\demo\.idea\workspace.xml</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\.idea\inspectionProfiles || [] || [&#x27;profiles_settings.xml&#x27;, &#x27;Project_Default.xml&#x27;]</span><br><span class="line">-------------</span><br><span class="line">D:\python\project\demo\.idea\inspectionProfiles\profiles_settings.xml</span><br><span class="line">D:\python\project\demo\.idea\inspectionProfiles\Project_Default.xml</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\directory || [] || []</span><br><span class="line">-------------</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\package || [&#x27;__pycache__&#x27;] || [&#x27;calc.py&#x27;, &#x27;__init__.py&#x27;]</span><br><span class="line">D:\python\project\demo\package\__pycache__</span><br><span class="line">-------------</span><br><span class="line">D:\python\project\demo\package\calc.py</span><br><span class="line">D:\python\project\demo\package\__init__.py</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\package\__pycache__ || [] || [&#x27;calc.cpython-310.pyc&#x27;, &#x27;__init__.cpython-310.pyc&#x27;]</span><br><span class="line">-------------</span><br><span class="line">D:\python\project\demo\package\__pycache__\calc.cpython-310.pyc</span><br><span class="line">D:\python\project\demo\package\__pycache__\__init__.cpython-310.pyc</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br><span class="line">D:\python\project\demo\__pycache__ || [] || []</span><br><span class="line">-------------</span><br><span class="line">========================================</span><br><span class="line">========================================</span><br></pre></td></tr></table></figure><h2 id="十一、实操案例">十一、实操案例</h2><h3 id="1、向文件输出内容">1、向文件输出内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 方法一 &#x27;&#x27;&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\GGW_2021\\Desktop\\笔记\\python\\text.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>, file=file)</span><br><span class="line">file.close()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 方法二 &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\GGW_2021\\Desktop\\笔记\\python\\text.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;hello world!!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、模拟高铁售票系统">2、模拟高铁售票系统</h3><p>安装模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install prettytable</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> prettytable <span class="keyword">as</span> pt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showTable</span>(<span class="params">rowNum</span>):</span><br><span class="line">    table = pt.PrettyTable()  <span class="comment"># 创建对象</span></span><br><span class="line">    table.field_names = [<span class="string">&#x27;行号&#x27;</span>, <span class="string">&#x27;座位1&#x27;</span>, <span class="string">&#x27;座位2&#x27;</span>, <span class="string">&#x27;座位3&#x27;</span>, <span class="string">&#x27;座位4&#x27;</span>, <span class="string">&#x27;座位5&#x27;</span>]  <span class="comment"># 设定表头</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rowNum):</span><br><span class="line">        lst = [<span class="string">f&#x27;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>行&#x27;</span>, <span class="string">&#x27;有票&#x27;</span>, <span class="string">&#x27;有票&#x27;</span>, <span class="string">&#x27;有票&#x27;</span>, <span class="string">&#x27;有票&#x27;</span>, <span class="string">&#x27;有票&#x27;</span>]</span><br><span class="line">        table.add_row(lst)</span><br><span class="line">    <span class="built_in">print</span>(table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    showTable(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-------+-------+-------+-------+</span><br><span class="line">|  行号 | 座位1 | 座位2 | 座位3 | 座位4 | 座位5 |</span><br><span class="line">+-------+-------+-------+-------+-------+-------+</span><br><span class="line">| 第1行 |  有票 |  有票 |  有票 |  有票 |  有票 |</span><br><span class="line">| 第2行 |  有票 |  有票 |  有票 |  有票 |  有票 |</span><br><span class="line">| 第3行 |  有票 |  有票 |  有票 |  有票 |  有票 |</span><br><span class="line">+-------+-------+-------+-------+-------+-------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java SE</title>
      <link href="/2023/01/05/Java%20SE/"/>
      <url>/2023/01/05/Java%20SE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备">一、准备</h2><p><strong>1、环境搭建、JDK</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/2.png" alt=""></p><ul><li><p>查看版本</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac –version</span><br><span class="line">或者</span><br><span class="line">java –version </span><br></pre></td></tr></table></figure></li></ul><p><strong>2、Java程序</strong></p><blockquote><p>开发 Java 程序，需要三个步骤：编写代码，编译代码，运行代码</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/1.png" alt=""></p><ul><li>编译代码、运行代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p>jdk11开始，可以直接运行</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p><strong>3、IDEA使用</strong></p><ul><li><p>项目结构</p><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul></li><li><p>IDEA <strong>常用快捷键</strong></p></li></ul><table><thead><tr><th><strong>快捷键</strong></th><th><strong>功能效果</strong></th></tr></thead><tbody><tr><td>main/psvm、sout、…</td><td>快速键入相关代码</td></tr><tr><td>Ctrl + D</td><td>复制当前行数据到下一行</td></tr><tr><td>Ctrl + Y</td><td>删除所在行，建议用Ctrl + X</td></tr><tr><td>Ctrl + ALT + L</td><td>格式化代码</td></tr><tr><td>ALT + SHIFT + ↑ , ALT + SHIFT + ↓</td><td>上下移动当前代码</td></tr><tr><td>Ctrl + / ,  Ctrl + Shift  + /</td><td>单行注释，多行注释</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/10.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/11.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/12.png" alt=""></p><h6 id=""></h6><hr><h2 id="二、基础语法">二、基础语法</h2><h3 id="1、注释">1、注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   多行注释</span></span><br><span class="line"><span class="comment">   注释内容1</span></span><br><span class="line"><span class="comment">   注释内容2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">   文档注释：文档注释的内容是可以提取到一个程序说明文档中去的</span></span><br><span class="line"><span class="comment">   注释内容</span></span><br><span class="line"><span class="comment">   注释内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2、字面量">2、字面量</h3><blockquote><p>计算机是用来处理数据的，字面量就是<strong>告诉程序员</strong>：数据在程序中的<strong>书写格式</strong></p></blockquote><table><thead><tr><th><strong>常用数据</strong></th><th><strong>生活中的写法</strong></th><th><strong>程序中的写法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>整数</td><td>666，-88</td><td>666，-88</td><td>写法一致</td></tr><tr><td>小数</td><td>13.14，-5.21</td><td>13.14，-5.21</td><td>写法一致</td></tr><tr><td>字符</td><td>A, 0, 我</td><td>‘A’，‘0’，   ‘我’</td><td>程序中必须使用单引号，有且仅能一个字符</td></tr><tr><td>字符串</td><td>黑马程序员</td><td>“HelloWorld”，“黑马程序员”</td><td>程序中必须使用双引号，内容可有可无</td></tr><tr><td>布尔值</td><td>真、假</td><td>true 、false</td><td>只有两个值：true：代表真，false：代表假</td></tr><tr><td>空值</td><td></td><td>值是：null</td><td>一个特殊的值，空值(后面会讲解作用，暂时不管)</td></tr></tbody></table><h3 id="3、变量">3、变量</h3><blockquote><p>变量就是内存中的一块区域，用来存储一个数据的，且存储的数据可以被替换</p></blockquote><ol><li><p>变量是什么，有什么作用？</p><ul><li><p><strong>内存中的一块区域。</strong></p></li><li><p><strong>用来存储一个数据的，且存储的数据可以被替换。</strong></p></li></ul></li><li><p>变量的格式</p><ul><li><strong>数据类型 变量名称</strong> <strong>=</strong> <strong>初始值；</strong></li></ul></li><li><p>变量的基本特点</p><ul><li><p><strong>变量中只能存一个值</strong></p></li><li><p><strong>变量中存的值是可以替换的</strong></p></li></ul></li></ol><h3 id="4、关键字">4、关键字</h3><ul><li>Java语言自己用到的一些词，有特殊作用的，我们称之为关键字。</li></ul><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h3 id="5、标识符">5、标识符</h3><blockquote><p>标志符就是名字。我们写程序时会起一些名字，如<strong>类名、方法名、变量名</strong>，取名时要遵守一定的规则。</p></blockquote><ul><li><p>标识符的要求</p><ul><li>基本要求：由数字、字母、下划线(<strong>_</strong>)和美元符(<strong>$</strong>)等组成</li><li>强制要求：<strong>不能以数字开头</strong>、不能是关键字、区分大小写</li></ul></li><li><p>命名指导规范</p><ul><li><p>变量名称：满足标识符规则，建议全英文、有意义、<strong>首字母小写</strong>，满足“驼峰模式”，</p><p>例如：int studyNumber = 59。</p></li><li><p>类名称： 满足标识符规则，建议全英文、有意义、<strong>首字母大写</strong>，满足“驼峰模式”，</p><p>例如：HelloWorld.java。</p></li></ul></li></ul><h3 id="6、数据类型">6、数据类型</h3><ul><li>引用数据类型（除基本数据类型之外的，如String ，其他的后面学习）</li><li>基本数据类型：<strong>4大类8种</strong></li></ul><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">关键字</th><th>取值范围</th><th style="text-align:center">内存占用（字节数）</th></tr></thead><tbody><tr><td style="text-align:center"><strong>整数</strong></td><td style="text-align:center">byte</td><td>-128~127</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">short</td><td>-32768~32767</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"><strong>int(默认)</strong></td><td>-2147483648~2147483647 <strong>(10位数)</strong></td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">long</td><td>-9223372036854775808 ~  9223372036854775807 <strong>(19位数)</strong></td><td style="text-align:center">8</td></tr><tr><td style="text-align:center"><strong>浮点数</strong></td><td style="text-align:center">float</td><td>1.401298e-45到3.402823e+38</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"><strong>double（默认）</strong></td><td>4.9000000e-324 到1.797693e+308</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center"><strong>字符</strong></td><td style="text-align:center">char</td><td>0-65535</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center"><strong>布尔</strong></td><td style="text-align:center">boolean</td><td>true，false</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>随便写的整数、小数字面值默认什么类型？</li></ul><p>23 ，默认是int类型 <strong>,</strong> <strong>加上L/l</strong>就是<strong>long</strong>类型的数据了。</p><p>23.8，默认是double类型，<strong>加上F/f</strong>就是<strong>float</strong>类型了。</p><h3 id="7、类型转换">7、类型转换</h3><ul><li><p><strong>自动类型转换</strong></p><blockquote><p><strong>类型范围小</strong>的变量，可以<strong>直接赋值</strong>给<strong>类型范围大</strong>的变量。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/3.png" alt=""></p><p><strong>注意事项：</strong></p><ul><li><p>表达式的<strong>最终结果类型由表达式中的最高类型决定</strong>。</p></li><li><p>在表达式中，<strong>byte、short、char 是直接转换成int类型参与运算</strong>的。</p></li></ul></li><li><p><strong>强制类型转换</strong></p><blockquote><p>可以<strong>强行</strong>将<strong>类型范围大</strong>的变量、数据<strong>赋值</strong>给<strong>类型范围小</strong>的变量。</p></blockquote><ul><li><p><strong>数据类型 变量2 = (数据类型)变量1、数据</strong></p></li><li><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/4.png" alt=""></p></li><li><p><strong>注意事项</strong></p><ul><li><p>强制类型转换<strong>可能</strong>造成数据(丢失)溢出；</p></li><li><p>浮点型强转成整型，直接丢掉小数部分，保留整数部分返回。</p></li></ul></li></ul></li></ul><h3 id="8、运算符">8、运算符</h3><blockquote><p>运算符：对字面量或者变量进行操作的<strong>符号。</strong></p></blockquote><p><strong>（1）算数运算符</strong></p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">作用</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td>参考小学一年级</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td>参考小学一年级</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td>参考小学二年级，与“×”相同</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td>与“÷”相同，注意：在Java中两个整数相除结果还是整数。</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td>获取的是两个数据做除法的余数</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">自增</td><td>变量自身的值加1</td></tr><tr><td style="text-align:center">–</td><td style="text-align:center">自减</td><td>变量自身的值减1</td></tr></tbody></table><p><em><em>“+”<strong>做</strong></em>连接符</em>**</p><blockquote><p>“+”符号<strong>与字符串运算</strong>的时候是用作连接符的，其结果<strong>依然是一个字符串</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span> ;</span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        abca</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + a);<span class="comment">//        abc5</span></span><br><span class="line">System.out.println(<span class="number">5</span> + a);<span class="comment">//        10</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        abc5a</span></span><br><span class="line">System.out.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//        15abc15</span></span><br><span class="line">System.out.println(a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        102</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//        5a</span></span><br><span class="line">System.out.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot;itheima&quot;</span>);<span class="comment">//        102itheima</span></span><br><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//        itheima5a</span></span><br><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//        itheima102</span></span><br></pre></td></tr></table></figure><p><strong>（2）赋值运算符</strong></p><ul><li><p>基本赋值运算符</p><p>int a = 10; // 先看“=”右边，把数据10赋值给左边的变量a存储</p></li><li><p>扩展赋值运算符</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">作用</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td style="text-align:center">加后赋值</td><td>a+=b 等价于 a = (a的数据类型)(a+b); 将a + b的值给a</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减后赋值</td><td>a-=b 等价于 a =  (a的数据类型)(a-b); 将a - b的值给a</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘后赋值</td><td>a*=b 等价于 a =  (a的数据类型)(a*b); 将a *****  b的值给a</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除后赋值</td><td>a/=b 等价于 a =  (a的数据类型)(a/b); 将a <strong>/</strong> b的商给a</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">取余后赋值</td><td>a%=b 等价于 a =  (a的数据类型)(a%b); 将a <strong>%</strong> b的商给a</td></tr></tbody></table><p><strong>注意：扩展的赋值运算符隐含了强制类型转换。</strong></p></li></ul><p><strong>（3）关系运算符</strong></p><blockquote><p>是对数据进行条件判断的符号，最终会返回一个比较的布尔结果（false,true）</p></blockquote><table><thead><tr><th style="text-align:center">符号</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td style="text-align:center">!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td style="text-align:center">&gt;</td><td>a&gt;b，   判断a是否大于b，成立为true，不成立为false</td></tr><tr><td style="text-align:center">&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td style="text-align:center">&lt;</td><td>a&lt;b，   判断a是否小于b，成立为true，不成立为false</td></tr><tr><td style="text-align:center">&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p><strong>（4）逻辑运算符</strong></p><blockquote><p>可以把多个条件的布尔结果放在一起运算，最终返回一个布尔结果。</p></blockquote><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">介绍</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">逻辑与</td><td>必须都是true，结果才是true; 只要有一个是false，结果一定是false。</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">逻辑或</td><td>只要有一个为true、结果就是true</td></tr><tr><td style="text-align:center">！</td><td style="text-align:center">逻辑非</td><td>你真我假、你假我真。  !true=false 、 !false=  true</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">逻辑异或</td><td>如果两个条件都是false或者都是true则结果是false。两个条件不同结果是true。</td></tr></tbody></table><p><strong>短路逻辑运算符</strong></p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">介绍</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">短路与</td><td>判断结果与“&amp;”一样。过程是<strong>左边为  false</strong>，<strong>右边则不执行</strong>。</td></tr><tr><td style="text-align:center">||</td><td style="text-align:center">短路或</td><td>判断结果与“|”一样。过程是<strong>左边为 true</strong>， <strong>右边则不执行</strong>。</td></tr></tbody></table><p><strong>注意：逻辑与 “&amp;”</strong> 、<strong>逻辑或“|”</strong>；无论左边是 <strong>false</strong>还是<strong>true</strong>，<strong>右边都要执行。</strong></p><p><strong>（5）三元运算符</strong></p><p><code>条件表达式 **?** 值1 **:** 值2;</code></p><blockquote><p>执行流程：首先计算<strong>关系表达式的值，<strong>如果值为</strong>true</strong>，返回<strong>值1</strong>，如果为<strong>false</strong>，返回<strong>值2</strong>。</p></blockquote><p><strong>（6）运算符优先级</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>);  <span class="comment">// true</span></span><br><span class="line">System.out.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/5.png" alt=""></p><hr><h6 id="-2"></h6><h2 id="三、流程控制">三、流程控制</h2><h3 id="1、分支结构">1、分支结构</h3><p><strong>（1）if 分支</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">格式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式<span class="number">3</span>：</span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    语句体<span class="number">3</span>;</span><br><span class="line">&#125; </span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）switch 分支</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    … </span><br><span class="line">        <span class="keyword">case</span> 值n-<span class="number">1</span>:</span><br><span class="line">        执行代码...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        执行代码n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p><strong>表达式类型</strong>只能是byte、short、int、char，JDK5开始支持枚举，JDK7开始支持String、不支持double、float、long。</p></li><li><p>case给出的值<strong>不允许重复</strong>，且只能是字面量，不能是变量。</p></li><li><p>不要忘记写break，否则会出现穿透现象。</p></li></ul><h3 id="2、循环结构">2、循环结构</h3><p><strong>（1）for 循环</strong></p><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 循环条件; 迭代语句)  &#123;</span><br><span class="line">    循环体语句(重复执行的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）while 循环</strong></p><ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    循环体语句(被重复执行的代码);</span><br><span class="line">    迭代语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）do-while 循环</strong></p><ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    迭代语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(“Hello World！<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    i++;</span></span><br><span class="line"><span class="string">&#125; while( i &lt; 3);</span></span><br></pre></td></tr></table></figure><p><strong>（4）死循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经典做法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="3、跳转控制语句">3、跳转控制语句</h3><ul><li><strong>break  :</strong> 跳出并结束当前所在循环的执行。</li><li><strong>continue:</strong> 用于跳出当前循环的当次执行，进入下一次循环。</li></ul><p><strong>注意事项</strong></p><p>break : 只能用于结束所在循环, 或者结束所在switch分支的执行。</p><p>continue : 只能在循环中进行使用。</p><hr><h6 id="-3"></h6><h2 id="四、数组">四、数组</h2><h3 id="1、数组的定义">1、数组的定义</h3><p><strong>（1）静态初始化</strong></p><blockquote><p>定义数组的时候<strong>直接给数组赋值</strong>。</p></blockquote><ul><li><p><strong>完整格式</strong></p><p><code>数据类型[]  数组名 = new 数据类型[]&#123;元素1，元素2 ，元素3… &#125;;</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>[] scores = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">89.9</span>, <span class="number">99.5</span>, <span class="number">59.5</span>, <span class="number">88.0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] ages = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>简化格式</strong></p><p><code>数据类型[] 数组名 = &#123; 元素1，元素2 ，元素3，… &#125;;</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>数组变量名中<strong>存储的是数组在内存中的地址</strong>，<strong>数组是引用类型</strong>。</li><li>数组<strong>一旦定义</strong>出来，程序执行的过程中，<strong>长度、类型就固定了</strong>。</li></ul><p><strong>原理：</strong></p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/6.png" style="zoom:50%;" /> <p><strong>（2）动态初始化</strong></p><blockquote><p>定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据。</p></blockquote><ul><li><p><strong>格式</strong></p><p><code>数据类型[] 数组名 = new 数据类型[长度];</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 后赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li><strong>默认值</strong></li></ul><table><thead><tr><th style="text-align:center">数据类型</th><th>明细</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:center">基本类型</td><td>byte、short、char、int、long</td><td>0</td></tr><tr><td style="text-align:center">…</td><td>float、double</td><td>0.0</td></tr><tr><td style="text-align:center">…</td><td>boolean</td><td>false</td></tr><tr><td style="text-align:center">引用类型</td><td>类、接口、数组、String</td><td>null</td></tr></tbody></table><p>**（3）**两种格式的写法是独立的，<strong>不可以混用。</strong></p><p><code>int[] arrs = new int[3]&#123;30，40,50&#125;;</code> 是<strong>错误</strong>的</p><h3 id="2、数组的访问">2、数组的访问</h3><p><code>数组名称[索引]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;;</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li><strong>数组的长度属性：length</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组的长度（就是数组元素的个数）</span></span><br><span class="line">System.out.println(arr.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>表示数组的<strong>最大索引</strong>：<code>数组名.length - 1//前提：元素个数大于0</code></p><ul><li><strong>遍历</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    System.out.println(ages[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、数组内存">3、数组内存</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/7.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/8.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/9.png" alt=""></p><h3 id="4、常见问题">4、常见问题</h3><ul><li><p>问题1：如果访问的元素位置<strong>超过最大索引</strong>，执行时会出现 <strong>ArrayIndexOutOfBoundsException</strong> (数组索引越界异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// System.out.println(arr[3])  // 出现异常 </span></span><br></pre></td></tr></table></figure></li><li><p>问题2：如果数组变量中没有存储数组的地址，而是null, 在访问数组信息时会出现 <strong>NullPointerException</strong> (空指针异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr); <span class="comment">// null</span></span><br><span class="line">System.out.println(arr.length)  <span class="comment">// 出现异常 </span></span><br></pre></td></tr></table></figure></li></ul><hr><h6 id="-4"></h6><h2 id="五、方法">五、方法</h2><h3 id="1、方法的定义与调用">1、方法的定义与调用</h3><p><strong>（1）定义</strong></p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (形参列表) &#123;</span><br><span class="line">    方法体代码(需要执行的功能代码)</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法不需要返回结果，则申明返回值类型为<strong>void</strong>；方法不需要参数，则形参列表可以不写。</p><p><code>return; </code> 可以<strong>立即跳出并结束</strong>当前方法的执行。</p><p><strong>（2）调用</strong></p><p><strong>格式</strong></p><p><code>方法名(…);</code></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h3 id="2、方法调用的内存图">2、方法调用的内存图</h3><blockquote><p>方法是放在<strong>方法区</strong>中的，被调用的时候，需要进入到<strong>栈内存</strong>中运行</p></blockquote><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/13.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/14.png" alt=""></p><h3 id="3、方法的参数传递机制">3、方法的参数传递机制</h3><blockquote><p>在传输实参给方法的形参的时候，并不是传输实参变量本身， 而是传输实参变量中存储的值，这就是<em><strong>值传递</strong></em>。</p></blockquote><ul><li>基本类型和引用类型的参数在传递的时候有什么不同？<ul><li><strong>都是值传递。</strong></li><li>基本类型的参数传输存储的<strong>数据值</strong>。</li><li>引用类型的参数传输存储的<strong>地址值</strong>。</li></ul></li></ul><h3 id="4、方法的重载">4、方法的重载</h3><blockquote><p>同一个类中，出现<strong><em>多个方法名称</em>相同</strong>，但是<strong><em>形参列表</em>是不同的</strong>，那么这些方法就是重载方法。</p></blockquote><p><strong>方法重载的判定</strong></p><ul><li><p>只要是同一个类中，<strong>方法名称相同、形参列表不同</strong>，那么他们就是重载的方法，<strong>其他都不管！</strong>（如：修饰符，返回值类型都无所谓）</p></li><li><p>形参列表不同指的是：<strong>形参的个数、类型、顺序不同</strong>，不关心形参的名称。</p></li></ul><hr><h6 id="-5"></h6><h2 id="六、面向对象">六、面向对象</h2><blockquote><p>面向对象的<strong>三大</strong>特征：<strong>封装，继承，多态</strong>。</p><p>l面向对象的<strong>四大</strong>特征：<strong>抽象，封装，继承，多态</strong>。</p></blockquote><h3 id="1、定义类">1、定义类</h3><ul><li><p>类名<strong>首字母建议大写</strong>，且有意义，满足“驼峰模式”。</p></li><li><p><strong>一个Java文件中可以定义多个class类，但只能一个类是public修饰</strong>，<strong>而且public修饰的类名必须成为代码文件名</strong>。</p></li><li><p>实际开发中建议还是一个文件定义一个class类。</p></li><li><p><strong>成员变量</strong>的完整定义格式是：<code>修饰符 数据类型 变量名称 = 初始化值；</code>， <strong>一般无需指定初始化值，存在默认值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 属性 (成员变量)</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    <span class="comment">// 行为（方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、对象在内存中的运行机制-回B站看">2、对象在内存中的运行机制(回B站看)</h3><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/15.png" alt=""></p><ul><li><p>对象到底是放在哪个位置的？</p><p><strong>堆内存中</strong></p></li><li><p><code>Car c = new Car();</code> c变量名中存储的是什么？</p><p><strong>存储的是对象在堆内存中的地址。</strong></p></li><li><p>成员变量 <code>(name、price)</code> 的数据放在哪里，存在于哪个位置？</p><p>l<strong>对象中，存在于堆内存中。</strong></p></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/16.png" alt=""></p><p><strong>垃圾回收</strong></p><blockquote><p>当堆内存中的<strong>对象</strong>，没有被任何变量引用（指向）时，就会被判定为内存中的**“垃圾”。**</p></blockquote><h3 id="3、构造器">3、构造器</h3><blockquote><p>定义在类中的，可以用于初始化一个类的对象，并返回对象的地址。</p></blockquote><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表)&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 无参数构造器（默认存在的）：初始化对象时，成员变量的数据均采用默认值。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span>&#123; ... &#125;        </span><br><span class="line">    <span class="comment">// 有参数构造器        </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String n, <span class="type">double</span> p)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用构造器得到对象的格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类 变量名称 = <span class="keyword">new</span> 构造器；</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>, <span class="number">39.8</span>);</span><br></pre></td></tr></table></figure><p><strong>构造器的注意事项</strong></p><ul><li><p>任何类定义出来，<strong>默认就自带了无参</strong>数构造器，<strong>写不写都有</strong>。</p></li><li><p><strong>一旦定义了有参数构造器</strong>，那么<strong>无参数构造器就没有了</strong>，如果还想用无参数构造器，此时就<strong>需要自己手写一个无参数构造器</strong>了。</p></li></ul><h3 id="4、this关键字">4、this关键字</h3><blockquote><ul><li><p>可以出现在构造器、方法中</p></li><li><p>代表<strong>当前对象的地址。</strong></p></li></ul></blockquote><h3 id="5、封装">5、封装</h3><blockquote><p>封装：告诉我们，<strong>如何正确设计对象的属性和方法</strong>。</p><p>封装的原则：对象代表什么，就得<strong>封装对应的数据，并提供数据对应的行为</strong>。</p></blockquote><p><strong>如何进行封装更好？</strong></p><ul><li>一般建议对<strong>成员变量使用private</strong>（私有、隐藏）关键字修饰进（private修饰的成员只能在当前类中访问）。</li><li><strong>为每个成员变量提供配套public修饰的的getter、setter方法</strong>暴露其取值和赋值。</li></ul><h3 id="6、JavaBean">6、JavaBean</h3><blockquote><p>也可以称为实体类，其对象可以用于在程序中封装数据</p></blockquote><p><strong>标准JavaBean</strong>须满足如下书写要求：</p><ul><li><p>成员变量使用 <strong>private</strong> 修饰。</p></li><li><p>提供成员变量对应的 <strong>setXxx() / getXxx()方法。</strong></p></li><li><p>必须提供一个<strong>无参构造器；有参数构造器是可写可不写的。</strong></p></li></ul><h3 id="7、static关键字">7、static关键字</h3><blockquote><p>static是静态的意思，可以用来修饰成员变量、成员方法。</p><p>static修饰成员变量之后称为<strong>静态成员变量（类变量）</strong>，修饰方法之后称为<strong>静态方法（类方法）</strong>。</p><p>static修饰后的成员变量，<strong>可以被类的所有对象共享（访问、修改)</strong>。</p></blockquote><ul><li><strong>静态成员变量内存图</strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/20.png" alt=""></p><ul><li><p><strong>静态成员变量</strong>（有static修饰，<strong>属于类</strong>、加载一次，内存中只有一份），访问格式</p><ul><li><strong><code>类名.静态成员变量</code>(推荐)</strong></li><li><code>对象.静态成员变量</code>(不推荐)</li></ul></li><li><p><strong>实例成员变量</strong>（无static修饰，<strong>属于对象</strong>），访问格式：</p><ul><li><code>对象.实例成员变量</code></li></ul></li><li><p><strong>静态成员方法</strong>（有static修饰，归属于类），建议用类名访问，也可以用对象访问。</p></li><li><p><strong>实例成员方法</strong>（无static修饰，归属于对象），只能用对象触发访问。</p></li></ul><p><strong>静态成员方法内存图</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/21.png" alt=""></p><p><strong>static访问注意事项：</strong></p><ul><li><p><strong>静态方法只能访问静态的成员</strong>，不可以直接访问实例成员。</p></li><li><p>实例方法可以访问静态的成员，也可以访问实例成员。</p></li><li><p><strong>静态方法中是不可以出现this关键字的</strong>。</p></li></ul><h4 id="工具类"><strong>工具类</strong></h4><blockquote><p><strong>类中都是一些静态方法</strong>，每个方法都是以完成一个共用的功能为目的，这个类用来给系统开发人员共同使用的。</p><p>一是调用方便，二是提高了代码复用（<strong>一次编写，处处可用</strong>）</p></blockquote><p><strong>为什么工具类中的方法不用实例方法做？</strong></p><ul><li><p><strong>实例方法需要创建对象调用。</strong></p></li><li><p><strong>此时用对象只是为了调用方法，这样只会浪费内存。</strong></p></li></ul><p>ps: 由于工具里面都是静态方法，直接用类名即可访问，因此，工具类无需创建对象，<strong>建议将工具类的构造器进行私有</strong>。</p><h4 id="代码块"><strong>代码块</strong></h4><blockquote><p>代码块是类的5大成分之一（成员变量、构造器，方法，<strong>代码块</strong>，内部类），<strong>定义在类中方法外</strong>。</p><p>在Java类下，<strong>使用 { } 括起来的代码被称为代码块</strong> 。</p></blockquote><p>代码块<strong>分为</strong></p><ul><li><p><strong>静态代码块</strong>:</p><ul><li><strong>格式</strong>：static{}</li><li><strong>特点</strong>：需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次</li><li><strong>使用场景</strong>：在类加载的时候做一些静态数据初始化的操作，以便后续使用。</li></ul></li><li><p><strong>构造代码块</strong>（<strong>了解，见的少</strong>）：</p><ul><li><strong>格式</strong>：{}</li><li><strong>特点</strong>：每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且在构造器执行前执行</li><li><strong>使用场景</strong>：初始化实例资源。</li></ul></li></ul><p><strong>如果要在启动系统时对静态资源进行初始化，则建议使用静态代码块完成数据的初始化操作。</strong></p><h4 id="单例模式">单例模式</h4><blockquote><p>可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。</p><p>例如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间。</p></blockquote><ul><li><p><strong>饿汉单例设计模式</strong></p><ul><li><blockquote><p>在用类获取对象的时候，对象已经提前为你创建好了。</p></blockquote></li><li><p>定义一个类，把<strong>构造器私有</strong>。</p></li><li><p>定义一个静态变量存储一个对象。</p></li><li><pre><code class="language-java">/** a、定义一个单例类 */public class SingleInstance &#123;    /** c.定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */    public static SingleInstance instance = new SingleInstance ();    /** b.单例必须私有构造器*/    private SingleInstance ()&#123;        System.out.println(&quot;创建了一个对象&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ **懒汉单例设计模式**</span><br><span class="line"></span><br><span class="line">  + &gt; 在真正需要该对象的时候，才去创建一个对象(延迟加载对象)。</span><br><span class="line"></span><br><span class="line">  + 定义一个类，把构造器私有。</span><br><span class="line"></span><br><span class="line">  + 定义一个静态变量存储一个对象。</span><br><span class="line"></span><br><span class="line">  + 提供一个返回单例对象的方法</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    /** 定义一个单例类 */</span><br><span class="line">    class SingleInstance&#123;</span><br><span class="line">        /** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */</span><br><span class="line">        public static SingleInstance instance ; // null</span><br><span class="line">        /** 单例必须私有构造器*/</span><br><span class="line">        private SingleInstance()&#123;&#125;</span><br><span class="line">        /** 必须提供一个方法返回一个单例对象  */</span><br><span class="line">        public static SingleInstance getInstance()&#123;</span><br><span class="line">            if (instance == null) &#123;</span><br><span class="line">                instance = new SingleInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="8、继承">8、继承</h3><blockquote><p>Java中提供一个<strong>关键字extends</strong>，用这个关键字，我们可以让<strong>一个类和另一个类建立起父子关系</strong>。</p><p>Student称为<strong>子类（派生类）</strong>，People称为<strong>父类(基类 或超类)</strong>。</p><p><strong>作用</strong>：当子类继承父类后，就<strong>可以直接使用父类公共的属性和方法了</strong></p><p><strong>好处</strong>：<strong>提高代码的复用性，减少代码冗余，增强类的功能扩展性</strong></p><p><strong>格式</strong>：<strong><code>子类 extends 父类</code></strong></p></blockquote><h6 id="-6"></h6><h2 id="七、String、ArrayList">七、String、ArrayList</h2><h3 id="1、String类">1、String类</h3><h4 id="（1）概述">（1）概述</h4><blockquote><p>java.lang.String 类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串。</p><p>Java 程序中的<strong>所有字符串文字</strong>（例如“abc”）<strong>都为此类的对象</strong>。</p></blockquote><p><strong>String</strong>类的特点详解</p><ul><li>String其实常被称为<strong>不可变字符串类型</strong>，它的<strong>对象在创建后不能被更改</strong>。</li><li>String变量<strong>每次的修改其实都是产生并指向了新的字符串对象</strong></li></ul><p><strong>字符串对象存在哪里？</strong></p><ul><li>在<strong>字符串常量池</strong>中存储。</li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/17.png" alt=""></p><h4 id="（2）字符串的内容比较">（2）字符串的内容比较</h4><p><strong>字符串的内容比较 <em>不适合</em> 用“==”比较。</strong>(<strong>基本数据类型比较时使用</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sysLoginName</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请您输入您的登录名称&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> sc.next();<span class="comment">// itheima</span></span><br><span class="line">System.out.println(sysLoginName == loginName);<span class="comment">// false（bi）</span></span><br></pre></td></tr></table></figure><p><strong>推荐使用String类提供的“equals”比较：只关心内容一样即可</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean <strong>equals (Object anObject)</strong></td><td>将此字符串与指定对象进行比较。只关心字符内容是否一致！</td></tr><tr><td>public boolean <strong>equalsIgnoreCase (String anotherString)</strong></td><td>将此字符串与指定对象进行比较，<strong>忽略大小写</strong>比较字符串。只关心字符内容是否一致！</td></tr></tbody></table><h4 id="（3）String常用API">（3）String常用API</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int <strong>length()</strong></td><td>返回此字符串的长度</td></tr><tr><td>public char <strong>charAt(int index)</strong></td><td>获取某个索引位置处的字符</td></tr><tr><td>public char[] <strong>toCharArray()</strong></td><td>将当前字符串转换成字符数组返回</td></tr><tr><td>public String <strong>substring(int beginIndex, int endIndex)</strong></td><td>根据开始和结束索引进行截取，得到新的字符串（包前不包后）</td></tr><tr><td>public String <strong>substring(int beginIndex)</strong></td><td>从传入的索引处截取，截取到末尾，得到新的字符串</td></tr><tr><td>public String <strong>replace(CharSequence target, CharSequence replacement)</strong></td><td>使用新值，将字符串中的旧值替换，得到新的字符串</td></tr><tr><td>public String[] <strong>split(String regex)</strong></td><td>根据传入的规则切割字符串，得到字符串数组返回</td></tr></tbody></table><h4 id="（4）创建字符串的两种方式">（4）创建字符串的两种方式</h4><ul><li><p>方式一：直接定义</p><p><code>String name = &quot;ggw&amp;xpl&quot;;</code></p></li><li><p>方式二：通过String构造类创建</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public String(String original)</td><td>根据传入的字符串内容，来创建字符串对象</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public String(byte[] chs)</td><td>根据字节数组的内容，来创建字符串对象</td></tr></tbody></table></li></ul><p><strong>面试常考</strong>：</p><p>两种方式有什么区别</p><ul><li>以“”方式给出的字符串对象，在字符串常量池中存储，而且<strong>相同内容只会在其中存储一份</strong>。</li><li>通过构造器new对象，<strong>每new一次都会产生一个新对象</strong>，放在堆内存中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"><span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/18.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/java/javese/19.png" alt=""></p><h4 id="（5）String常见面试题">（5）String常见面试题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 创建了两个对象，&quot;abc&quot;已经创建了一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">// 指向前一行中常量池&quot;abc&quot;</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;<span class="comment">// Java存在编译优化机制，程序在编译时： “a” + “b” + “c” 会直接转成 &quot;abc&quot;</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Arraylist">2、Arraylist</h3><blockquote><p><strong>集合的特点</strong></p><ul><li>集合的<strong>大小不固定</strong>，启动后可以动态变化，<strong>类型也可以选择不固定</strong></li><li>集合非常适合做元素个数不确定，且要进行增删操作的业务场景</li><li>集合还提供了许多丰富、好用的功能，而数组的功能很单一</li><li><strong>集合中存储的元素并不是对象本身，而是对象的地址</strong></li></ul></blockquote><p>ArrayList是集合中的一种，它支持索引</p><h4 id="（1）对象创建">（1）对象创建</h4><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public <strong>ArrayList()</strong></td><td>创建一个空的集合对象</td></tr></tbody></table><h4 id="（2）增加元素">（2）增加元素</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean <strong>add(E e)</strong></td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public void <strong>add(int index,E element)</strong></td><td>在此集合中的指定位置插入指定的元素</td></tr></tbody></table><h4 id="（3）泛型">（3）泛型</h4><blockquote><p>ArrayList<E>：其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种数据类型。</p></blockquote><p>例如：<code>ArrayList&lt;String&gt;</code> ：此集合只能操作字符串类型的元素。</p><p><strong>注意：泛型只能支持引用数据类型，不支持基本数据类型。</strong></p><h4 id="（4）ArrayList集合常用方法">（4）<strong>ArrayList</strong>集合常用方法</h4><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public E <strong>get(int  index)</strong></td><td>返回指定索引处的元素</td></tr><tr><td>public int  <strong>size()</strong></td><td>返回集合中的元素的个数</td></tr><tr><td>public E <strong>remove(int  index)</strong></td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public boolean <strong>remove(Object o)</strong></td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>public E <strong>set(int index,E element)</strong></td><td>修改指定索引处的元素，返回被修改的元素</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023使用picgo + github搭建图床（typora）,解决jsdelivr问题</title>
      <link href="/2023/01/05/2022GitHub%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/01/05/2022GitHub%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="一、图床是什么">一、图床是什么</h2><blockquote><p><strong>图床一般是指储存图片的服务器</strong></p><p>有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p></blockquote><ul><li><p><strong>说人话</strong>： 就是把你博客，或者笔记中的图片存到云端上去，这样文本里面只留存图片链接</p></li><li><p><strong>举个例子</strong>：写<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">markdown</a>笔记时，图片存储在本地，用相对路径或者绝对路径加载图片，如果要同步笔记或者迁移笔记的话，</p><p>那么是不是要把图片也进行迁移，很麻烦。<br>有人会说可以直接复制整个目录结构，也麻烦不了太多。但是这样是不是将来在两个设备写markdown时，就需要总是同步图片，特别是如果本地写好博客，去发布时，图片链接又该如何让去解决，一张一张处理，效率显然太慢了。</p></li><li><p><strong>图床有什么效果</strong>：例子中那些问题，图床就可以很好的解决</p><ul><li>同步笔记时，利用iCloud，或者其他云盘，就可以直接同步markdown纯文本文件，不需要再考虑图片问题，笔记的体积还小，只需要存储markdown文本文件，去处理图片的体积。</li><li>博客也只需要，将markdown全选 + 复制 + 粘贴 + 发布就好了</li></ul></li></ul><h2 id="二、怎么搭建">二、怎么搭建</h2><p>方法有很多，但是说到底还是选择用什么样的云存储，可以是自己用服务器写API来搭建，也可以使用大厂商提供的对象存储，还有就是本文的白嫖，白嫖<strong>GitHub</strong>。</p><p>而<strong>picgo</strong>只是一个图床管理工具，帮助我们上传图片到图床。同样的应用还有upic，以及其他，都是同样的功能，但图床的方便一定少不了图床管理工具。picgo则是可以配合<a href="http://www.cankaowang.com/question/245966.html">typora</a>使用。</p><h3 id="1、配置GitHub">1、配置GitHub</h3><ul><li><p><strong>（1）创建仓库</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-02-25.png" alt=""></p></li><li><p><strong>（2）生成token私钥</strong></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-11-35.png" alt=""></p><hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-13-36.png" alt=""></p><hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-18-48.png" alt=""></p><hr><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-23-50.png" style="zoom:80%;" /> <hr><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-19-16.png" alt=""></p><p><strong>ps: 得到的私钥要保存下来，后面github上无法查看</strong></p></li></ul><h3 id="2、配置picgo">2、配置picgo</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载</a></p><p>还需要配置node.js环境才可以使用。<a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%7B%22request%5Fid%22%3A%22167245108816782425141530%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167245108816782425141530&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121788104-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v1&amp;utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">node.js安装及环境配置</a></p><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-33-00.png" alt=""></p><table><thead><tr><th>名称</th><th>填写</th></tr></thead><tbody><tr><td>设定仓库名</td><td>用户名/仓库名</td></tr><tr><td>设定分支名</td><td>分支名，用户main就可以</td></tr><tr><td>设定Token</td><td>这个就是GitHub配置的token私钥</td></tr><tr><td>设定存储路径</td><td>相对于仓库来说，自定义填写</td></tr><tr><td><strong>设定自定义域名</strong></td><td><strong>重要！！！解决jsdelivr CDN加速问题</strong> <strong>如下填写.</strong></td></tr></tbody></table><h4 id="解决jsdelivr-CDN加速问题">解决jsdelivr CDN加速问题</h4><p><strong>这个现在失效了</strong>：<code>https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main</code></p><p><strong>改成：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.staticaly.com/gh/[github用户名]/[仓库名]@main</span><br></pre></td></tr></table></figure><p>@后面跟的是填写的分支名，一定要一致</p><h3 id="3、配置typora">3、配置typora</h3><ul><li>打开：<strong>文件 -&gt; 偏好设置 -&gt; 图像</strong></li></ul><p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-49-53.png" alt=""></p><ul><li><strong>使用：</strong></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-57-31.png" style="zoom: 67%;" /> <ul><li><strong>效果：</strong></li></ul><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/blogs/Snipaste_2022-12-31_22-59-42.png" style="zoom:67%;" /> ]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法学习记录</title>
      <link href="/2023/01/05/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/01/05/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、常用快捷键">1、常用快捷键</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">设置标题， 1-6级别</td><td style="text-align:left">Ctrl + 1-6</td></tr><tr><td style="text-align:left">清空标题</td><td style="text-align:left">Ctrl + 0</td></tr><tr><td style="text-align:left">加粗</td><td style="text-align:left">Ctrl + B</td></tr><tr><td style="text-align:left">斜体</td><td style="text-align:left">Ctrl + I</td></tr><tr><td style="text-align:left">下划线</td><td style="text-align:left">Ctrl + U</td></tr><tr><td style="text-align:left">删除线</td><td style="text-align:left">Alt + shift + 5</td></tr><tr><td style="text-align:left">插入代码</td><td style="text-align:left">Ctrl + Shift  + K</td></tr><tr><td style="text-align:left">插入图片</td><td style="text-align:left">Ctrl + Shift + I</td></tr><tr><td style="text-align:left">插入表格</td><td style="text-align:left">Ctrl + T</td></tr><tr><td style="text-align:left">表格: 向下方插入行</td><td style="text-align:left">Ctrl + Enter</td></tr><tr><td style="text-align:left">源码模式/退出源码模式</td><td style="text-align:left">Ctrl + /</td></tr></tbody></table><h2 id="2、基本语法">2、基本语法</h2><h3 id="2-1-字体设置">2.1 字体设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正常文字</span><br><span class="line">*倾斜*</span><br><span class="line">_倾斜_</span><br><span class="line">**加粗**</span><br><span class="line">***倾斜加粗***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>正常文字<br><em>倾斜</em><br><em>倾斜</em><br><strong>加粗</strong><br><em><strong>倾斜加粗</strong></em><br><s>删除线</s></p><p><strong>注意：有时候markdown加粗不生效</strong></p><p>例如：<code>**账号：**</code></p><p><strong>原因：</strong></p><p>首先这是正常现象，不是bug。markdown的语法就是这样的。</p><p>加粗的方式是前后一对**标记实现的，前面的叫左定界符，后面的叫右定界符。</p><p><strong>左定界符生效条件：</strong></p><ol><li>后面不能是空白；</li><li>当前面没有空白或标点符号时，后面不能是标点符号。</li></ol><p><strong>右定界符生效条件：</strong></p><ol><li>前面不能是空白；</li><li><strong>当后面没有空白或标点符号时，前面不能是标点符号。</strong></li></ol><p><strong>解决方案：</strong></p><p>一般出现加粗不生效的情况，都是由于 <strong>加粗的内容里最后一位是标点符号</strong> 的原因。只需要在<strong>右定界符后面加一个空格</strong>即可。如<code>|**您好：** |</code>欢迎。</p><h3 id="2-2-分级标题">2.2  分级标题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一共六级</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure> <img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/05.png" style="zoom: 67%;" /> <h3 id="2-3-链接">2.3 链接</h3><p><strong>（1）插入图片</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片路径 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">![图片描述](图片路径)</span><br><span class="line"><span class="attr">ps</span>: 图片描述可不写</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/01.jpg" alt="举例" style="zoom:25%;" /> <p><strong>（2）自动链接</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Markdown</span> 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， <span class="title class_">Markdown</span> 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的</span><br></pre></td></tr></table></figure><p><a href="mailto:1653139161@qq.com">1653139161@qq.com</a></p><p><a href="https://badu.com">https://badu.com</a></p><p><strong>（3）文字链接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">行内式链接形式：[超链接文字](url)</span><br><span class="line"></span><br><span class="line">例如：[百度](https://www.baidu.com/)</span><br><span class="line">效果如下：</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度</a></p><p>还可以这样使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[超链接文字](#大纲中位置的文字)</span><br><span class="line">既可以前往六个等级标题的地方</span><br><span class="line"></span><br><span class="line">例如：前往快捷键</span><br><span class="line">[点我](#1、快捷键)</span><br></pre></td></tr></table></figure><p><a href="#1%E3%80%81%E5%BF%AB%E6%8D%B7%E9%94%AE">点我</a></p><p>ps: 文字要完全一样，且#后面没有空格</p><p><strong>（4）引用链接</strong></p><blockquote><p>可以先给一个链接取名，然后，如果我们要多次添加这个链接，我们就可以直接使用这个链接的名字，而不用多次使用文字链接的方法。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">取名: [关键词][链接的名称]</span><br><span class="line">使用: [链接的名称]: 链接地址</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">[baidu]: https://www.baidu.com/</span><br><span class="line">[百度][baidu]</span><br><span class="line">效果如下：</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度</a></p><h3 id="2-4-分割线">2.4 分割线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线;</span><br><span class="line">行内不能有其他东西。你也可以在星号或是减号中间插入空格。</span><br><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line">效果是一样的</span><br></pre></td></tr></table></figure><hr><hr><hr><h3 id="2-5-代码块">2.5 代码块</h3><p>（1）行内式：如果在一个行内需要引用代码，只要用反引号`引起来就好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="string">`示例效果`</span></span><br></pre></td></tr></table></figure><p>这是一个<code>示例效果</code></p><p>（2）多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹，就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">console.log(&quot;hello world&quot;)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>（3）代码块里面包含html代码<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理。</p><p><strong>注意：简书代码块里不支持html。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>html<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果相当于五级标题</p><h3 id="2-6-公式块">2.6 公式块</h3><p>与LaTex类似</p><p>（1）行内公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$公式内容$</span><br></pre></td></tr></table></figure><p>例如：<code>E = mc^2</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>（2）多行公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">公式内容</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">$$</span><br><span class="line">E = mc^2</span><br><span class="line">$$</span><br><span class="line">效果如下</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>具体使用看我的另一篇博客 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span></span></span></span> <a href="https://ggw2021.github.io/2023/01/07/MarkDown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">快速链接</a></p><h3 id="2-7-引用">2.7 引用</h3><p>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</p><p>（1）基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用</span><br></pre></td></tr></table></figure><blockquote><p>这是引用</p></blockquote><p>（2）引用的嵌套使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用的嵌套</span><br><span class="line">&gt;&gt;引用的嵌套</span><br><span class="line"></span><br><span class="line">&gt;&gt;引用的嵌套</span><br><span class="line">&gt;引用的嵌套</span><br></pre></td></tr></table></figure><blockquote><p>引用的嵌套</p><blockquote><p>引用的嵌套</p></blockquote></blockquote><blockquote><blockquote><p>引用的嵌套<br>引用的嵌套</p></blockquote></blockquote><p>（3）引用其它要素<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</p><h3 id="2-8-列表">2.8 列表</h3><p>（1）无序列表<br>使用 *，+，- 表示无序列表。<br>注意：符号后面一定要有一个<strong>空格</strong>，起到缩进的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 列表文字</span><br><span class="line">- 列表文字</span><br><span class="line">- 列表文字</span><br><span class="line"></span><br><span class="line">* 列表文字</span><br><span class="line">* 列表文字</span><br><span class="line">* 列表文字</span><br><span class="line"></span><br><span class="line">+ 列表文字</span><br><span class="line">+ 列表文字</span><br><span class="line">+ 列表文字</span><br></pre></td></tr></table></figure><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li><li>列表文字</li></ul><p>（2）有序列表<br>使用数字和一个英文句点表示有序列表。<br>注意：英文句点后面一定要有一个<strong>空格</strong>，起到缩进的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 列表文字</span><br><span class="line"><span class="number">2.</span> 列表文字</span><br><span class="line"><span class="number">3.</span> 列表文字</span><br></pre></td></tr></table></figure><ol><li>列表文字</li><li>列表文字</li><li>列表文字</li></ol><p>（3）列表和其它要素混合使用<br>列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。</p><p>（4）注意事项<br>在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2002.</span> <span class="number">05</span>. <span class="number">01</span></span><br><span class="line"></span><br><span class="line"><span class="number">2002</span>\. <span class="number">05</span>\. <span class="number">01</span></span><br></pre></td></tr></table></figure><ol start="2002"><li><ol start="5"><li>01</li></ol></li></ol><p>2002. 05. 01</p><h3 id="2-9-表格">2.9 表格</h3><p>表格的基本写法很简单，就跟表格的形状很相似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|学号|姓名|分数|</span><br><span class="line">|-|-|-|</span><br><span class="line">|小明|男|<span class="number">88</span>|</span><br></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>88</td></tr></tbody></table><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|学号|姓名|分数|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|小明|男|<span class="number">88</span>|</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">学号</th><th style="text-align:center">姓名</th><th style="text-align:right">分数</th></tr></thead><tbody><tr><td style="text-align:left">小明</td><td style="text-align:center">男</td><td style="text-align:right">88</td></tr></tbody></table><h2 id="3、-常用技巧">3、 常用技巧</h2><h3 id="3-1-换行">3.1 换行</h3><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：<code>&lt;br&gt;</code></p><h3 id="3-2-缩进字符">3.2 缩进字符</h3><p>不断行的空白格  或  半角的空格   或  全角的空格   或</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/02.png" style="zoom:80%;" />  <h3 id="3-3-特殊符号">3.3 特殊符号</h3><p>（1）对于 Markdown 中的语法符号，前面<strong>加反斜线\即可显示符号本身</strong>。</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/03.png" style="zoom:80%;" />  <p>（2）其他特殊字符，示例如下：</p><img src="https://cdn.staticaly.com/gh/ggw2021/images@main/markdown/markdown-note/04.png"  /> <p>字符对应的Unicode码：<a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p><h3 id="3-4-链接的高级操作">3.4 链接的高级操作</h3><h4 id="（1）参考式链接">（1）参考式链接</h4><p>在文档要插入图片的地方写<code>![图片或网址链接][标记]</code>，在文档的最后写上[标记]:图片地址 “标题”。（最后这个”标题”可以不填写）</p><h4 id="（2）内容目录">（2）内容目录</h4><ul><li><p>在段落中填写<code> [TOC]</code> 以显示全文内容的目录结构。</p></li><li><p>github得使用锚点链接来实现，一般使用工具来生成，例如：VS code的插件。 具体可以用到再查。</p></li><li><p>不同博客平台，各不相同，例如：csdn采用<code>@[toc](文字)</code>，具体得看情况。</p></li></ul><h4 id="（3）锚点">（3）锚点</h4><p>锚点其实就是页内超链接。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。</p><p><strong>注意</strong>：在简书中使用锚点时，点击会打开一个新的当前页面，虽然锚点用的不是很舒服，但是可以用注脚实现这个功能。</p><p><strong>语法说明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法在文字链接处有使用到，在本文上面</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
